%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: blip stickers page.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: jameson otton
%%CreationDate: 9/16/09
%%BoundingBox: 0 0 285 412
%%HiResBoundingBox: 0 0 284.4649 411.2793
%%CropBox: 0 0 284.4649 411.2793
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 7778 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD17FF52FD24F8FD37FF52FD1EF827845927F8F8A8FD36FF52FD07%F8527D527D527D527D527D277D527D527D527D527D52F827FFC3CAA8F8F8%FD37FF52FD07F8FD0AFF7DFD09FFA8F859C3FCFCFFF8F8A8FD36FF52FD07%F8A8FF7D7D525252FFFFFF52FFFF7D527D527DFFFFA8F827FFBCCAA8F8F8%FD37FF52FD07F8A8FF27277D5227A8FFFF7DFFFFF87D525227FFFFA8F8F8%27FF8427F827A8FD36FF52FD04F8272727A8FF527DA8FF277DFFFF52FFA8%52A8FF7D27A8FFA827F8F8A852F8F8F8FD37FF52F8F8F8FD04A8FFFF52F8%272727F8A8FF7DFFFFF8272727F852FFFFA8FFA8FF27F8F8F8A8FD36FF52%F8F8F8A852F8F8A8FF52A8FFFFFF527DFF52FFA852FFFFFFA852FFA827F8%27F827F8F8F8FD37FF52F8F859FF7DF8F8A8FF5227525252F8A8FF7DFFFF%F85252522752FFA8FD08F8A8FD36FF52F852FFB5CA7DF8A8FFFD04A87DA8%FFFF52FFFFA87DFD04A8FFA8FD08F8FD37FF52F884BCFCB5A8F8A8FD09FF%7DA8FD08FFA8FD07F827A8FD36FF52F852FFC3FF52F8272E2752272E2752%2727F82E272E2752272E272E27FD08F8FD37FF52F8F8278452F8F844FD05%20F8F868F820F820F8F8F820F82020FD08F827A8FD36FF52FD07F8446844%4444682020686844446868F8444468446820FD08F8FD37FF52FD07F82020%20F84444F8F8442044FD052044F8206820FD08F8A8FD36FF52FD1AF820FD%09F8FD37FF7D275227272752272727522727275227272752272727522727%275227272752272727522752A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDFCFFFDCCFFA8FD117DA8FD1FFFA852FD0F7D52A8FD17FF52FD11F852%FD1FFF7DFD11F827FD17FF52F85227522727F8F8F82727522727F8F8F852%FD09FFA8FD047DA8FFFFFFFD057DFD08FF7DF8FD0520F8F8F8FD042044F8%F8F827FD17FF52527D5252527DF8F8277D5252527D52F8F852FD09FF277D%7D7D527DFFFF7D527D7D7D52A8FD07FF7D2068FD044420F8F86868444444%68F8F827FD17FF525227F8F8F87D27F8F852F8F8F85252F8F852FD09FF52%A8FFFFA827FFFF7D7DFFFFFF52A8A8FD06FF84F844F8F8F84420F8F868FD%04F868F8F827FD17FF525227F8F8F8FD0552F8F8F8277D525252FD09FF52%FFFFFFA8FD047DA8FFFFFFA8527D7DFD05FF7D2044F8F8F8206844444420%F8F8F868446827FD17FF525227FD05F8275252FD05F8272752FD09FF52A8%FD05FF7D7D7DFD05FF7D7DFD05FF84F844FD05F8204444FD06F8444BAFFD%16FF52522727527D52F8275252F8527D7D27F85252FD09FF52FFA85252A8%FF7D52A8FF7D5252FFA87DFD05FF7D2044F8446844F82068442020686844%F8444BFD17FF525227F852F87DF8275252F87DF85227F82752FD08FFA852%FF7D7DA852FF527D7DFF27FF27A87D7DFD05FF7DF844F868F844F8204468%F844202068F8444BAFFD16FF525227277D527DF8277D52F87D527D52F852%52FD09FF52FF7D7D527DFF7D52A8FF527D52A8A87DFD05FF7D2044F86844%6820206844F844684468F8684BFD17FF525227F8272727F8275252F82727%27F8272752FD09FF52FFFF7DA8A8FF7D7D7DFF7DA87DFF7DA8FD05FF7DF8%44F8202020F8204468F8F82044F8F8444BFD17FF527D5227F827F827527D%5227F827F827275252FD09FF27A8A8FFA8FFA87D527DFFFFA8FFFF7D7DFD%05FF7D204420F820F82044684444F820F820206827FD17FF52F87D527D52%7D527DF87D527D527D527D2752FD09FF7D27FD0652A8FD0752A8FD05FF84%F86844684468446820444468446844684427AFFD16FF52FD11F852FD1FFF%7DFD06F827FD0AF827FD17FF522044F820F8202020F8F84420F844F844F8%52FD09FFBCC3CAC3CACAC3CAFFCABCCACAC3FFC3CAFD05FF7DF852275227%27525227525227F85227522727A8FD16FF522044FD04206820F8F8444420%442044442EFD09FFBCC3CACACAC3B5CAFFFFB5CAC3BCCABCCAFD05FF7DF8%5252277DFD05527D27FD04527D27FD17FF59FD11F852FD0AFFCAFFFFFFCA%CAFD04FFCAFFCAFFCAFD06FF7DFD04F827FD0AF8272727FD17FF52FD11F8%52FD1FFF7DFD11F827FD17FFA8FD117DA8FD1FFFA8FD117DA8FDFCFFFDFC%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDD3FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF52A87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DFFA8FD58FFA8%A8FF7DFD59FF7DFFA8FD22FF845252FD33FFA8A8FF7DFD0BFF7D52275227%52275227527D7D275227522752275252FFA820444427FD33FF7DFFA8FD0B%FF7DFD09F87D27FD08F827FFA820FCFC20A8FD31FFA8A8FF7DFD0BFF7DF8%27FD047D27F8F85227F8FD057DF8F8F8FFA827444427FD33FF7DFFA8FD0B%FF7DF8527D2727A852F8F87D27F87D5227527DF8F827A8FFA82727FD33FF%A8A8FF7DFD07FFA87D7D7D27F8277D27277DA8F8F85227F87D272727A827%F8F8A8A8FF277DFFFFFFCAA1FFFFFFA1FFCACAFFFFCAFD05FFA1CAFD06FF%CAFFCAFD0FFFCAFD04FFA87DFFA8FD07FF7DF8525227F852A87D7D7DA87D%F87D27F87DA87D7D7DA8F8F8FD04277DFFFFFFC3B6C3FFCAC3FFCAC3FFC3%BCC3FD04FFC3B5CAFFCAB6C4FFFFB5CBFD07FFCAB6CAFFCABCFFCABCC3FF%FFFFA8A8FF7DFD07FF7D52FFFF7DF8277DF8F8F87D52F85227F87DFD04F8%7DF8F8A8FD07FFCA93C3FFCAC3FFC3CAFFC3B5CAFD04FFC3BCC3FFCABCC3%FFCAB6CAFFCAFD05FFC3BCC3FFC4CAFFCAB5C3FD04FF7DFFA8FD06FF7D27%F87DFF7DF852FD05A87DF87D27F87DA87DA8A8A8F827FD12FFCACBFD06FF%CAFFFFFFCAFD13FFCAC3CAFFFFFFA8A8FF7DFD05FFA820688CF8AF7DFD04%F827FD04F85227FD05F827F8F8F8FD39FF7DFFA8FD05FFA8F8FCFC20A8A8%F827F827F8F8F827F87D2727F8F8F827F827F827FD38FFA8A8FF7DFD06FF%52F82027FFFFFFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FD39FF7D%FFA8FD07FFA87DFD4FFFA8A8FF7DFD59FF7DFF7DFD58A87DA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FDFCFFFDFC%FFFDEBFF5227522752275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%52275227A8FFFD5AF852FF27FD59F87DFFFD23F8275959FD34F87DFF27FD%0BF827FD09522727FD0952F827A8CACAA8FD33F87DFFFD0CF827FD09FF52%A8FD08FFA8F827CB8CFCA827FD32F852FF27FD0BF852FFFF7D7D527DA8FF%FF7DA8FFFD057DFFFFFFF827FFBCBCFFFD33F87DFFFD0CF827FF7D277D7D%F87DFFFF52A8FF27527D5227A8FFA8F8F852FFA805FD33F852FF27FD07F8%272727F87DFF7D52FFFF5252FFFF7D7DFF27FFFFFF27FFFFFFF8F8F8AE52%FD04F820F8F8F820F820FD09F820FD1FF87DFFFD08F852FFA8FFA8FF7DF8%272727F852FF52A8FF27F8FD0427FFFFA8A8A8FF52F8F8F8206820F82020%F82020F8204420FD04F82068F8F8F84420F8F844FD09F844F8F8F844F820%4420FD04F852FF27FD07F87DA8F8F852FF7D52FFFFFF527DFF7D7DFF27FF%FFFFA827FFFFFD0427FD04F8206844F82044F82020F8446820FD04F84468%44F8206844F8206820F820FD05F8446844F84420F8208C44FD04F87DFFFD%07F827A8FF27F827FF7D27275252F852FF52A8FF2727522752F8FFA8FD09%F820FD08F82020FD06F820F8F8F820FD0DF820FD05F8204420FD04F87DFF%27FD05F827A8C3BCFFF852FFFFFD057DFFFF7DA8FFA8FD047DA8FFFFFD39%F87DFFFD06F827FFFCFCCA2E27FD09FF52A8FD08FFA8FD39F852FF27FD05%F827A8CAC3FFF8272752275227522752272727522752275227522727FD39%F87DFFFD07F827597DFD50F852FF27FD59F87DFFFD5AF852FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-09-16T15:59:39+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-09-16T15:59:39+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-09-16T15:59:39+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>180</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq8g/wCc&#xA;sP8AySWr/wDGez/6iUxV8FYqzD8r/wAr9f8AzH1+40PQ7i0tru2tHvXe9eRIzGkkcRAMUczcuUw7&#xA;eO+KvUP+hKvzT/6uuh/9JF5/2SYq7/oSr80/+rrof/SRef8AZJiqW+Xv+cR/zI13S11K01LR44Gl&#xA;uIAss10H5W0727mi2zCheIkb9MVTL/oSr80/+rrof/SRef8AZJirFvzI/wCcbvPP5f8AlpvMOs32&#xA;mXFks0duY7OW4eXlLXiaSQRLTbf4sVZVon5K/lfp+jeXIPOF7qreYfM9pBfI+nmFbazhvDS35LIr&#xA;NIw/bofGg6VxsuqjjkInmXednez+fV4J5oGPDC+fMkCzXw71b/nHvyrceU/+ck73y5cSieTS4b6D&#xA;11FBIoUFHpU05KQadsyXRvs3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXkH/OWH/kktX/AOM9n/1E&#xA;pir4p8l+R/MfnPV20jy/bpcXyQvcukkscKiKMgOxeVkXbkO+KvpP/nFz8o/O3k78wNQ1PXbe2itJ&#xA;tJmto2gu7a4b1GubdwCkMjsBxjbelMVbm8xeXZvNPm2PzN5w86WN3ba7fW9pa6LcXxtI7WNx6aqI&#xA;o5UUglhxB2FNsVegf849eeLPU7XWPLkuo6pqGoWN9d3VnLrH1h7ltLef07R2lnAJJUbjsa7Yql/m&#xA;jU7zTP8AnHLU72zvbnT5o9UlU3ljI8VyiSeYyknpvGQ4JjZht1rTFXnfmzzP5esdMju/KvnHz7ea&#xA;rDdWzmC/n1E25txMpn5gxRg/u+W1cVeqfnho+qfmh+TdqfJNsdTbUprW+tI2eO2LQUY8j9YaIDr0&#xA;JrirAdIf80vy/wDye1fVvPPlrTpNS8nJp8Xk67vfq91II5roQujtbTOeNuHQxfZ+ZptCWOJIJG4c&#xA;nFrc2OEoQnKMJcwDsWA/84u6xqWtfn2+r6nMbjUL+2vri6mNAWkkAZjQbD5Dpk3GfbuKuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KvIP+csP/JJav8A8Z7P/qJTFXi/5U+XvJfkfyXp/mnzBHe6hqPnWyvb&#xA;L0LR0SK30529GUgt9qZuo3oOm1N8XUaqOKr6u+7F7Ay9oCZhKMeDv7zy+7myX8h/Ilv5G/5yQ8ye&#xA;X7S5a7sI9BeexnkoJTBcT2cqCQCg5ry4nYVpWgrTMoF0Uo0aL1Ky8gfmlompa7J5d8yaXb6drOqX&#xA;OqiC70+WeVHuiKrzWeMEAKO2KEz8oeSPONn52vPNfmjWbPUrq402LS4YrK1e1VI4p3nDHnLLU8pW&#xA;xVJrTyjd+bvyWuNAs7tLG6udSu5YbqRDKiNa67JciqArWvo064qjrry5+edzbS28nmrRAkyNG5XS&#xA;pq0YUNP9K98Veef85C+WpPLH/ONel+XpJxdSaVLYWrXCqUDmMMOQUk0r88VfG2Kvav8AnEP/AMnL&#xA;bf8AMDd/8RGKvurFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXkH/OWH/kktX/4z2f/AFEpir5U8jfn&#xA;15u8paDFoS2Oma3plpI0+mw6vbG4+qSOeTNAyvGVqxLU8emRlAHmLbsOpyYr4JSjexokWPOmN3vm&#xA;/wAweYfNGoeYNV1GU6tfqzTXMcv1djxChY1IKqFCoFVemwyGWRA2cjQYceSZE/5prcR3952XjVdU&#xA;eqJrV2/phyzLdupfi7gbs/FaqFynxZjcj8UHZDs/Ty9MZCXDxcpAGVSmBzPCLHD9lc904NZ1Ro71&#xA;G1q7LQyqIZfrbrWMCTk3Ev8AECQvTfJSyTBia5jf37ftasGj08o5YmQuExwy4gPTWSzRPqG0eW/K&#xA;vOo76/hQxxa5cxIqO8aLckB2rUUCuOPqEk79O/XB40+77/xt9rI9m6ff94B6SRvH1EVXX08W/PeN&#xA;b82rbVtYaHnPrt3G3IBqXTGnxKKU51+yxavTamSnlkDsPvatPoMMoXknwm++J6gVV3yJlfLaufJD&#xA;WLrUpNPhafUbm5hmKkRTTtIp+ANXgTsVLcdx7jHFlMpEHox12ghiwwyRJ9ddR1iJcuYq+HfnzGxS&#xA;PMh1L2r/AJxD/wDJy23/ADA3f/ERir7qxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxViv5m+QLPz75P&#xA;uvLN3dyWUF08TtcRKrODDIsgADbb8cVeK/8AQkPlb/qZb7/kTDirv+hIfK3/AFMt9/yJhxVw/wCc&#xA;IvKw6eZr7fr+5h/rikF3/QkPlb/qZb7/AJEw4od/0JD5W/6mW+/5Ew4q7/oSHyt/1Mt9/wAiYcVb&#xA;P/OEflggA+Z78hdlBhi2+W+CmRkSACeTX/QkPlb/AKmW+/5Ew4WLLvyt/wCcZtC/L3zZH5js9aur&#xA;6eOGWAQTRxqhEoAJqu+1MVezYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlWp+bPK2lXItdU1mxsLkqHEFzcww&#xA;vxNQG4uymhp1xVCf8rD8gf8AUzaV/wBJ1t/zXirv+Vh+QP8AqZtK/wCk62/5rxV3/Kw/IH/UzaV/&#xA;0nW3/NeKq9j508nX91HaWOu6dd3cpIit4LuCSRiBUhUVyx2HbFU5xV2KuxV2KuxV2KuxVB6prOj6&#xA;Tbrc6rfW+n27uI0mupUhQuQWChpCo5UUmntiqV/8rD8gf9TNpX/Sdbf814q7/lYfkD/qZtK/6Trb&#xA;/mvFXf8AKw/IH/UzaV/0nW3/ADXirv8AlYfkD/qZtK/6Trb/AJrxVPo5I5Y1kjYPG4DI6kFWUioI&#xA;I6g4quxV2KuxV2KuxV8kf85KeXdC1T80dZ1HW7i6gsdD8u2N2y2SRyTSGXUBaKoErItAbjkd+2Kv&#xA;ItD8tflnr93Np2mXutR3wsr67ga5gtRCTY2ct3xcpKzAMIOOwxVI/I/l7R9ZudUfV7i4t7DS9Pl1&#xA;CU2iI8zenJGgRRIyLv6vjiqfeXPLf5WeYNbtdGs73XIrq9YxwyTQWnphgpYcuMpam3YYqif+cbv/&#xA;ACdvlb/jPN/1DS4q/QnFXYq870nzN+aWuvqdxpFnocen2ep3+nQfW5rsTMLC6ktubiONlHL0q7HF&#xA;U38k+ZPMmo6rr+keYLezhvdFlt4+dg8rxOtzAJwazKjVHKnTFUrtPM35l6zqetx6HaaKun6TqMun&#xA;I17LdLM5iRHLkRRuu/qeOKpj5P8AMnmq88y65oHmO2sYbnSrawuopdOeZ0db5rlaN6yoQV+q9h3x&#xA;VmGKvBf+czIRN+Wuiwk0EnmC1Qnw5Wt0MjOVRJ7m/TYvEyxgf4pAfMvjWWLRY5HjL3JKEqTxj7Gn&#xA;82UiWUi/T9rsMmLRQkY3l2Nco/rQ93bJFetAjEoGAVjsaGh3p88shMmNlxNVp448xxxNxv47ou7t&#xA;tGtrqa3aS4ZoXaNiFShKkjb4vbKoTySiDUd/e5+q02iw5ZYzLKTCRjyj0Nd6G1G1itrhUiZmjeOO&#xA;VSwAakiB6GnzyzDMyFnvI+RcLtDTQw5BGBJiYxkL5+qIl+l+mvlP/lFdG/5gbb/kyuWuCmuKuxV2&#xA;KuxV2KvlP/nJP/lKfPf/AICelf8AdetsVeOeV/I99bPZ6lpHm+003zLJptzqlpp8a36XYt47WaWV&#xA;ROlubcM0EUm3q79O+Kp7pGsaprHkG8vdUupLy8/RWuRfWJmLvwSbTSq8jvQFjT54qkPk78v7uRvL&#xA;+o2Xmyy0bX9XjkvNFsil+LmkVxPbBhNBbyQoWe1elZB74qzv8kNd1jWvNnkK61a8lvrmPXdTiSad&#xA;i7hBpsTcQTvSrE4q+1cVdirzHyp5kPl7yhrF8ljNqU0vmzV7S3srdokkkludamijAaZ4ox8T9WYY&#xA;qkvnFfLXmbyn+Ymo6h5TOkea9D0q4M8139WluBJ+j3mtpFmtZJl+BQtPiqMVTrRPM0PlnRvPutzW&#xA;0t4lr5knUW0BQSO0y2sKKpkZEHxSDqRiqG1L/Dnm5vNQ17yc2meZNG0qKZpb82k8rQzpcm3KS2ss&#xA;4+BoH2LbVxV6H5UJbyto5JqTY2xJPUn0VxV45/zmJ/5L3QP/AAIrT/qGusrzfQfcXM7O/wAZx/14&#xA;/wC6D4z+oJO11cSXCW8Uc3p8nDtVn5EABFbspyvxeGgASa8v0uZ+RGU5Mkpxxxjk4dxI7niP8MZf&#xA;zSi4ZLsHULWeczrDApQ1JX++iAI5b9DlMhH0yAqz+guww5MwOfFknxiGMVzr+8x0RfkVK9sVuNU1&#xA;SV50t44bhwzOHO7yNSgRWPbJ48nDCAAsmP6HH1uiGbVaicpxxxhllueI85S/mgnoqobyKSe0luTc&#xA;QizLx0LcOJiDJQMARQHwyJ4SBICjxfp3ciBzY5TwzyeJDwCRzqjAGNA0dhXTZ+kflP8A5RXRv+YG&#xA;2/5Mrma8umuKuxV2KuxV2Kvlr/nICyfUvzA836TBNbRX2oeVdNjs0u7m3s0kePWYZ3US3LxR1EcT&#xA;NQt2xV5nYWn5o2OnxWkNr5X9WCyl06LUG1HQWu1t54nhdRObvnvHKy18DiqtoPl+7sPLL+W7q701&#xA;NXu9O1kQRDU9PeImaXT/AE1a4SdoEZ/RegZwdsVUtEtvzS0ex021trbyvLJpEUkOnXtxqOgy3MUc&#xA;s0s7BZmu+QpJcOR4VxVPvyX0G90Hzn5C07UJbNrx9b1K4ENne2d8RE2nRorMbSWcLVkYDkR0xV9p&#xA;Yq7FXidlq/lNdF1zy35k/TVjcL5l1S/ilsNO1Uuv+5WW5tpYrm2tpU3HFgVbFUPrGseRLHyL51sN&#xA;Fl8w6nrPmPTbqHnf6brM0ss5s3t4E9WW0UKNwvxGgxVGtqflRIfO3lnzTHq0Eepa7NdI1lp2pSlo&#xA;gtu8UkVxa28yf3kPZu2KtW+u/l5pGneY5dPuvMmparrdiLWSXUdN1u4dvQjmECK8loOI5XDd++Kv&#xA;VfK8ckXlnSI5FKSJZW6ujAhlYRKCCD0IxV43/wA5isq/l3oLMQFHmG0JJ2AAtrrK8o9B9xcvQSA1&#xA;GMnlxx+8Pj5bfUoWuEjW0lhmk9TjJLbsKjkFIq/gxzFM4GieIEDul+p3sdPqcZnGIwyhOfF6p4jy&#xA;ujvPuJbjhuY/r9zdtCpmiCgRyxNVvWjNAqMx6LiZRPDGN7HuPce9OPDlh42XMcY44AemcDv4mM0B&#xA;GR6AqlxDfpqF+8AtZYLqZnAklt2BHMlTRn265GEoGEQeIGI7pfqbtRh1EdRmlj8GePLkJ9U8RscR&#xA;INGfmp+leepc3V2YEH1V4lEcsJ6JxRVVGJ6DJcUaEY39V8j3+5p8LNxZMuY4x+5lH0zx/wA3hiBG&#xA;Mi/SLyn/AMoro3/MDbf8mVzOeWTXFXYq7FXYq7FXxV/zl2LE/m4Bdnip0i14EVrX1pa0oG3p47ZV&#xA;l4tuFz9CMB4hmNCtufeOWx3rvoeYeFx/U24K3wkqisem/P4jU/5OJ4h+PJcfgyoHbaI+PFv/ALFb&#xA;dLaJdUt25QilTUkdd6EhT+GGBkY782GqjhjlrGbh+PIfciHTRjdvR2EBUleJbY8+gqlfseIG/fKw&#xA;cnD5/jz73MnHRHKdzwV0vnxdPTf094A4utPQf+cdFtB+cvk8xMxnM8/rg9B/o0vHjt4dctjxWb5d&#xA;HBzDD4cDAnxN+Lu8q/S/QLJuK7FWLWK+dGOoQ3S8Yk1CJ7CUmMM1sb9nlFVd6oLTgByCtWop0OY8&#xA;fE3vv+y/1O4zHSDgMefhniG/1eGAOg3475WORttrnzjFqtlaxQCS1kmuZLuVlVlWE3v7oGQyLxP1&#xA;ViVVVY8qVAFcbmCB7/v/AFIENLLHKRNSAiAPPg32r+fzJrbzRmuf4mXWtKfSlD2HxpqStwKgNNb0&#xA;Y8njbaFZuJUN8VKihyWTj4hw8uv2ftadJ+XOLIMn17cPP+bPyP8AFw3dbdUHPc+f/q+r+ha2/wBY&#xA;jlUaOJAvB09dwxcrLXj6Hpmp4ty5bEUyJOSjQ9349zdCGi4sfFKXCR665j0jl6efFxd4qt+bJYS5&#xA;hQyAiQqOYNKg036Ej7jl4dVKrNcnhn/OYT2ifl95fe8HKzXzHZm5WhNYxbXXMUG/2cLF8zRWv5W3&#xA;Go3FnHcpFbtFczR3EjTLCJEgWWJBK8KzcC8bLT0+ZJKrWq1VW3EX5QvHAkVxKphe6jRmM4Mg9W5a&#xA;2a5KwH93xMALRjmRUcF6hVAX1j+WH13Tjp2o3BtBJP8ApIXQkVmT1ALXh6UL8QY2Bl6kEPxB+Dkq&#xA;mP6G/K270rVJ7G7eGextXkQ3VyqGWdjdmNLaJo0kkoY7UdPss5bi3EBV99eU/wDlFdG/5gbb/kyu&#xA;KprirsVdirsVdirzP8xf+ce/Ifn/AMwLruuyXy3qwJbAW0yRpwjZmX4Wjc1q574qxb/oTb8o/wDf&#xA;2q/9JMX/AFRxV3/Qm35R/wC/tV/6SYv+qOKu/wChNvyj/wB/ar/0kxf9UcVTryb/AM4xflv5R8zW&#xA;PmLSpdRbUNPZngE88bx1dGjPJREpOznvir1vFXYq7FXYq7FXYq7FWJ/mT+Wnl38w9Cg0XX2uEs7e&#xA;6S9jNq6xv6qRyRCpZX+HjM3bFXm3/Qm35R/7+1X/AKSYv+qOKu/6E2/KP/f2q/8ASTF/1RxV3/Qm&#xA;35R/7+1X/pJi/wCqOKu/6E2/KP8A39qv/STF/wBUcVe3WFlDY2NtZQ1MNrEkMXI1bjGoVanbegxV&#xA;XxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVI7bzpo&#xA;lzbxXNvHfyQToskUi6bqBDI45Kw/cdCDiqp/ivS/98ah/wBwzUP+qGKu/wAV6X/vjUP+4ZqH/VDF&#xA;Xf4r0v8A3xqH/cM1D/qhirv8V6X/AL41D/uGah/1QxV3+K9L/wB8ah/3DNQ/6oYq7/Fel/741D/u&#xA;Gah/1QxV3+K9L/3xqH/cM1D/AKoYq7/Fel/741D/ALhmof8AVDFXf4r0v/fGof8AcM1D/qhirv8A&#xA;Fel/741D/uGah/1QxV3+K9L/AN8ah/3DNQ/6oYq7/Fel/wC+NQ/7hmof9UMVd/ivS/8AfGof9wzU&#xA;P+qGKu/xXpf++NQ/7hmof9UMVd/ivS/98ah/3DNQ/wCqGKu/xXpf++NQ/wC4ZqH/AFQxV3+K9L/3&#xA;xqH/AHDNQ/6oYq7/ABXpf++NQ/7hmof9UMVd/ivS/wDfGof9wzUP+qGKu/xXpf8AvjUP+4ZqH/VD&#xA;FXf4r0v/AHxqH/cM1D/qhiqK/TmmfoL9O+q36L+q/XvW9OTl9X9P1eXpcfUrw348eXalcVQvk3/l&#xA;END/AO2fa/8AJhcVTjFXYqw26/OX8qrS6mtbnzVpsNzbu0U0T3CBkdCVZSK9QRTFVL/ld/5Q/wDU&#xA;3aX/ANJKf1xVER/m9+V8thPqEfmjTmsrWSKG4uBOnBJJw5iVjXYuInp8jiqH/wCV3/lD/wBTdpf/&#xA;AEkp/XFXf8rv/KH/AKm7S/8ApJT+uKt/mJ+bnlXyNoljqd96t82qnjpVnZKsktx8IcunIqvBVYEs&#xA;T3GRlIRFnk24cM8sxCAMpHkAt/LD83fLX5h216dMiubK/wBNZFvtOvEVJkEoJjccGdWRuJoQe246&#xA;VYzEhY3Cc+nyYZmGQGMh0LOMk0uxV2KuxV2KuxV2KuxV2KuxV2KuxVh3/lH/APwXv+xLFU58m/8A&#xA;KIaH/wBs+1/5MLiqcYqlU3m3yrBNJBPrNjFNExSWJ7mFWVlNGVlLVBB6jFXwto3lzyvr/nb8wr/W&#xA;re91Gx0k3V/b22lSIk0zPqSQDizJMCvGctsMVRlx5A8iav5C80ax5f0DzDp2r6Elk9tHqEqTJN9a&#xA;u0gcBI7eJjxQsdjirENE/wDJS+bP+2vof/JnU8VZbN5P/LTSdH8vvqHl7zHq17qmlW2o3Fzp9xEt&#xA;uHuA1UUG2kIpx/mxVi35r+T9N8t61Y/oe1vbbSdR02yv4VvyHlR7uBZniaRUiUtGWoaDFX1P+bn5&#xA;cXXmf8qvLXmHT7uO21LylpRvI45wximt3s42uIzx3DEQLxP0d6ivNiGSJierm9n6+ekzRzQrij38&#xA;t9kX/wA41flpeaFo7+c9Uu4rjUPNVnZz21vbhhHb2jR+siEtQtI3qDn2FNicGHCMceEMu0+0cmsz&#xA;HLkqz3chT2a3u7W4aZYJVka3kMM4U14SBQ3FvA8WB+nLAQXDnjlGrFcQseYa+u2lLg+qtLQ8bo1/&#xA;uyEWSjeHwOrfI42E+FLbb6uXnvX3ilVGV1DqaqwBUjuDhYEVs3ihSS7tZLmW1SVWuYFR5ogfiRZK&#xA;8Cw7cuBp8sFi6ZnHIREiPSbo+7n96rhYOxV2KuxV2KuxV2KsO/8AKP8A/gvf9iWKpz5N/wCUQ0P/&#xA;ALZ9r/yYXFUN5+88aN5I8rXfmLVubW1txVIIgGlllkYLHFGCRuzH6BvikAk0Ob53/Ja8/LTzb5x1&#xA;zSfN/lKD/EHmHUtQ1rS7i8SK4DQzP6zWvqDfnEvJum4r071Ys0Mn0m3O13Zmo0hAzR4OLccv0fc8&#xA;18la5oXlnzx+YNjJ5gbycLtLqw0nVIIbiUwPHqUcgREtVZ1HpRMvYZa4DNvJH5haJonmrT9V1n87&#xA;7vWdMtXZrnTJLHWOEylGUKeaOuzEHcdsVeN6J/5KXzZ/219D/wCTOp4q9Lh876RdeXfLcNh+bt15&#xA;T/R+kWtld6PDaao6rcQhvUblAojYmoFR4dcVSD82fN+jal5B0XRYvOsvnbV7TUrq6nvZre8gaOCW&#xA;GNI463aioDIx2PfFX0r5Y/5x1/Ji88taTd3PlmKS4ubK3lmkM90OTvErMaCUDcnFXq+l6ZY6Vplp&#xA;pdhEILCwhjtrSAEsEhhQJGgLEseKqBucVY/pnkaOy84XnmP6yjNdtK/pLCEl/exwx8JJ+RMka+hy&#xA;VeIozE5RHDUzJ3GftY5NLHBw/TX8VjYyNiNbE8VE3yCavoStBrcXrEfplmdjx/u+VrFa7b/FtDy+&#xA;nLDDn5/qpwxqyDiNf3X2+uU/00lXnHybJr+kabpaSW6xWk3Kd7qH11KfU57eqxVUFw0ystWHEiu9&#xA;KGvLi4gB+OTmdmdpjTZZ5CJXIbcJ4d+OMufdUSDtvy82S2sHoW0UHNpPSRU9SQ1duIpyY9ye+XAU&#xA;HVZJ8Uiaqyxy68kR3HnSLzMbhFaMQj0/QBmHopMnFLjn8CP9Y+NeG/Eb5UcNz4naY+1THSHT0d7/&#xA;AIttzE7xrcjh2N7WV975NjuvN9r5j+sBXtgn7v0gZf3cc0fBJ+QKRP8AWKunE8io3xOK58THF2mY&#xA;aWWCvqvrtuYmzHrIcOxvYEr38ohvOqeaPrIDrb/VTZ+kvErRv3hetfVq1A3ZKrTeuHwvXxMR2lWk&#xA;/L8P8XFxX9lfzfL+dv0pPYkuBLM0kgeJiDCgXiUAUAgtU8qtU9B4ZYHXyMaFDfr5/qS/zLoa63pD&#xA;6e0ixhpIZf3kYmib0ZVl4SxErzjfhxZaioyOSHEKcnQ6v8vlE6vYjnR3BFg9CLsHvQY8m2b+U7Py&#xA;3cyfWbW2NqZDKgZZVtZ45zGYz8PB/T4cdwF23yPhDgET5N/8pzGplqIjhlLi5HlxRMbvvF3fUpb5&#xA;68nalr+q6NcWn1b0LR6XTXNWaJBcW8/qWyhTSUi3ZOXIbGneqwzYjIivxycrsntPHpseSMuK5Dbh&#xA;6+mcalv9Pquu8X0ozLMh0TDv/KP/APgvf9iWKpz5N/5RDQ/+2fa/8mFxVLfzO8gWXn3yfd+Xbm4e&#xA;zeVkmtL2McmhnhblG/Ekch2YV3B6g74CLFMoTMZCQ2IedflP/wA48al5V83w+aPMWsw6ld6fHLFp&#xA;dvawmKNGnT05JpGY1LGNivECm/XKcGnhivh6uz7T7Z1GtMfFI9PKhXvPxZFf/wDONX5J6hf3N/d+&#xA;XPVu7uV57iT67frykkYu7UWcKKsewy91SH/6Fc/In/qWf+n7UP8AsoxVGwf846fk3BpN3pEXl7jp&#xA;19NBcXUH1y+POW1WVYW5GfkOIuJNgaGu/QYqgv8AoVz8if8AqWf+n7UP+yjFXf8AQrn5E/8AUs/9&#xA;P2of9lGKvT7Kzt7Kzgs7ZPTtraNIYI6luKRqFUVYkmgHfFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FWHf8AlH//AAXv+xLFU2g8m6LbwR28D30UEKrHFGmo34VUUUVQBPsABiq//Cml/wC/9Q/7iWof&#xA;9V8Vd/hTS/8Af+of9xLUP+q+Ku/wppf+/wDUP+4lqH/VfFXf4U0v/f8AqH/cS1D/AKr4q7/Cml/7&#xA;/wBQ/wC4lqH/AFXxV3+FNL/3/qH/AHEtQ/6r4q7/AAppf+/9Q/7iWof9V8Vd/hTS/wDf+of9xLUP&#xA;+q+Ku/wppf8Av/UP+4lqH/VfFXf4U0v/AH/qH/cS1D/qvirv8KaX/v8A1D/uJah/1XxV3+FNL/3/&#xA;AKh/3EtQ/wCq+Ku/wppf+/8AUP8AuJah/wBV8Vd/hTS/9/6h/wBxLUP+q+Ku/wAKaX/v/UP+4lqH&#xA;/VfFXf4U0v8A3/qH/cS1D/qvirv8KaX/AL/1D/uJah/1XxV3+FNL/wB/6h/3EtQ/6r4q7/Cml/7/&#xA;ANQ/7iWof9V8Vd/hTS/9/wCof9xLUP8Aqvirv8KaX/v/AFD/ALiWof8AVfFUX+hdN/Qv6E9I/oz6&#xA;t9S9Dm9fQ9P0uHqcvU+xty5V98VRuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2Kvm+6/5zX8r29zLAfLd8xidkLCaGhKmmKqf/AEO95W/6lq+/5HQ4q7/od7yt/wBS1ff8&#xA;jocVd/0O95W/6lq+/wCR0OKu/wCh3vK3/UtX3/I6HFXf9DveVv8AqWr7/kdDirv+h3vK3/UtX3/I&#xA;6HFXf9DveVv+pavv+R0OKu/6He8rf9S1ff8AI6HFXf8AQ73lb/qWr7/kdDirv+h3vK3/AFLV9/yO&#xA;hxV3/Q73lb/qWr7/AJHQ4q7/AKHe8rf9S1ff8jocVd/0O95W/wCpavv+R0OKu/6He8rf9S1ff8jo&#xA;cVd/0O95W/6lq+/5HQ4q7/od7yt/1LV9/wAjocVd/wBDveVv+pavv+R0OKu/6He8rf8AUtX3/I6H&#xA;FXf9DveVv+pavv8AkdDirv8Aod7yt/1LV9/yOhxV3/Q73lb/AKlq+/5HQ4q9v/xxa/8AKtv8dfVp&#xA;Pqn6G/Tn1PkPU9P6r9a9Ll9nlx+GuKvzb1b/AI6t5/xnk/4mcVQmKuxV7Ro//OJn5qatpFjqto+m&#xA;/VdQt4rqDncOG9OZBIvIekaGjb4qi/8AoTj83v59L/6SX/6pYqlt3/ziz+Z1r5g07QpX0769qkF1&#xA;c2xFw5ThZmES8m9PY/6SlNvHFUy/6E4/N7+fS/8ApJf/AKpYq7/oTj83v59L/wCkl/8AqlirGPyw&#xA;/KjTtfl8xaj5ovZrHy75V9NNTaxVXuZp5pTFHFBzHAcmU/EwoNvGohkyCETI8g5eg0WTVZo4cf1S&#xA;7/n9zX5sfln5e8uaXo/mTyrqFze+XdZaaBIb9Y1vLe4t6c0lMVI25BqgqMjhyxyR4gz7R7OyaPMc&#xA;WSuId3I+55plrguxV2KuxV2KuxV2KuxV2KuxV2KuxV9//wDrrH/gjf8AdoxV8F6t/wAdW8/4zyf8&#xA;TOKoTFXqmmf84x/nJqem2mpWWjxSWd9DHc20hu7VS0UqB0PFpARVW6HFX0f+Zd5ceVfJX5baZrGs&#xA;3/lyzSS3sdeutKkkE6rDpzgopgWZnHqoOinFWIR/mp5F8u+fvK1/p3n/AMw6t5bVr7/Eg1X9ITQx&#xA;qbVltD6TW0Ras7dg1CAdsVe0+Yf/ACb3kz/tl67/AMT07FXjp85eUG8z+bYfN/5g+ZtGvrXXb63s&#xA;7DTZL026WcbgRcfRtrhBvyFOX0Yqzv8A5x88/wCla3Z6zoK65eazqGn6heTWkuorcG4bSzPws5Xk&#xA;mjjB5J+zsR/KMVeQ/lt+X350eWvzBv4rjyr9a8oeZb9LfXorswvCbQ3RYXICyhg8KuzId/lkZREh&#xA;R5NuDPPFMTgTGQ5EPNvz588X+r+bLvyrFbQad5e8pX17YaXp9qpVSY52jeeQsSzSScBXsO3UksIC&#xA;IocmWo1OTPMzyEymepecS2VxFbx3DL+6lAKsN+pYCv8AwJwRyAkjqGeXRZIY45CPRIc/iR/vSs+r&#xA;yVhG378VT/gim/0rh4hv5NfgS9P9Pl/pjH7w3DaXE8jRwoXddyB8wvf3IGCUxEWWWHS5MsjGA4iP&#xA;1195AUiCDQ7EdRk2gilb6lcG1F0FrDVgSOo48akjw+IZDxBxcPVyfyeTwvFA9G/2V/xQWrbTtC04&#xA;QmJftP27D/jYYTMXXVhHTZDAzA9A6/L9Y+Yd9Xn9D1+B9GvH1O3Lw+ePGLrqj8vPw/Er0XV9L7ve&#xA;pZJpXxRSSuEjXk5qaDwAqT9AGCUgBZbMWKWSXDEWfwVy2tw05gCH1l5ckOxHEEtWvgBgMxV9GcdN&#xA;kOTw69Yvb3bn5OhtbiZXaJC6p9ojtsT+pScZTA5rh0uTICYCxHn9p+4E/AqWSaH3/wD+usf+CN/3&#xA;aMVfBerf8dW8/wCM8n/EzirKfyi8h2vnfzrb6NfXTWemRxTXmozxAGUW9shd1iBr8bfZGxp1oaUw&#xA;E0LZ44GchEcyaeq/nPo/lXzn5FbzjoBvLKfyNaafo01ld+m6S6e8zRW0ism/qh5Dz7U+84+m1Uct&#xA;10dz212Fl7PMOMxlx3y8qv73uM3k7zP5g/L78t73y1fWljqmg21lexPfRvLC3LTvQKlYyD/u3xzJ&#xA;dGgPOX5efnx5u8s33lzVvMPl8afqCos5gtLlJKJIsg4sXanxIO2Ksy8w/wDk3vJn/bL13/ienYqx&#xA;y18ifnLoeq68/lnXNEh0vWNVutVSG9tbiWZGuiPhLIyrsFGKpl5E8iee7Dz3qfm7zdqen311fafD&#xA;p0cenQywqqwymQEiQt/Me+Kvg3zLqF+PMeqgXMoAvLj9tv8Afre+KpMzMzFmJZmNWY7kk9ziqu99&#xA;cPbLbkr6aAAUUBqAkgFqVO7HKxjAlfVy563JLEMZrhHkL2JPPnzJ/ACn68lYjXeEUj26fEW/Wclw&#xA;jfzafHl6f6HL5mX3lUtr2W3eR0ClpF41YBgKOr1oduq5GeMSoHo3abWSwmUgBchW4v8AiEuvmFBm&#xA;ZmLMasTUn3OWAOLKRJs8yrLezrbG2BX0jX9kcvioTRqV34jIHGOLi6uTHWZBi8IVw79Be9Xvz/hD&#xA;lvJ1t2t1I9Nq1+EcqEgkcqVpVRicYJtEdXOOM4xXCfIX068+g/FtC6mFsbao9EnkVoPteNete2PA&#xA;OLi6oGqn4XhfwXfx7/0e5TLEhRQfDtUCh613yVNJlYA7l0E8kMnOOnKhU1AIIYUIIPscEogiizw5&#xA;pY5cUee47+Yo/Yua6nad5y37yQMGNABRwVIA6DY4BAVXRnLVTOQ5CfVK7/zhR+w/BVs9Qe1hmjCK&#xA;/qjYtT4TxZKjbwc5HJi4iD3fj9DkaPtA4ITiADxd/TaUb+UihMtde+//AP11j/wRv+7Rir4L1b/j&#xA;q3n/ABnk/wCJnFUd5Q82675R8w2mv6HP9X1GzYmNiOSsrAq6Op+0rKSCMVZZ58/PHzN5v0JdAOna&#xA;ZoWjtMtzd2ej25tluJ1FFearyFuPUD5VrQUjGAjyFN+fU5cxBySlMj+cSfvYXH5i8wRoscep3aRo&#xA;AqIs8gAA2AADdMk0N/4m8yf9XW8/6SJf+asVWt5g15pUmbUroyxhljkM8hZQ1OQB5VFeIriq7/E3&#xA;mT/q63n/AEkS/wDNWKu/xN5k/wCrref9JEv/ADViqXMzMxZiWZjVmO5JPc4q1irsVdirsVdirsVd&#xA;irsVdirsVdirsVdir7//APXWP/BG/wC7Rir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:05E1C88D68A4DE11B4DAA5BA2C0E1D4C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:06E1C88D68A4DE11B4DAA5BA2C0E1D4C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a2b8dcac-7818-4055-b6a1-3efa106255e8</stRef:instanceID>
            <stRef:documentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.700002</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>193</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>45</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>237</xapG:red>
                           <xapG:green>28</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>241</xapG:red>
                           <xapG:green>90</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>247</xapG:red>
                           <xapG:green>147</xapG:green>
                           <xapG:blue>30</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>251</xapG:red>
                           <xapG:green>176</xapG:green>
                           <xapG:blue>59</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>252</xapG:red>
                           <xapG:green>238</xapG:green>
                           <xapG:blue>33</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>217</xapG:red>
                           <xapG:green>224</xapG:green>
                           <xapG:blue>33</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>140</xapG:red>
                           <xapG:green>198</xapG:green>
                           <xapG:blue>63</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>57</xapG:red>
                           <xapG:green>181</xapG:green>
                           <xapG:blue>74</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>146</xapG:green>
                           <xapG:blue>69</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>104</xapG:green>
                           <xapG:blue>55</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>34</xapG:red>
                           <xapG:green>181</xapG:green>
                           <xapG:blue>115</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>169</xapG:green>
                           <xapG:blue>157</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>41</xapG:red>
                           <xapG:green>171</xapG:green>
                           <xapG:blue>226</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>113</xapG:green>
                           <xapG:blue>188</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>46</xapG:red>
                           <xapG:green>49</xapG:green>
                           <xapG:blue>146</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>27</xapG:red>
                           <xapG:green>20</xapG:green>
                           <xapG:blue>100</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>102</xapG:red>
                           <xapG:green>45</xapG:green>
                           <xapG:blue>145</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>143</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>158</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>93</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>212</xapG:red>
                           <xapG:green>20</xapG:green>
                           <xapG:blue>90</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>237</xapG:red>
                           <xapG:green>30</xapG:green>
                           <xapG:blue>121</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>199</xapG:red>
                           <xapG:green>178</xapG:green>
                           <xapG:blue>153</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>153</xapG:red>
                           <xapG:green>134</xapG:green>
                           <xapG:blue>117</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>115</xapG:red>
                           <xapG:green>99</xapG:green>
                           <xapG:blue>87</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>83</xapG:red>
                           <xapG:green>71</xapG:green>
                           <xapG:blue>65</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>198</xapG:red>
                           <xapG:green>156</xapG:green>
                           <xapG:blue>109</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>166</xapG:red>
                           <xapG:green>124</xapG:green>
                           <xapG:blue>82</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>140</xapG:red>
                           <xapG:green>98</xapG:green>
                           <xapG:blue>57</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>117</xapG:red>
                           <xapG:green>76</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>96</xapG:red>
                           <xapG:green>56</xapG:green>
                           <xapG:blue>19</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>66</xapG:red>
                           <xapG:green>33</xapG:green>
                           <xapG:blue>11</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=241  B=242</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -411.279 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 411.279 li
284.465 411.279 li
284.465 0 li
cp
clp
[1 0 0 1 0 0 ]ct
188.691 56.6934 mo
73.561 56.6934 li
73.561 0 li
188.691 0 li
188.691 56.6934 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
103.296 46.1904 mo
103.228 45.9414 103.123 45.7197 102.982 45.5254 cv
102.842 45.3301 102.662 45.1758 102.442 45.0605 cv
102.222 44.9453 101.964 44.8877 101.669 44.8877 cv
101.359 44.8877 101.096 44.9482 100.879 45.0713 cv
100.664 45.1934 100.487 45.3535 100.35 45.5518 cv
100.213 45.751 100.114 45.9756 100.053 46.2275 cv
99.9912 46.4805 99.9604 46.7363 99.9604 46.9951 cv
99.9604 47.2695 99.9932 47.5342 100.058 47.79 cv
100.123 48.0459 100.226 48.2715 100.366 48.4658 cv
100.507 48.6602 100.688 48.8174 100.912 48.9365 cv
101.135 49.0557 101.406 49.1143 101.723 49.1143 cv
102.04 49.1143 102.305 49.0537 102.518 48.9307 cv
102.73 48.8086 102.901 48.6465 103.031 48.4443 cv
103.161 48.2432 103.254 48.0117 103.313 47.752 cv
103.37 47.4932 103.399 47.2266 103.399 46.9521 cv
103.399 46.6924 103.365 46.4385 103.296 46.1904 cv
cp
99.9932 42.0762 mo
99.9932 44.9629 li
100.015 44.9629 li
100.166 44.6533 100.404 44.4277 100.728 44.2871 cv
101.053 44.1465 101.409 44.0762 101.799 44.0762 cv
102.231 44.0762 102.608 44.1553 102.929 44.3145 cv
103.249 44.4727 103.516 44.6875 103.729 44.957 cv
103.941 45.2275 104.102 45.54 104.21 45.8926 cv
104.318 46.2461 104.372 46.6211 104.372 47.0176 cv
104.372 47.4141 104.319 47.7881 104.215 48.1416 cv
104.11 48.4951 103.952 48.8027 103.739 49.0664 cv
103.527 49.3291 103.26 49.5361 102.939 49.6875 cv
102.619 49.8389 102.246 49.915 101.82 49.915 cv
101.683 49.915 101.53 49.9004 101.361 49.8721 cv
101.191 49.8428 101.024 49.7959 100.858 49.7314 cv
100.692 49.666 100.535 49.5781 100.388 49.4658 cv
100.24 49.3545 100.116 49.2158 100.015 49.0498 cv
99.9932 49.0498 li
99.9932 49.7959 li
99.0742 49.7959 li
99.0742 42.0762 li
99.9932 42.0762 li
cp
0 0.992157 1 0 cmyk
f
106.967 42.0762 mo
106.967 49.7959 li
106.048 49.7959 li
106.048 42.0762 li
106.967 42.0762 li
cp
f
109.907 44.2061 mo
109.907 49.7959 li
108.988 49.7959 li
108.988 44.2061 li
109.907 44.2061 li
cp
108.988 43.2002 mo
108.988 42.0762 li
109.907 42.0762 li
109.907 43.2002 li
108.988 43.2002 li
cp
f
116.129 46.1904 mo
116.061 45.9414 115.957 45.7197 115.816 45.5254 cv
115.675 45.3301 115.495 45.1758 115.275 45.0605 cv
115.056 44.9453 114.798 44.8877 114.502 44.8877 cv
114.192 44.8877 113.929 44.9482 113.713 45.0713 cv
113.497 45.1934 113.32 45.3535 113.183 45.5518 cv
113.046 45.751 112.947 45.9756 112.886 46.2275 cv
112.825 46.4805 112.794 46.7363 112.794 46.9951 cv
112.794 47.2695 112.827 47.5342 112.892 47.79 cv
112.956 48.0459 113.059 48.2715 113.2 48.4658 cv
113.34 48.6602 113.522 48.8174 113.746 48.9365 cv
113.969 49.0557 114.239 49.1143 114.557 49.1143 cv
114.874 49.1143 115.139 49.0537 115.351 48.9307 cv
115.563 48.8086 115.735 48.6465 115.865 48.4443 cv
115.995 48.2432 116.088 48.0117 116.146 47.752 cv
116.204 47.4932 116.232 47.2266 116.232 46.9521 cv
116.232 46.6924 116.198 46.4385 116.129 46.1904 cv
cp
112.827 44.2061 mo
112.827 44.9629 li
112.848 44.9629 li
113 44.6533 113.237 44.4277 113.562 44.2871 cv
113.886 44.1465 114.243 44.0762 114.632 44.0762 cv
115.064 44.0762 115.441 44.1553 115.762 44.3145 cv
116.083 44.4727 116.35 44.6875 116.562 44.957 cv
116.774 45.2275 116.935 45.54 117.043 45.8926 cv
117.151 46.2461 117.206 46.6211 117.206 47.0176 cv
117.206 47.4141 117.153 47.7881 117.049 48.1416 cv
116.944 48.4951 116.786 48.8027 116.573 49.0664 cv
116.36 49.3291 116.093 49.5361 115.773 49.6875 cv
115.452 49.8389 115.079 49.915 114.654 49.915 cv
114.517 49.915 114.364 49.9004 114.194 49.8721 cv
114.025 49.8428 113.857 49.7959 113.691 49.7314 cv
113.525 49.666 113.369 49.5781 113.221 49.4658 cv
113.073 49.3545 112.949 49.2158 112.848 49.0498 cv
112.827 49.0498 li
112.827 51.9258 li
111.908 51.9258 li
111.908 44.2061 li
112.827 44.2061 li
cp
f
126.627 46.1904 mo
126.559 45.9414 126.455 45.7197 126.314 45.5254 cv
126.173 45.3301 125.993 45.1758 125.773 45.0605 cv
125.554 44.9453 125.296 44.8877 125 44.8877 cv
124.69 44.8877 124.427 44.9482 124.211 45.0713 cv
123.995 45.1934 123.818 45.3535 123.681 45.5518 cv
123.544 45.751 123.445 45.9756 123.384 46.2275 cv
123.323 46.4805 123.292 46.7363 123.292 46.9951 cv
123.292 47.2695 123.325 47.5342 123.39 47.79 cv
123.454 48.0459 123.557 48.2715 123.698 48.4658 cv
123.838 48.6602 124.02 48.8174 124.244 48.9365 cv
124.467 49.0557 124.737 49.1143 125.055 49.1143 cv
125.372 49.1143 125.637 49.0537 125.849 48.9307 cv
126.062 48.8086 126.233 48.6465 126.363 48.4443 cv
126.493 48.2432 126.586 48.0117 126.644 47.752 cv
126.702 47.4932 126.73 47.2266 126.73 46.9521 cv
126.73 46.6924 126.696 46.4385 126.627 46.1904 cv
cp
123.325 42.0762 mo
123.325 44.9629 li
123.346 44.9629 li
123.498 44.6533 123.735 44.4277 124.06 44.2871 cv
124.384 44.1465 124.741 44.0762 125.13 44.0762 cv
125.563 44.0762 125.939 44.1553 126.26 44.3145 cv
126.581 44.4727 126.848 44.6875 127.061 44.957 cv
127.272 45.2275 127.434 45.54 127.541 45.8926 cv
127.649 46.2461 127.703 46.6211 127.703 47.0176 cv
127.703 47.4141 127.65 47.7881 127.547 48.1416 cv
127.441 48.4951 127.283 48.8027 127.07 49.0664 cv
126.858 49.3291 126.591 49.5361 126.271 49.6875 cv
125.95 49.8389 125.577 49.915 125.152 49.915 cv
125.015 49.915 124.862 49.9004 124.692 49.8721 cv
124.523 49.8428 124.355 49.7959 124.189 49.7314 cv
124.023 49.666 123.867 49.5781 123.719 49.4658 cv
123.571 49.3545 123.447 49.2158 123.346 49.0498 cv
123.325 49.0498 li
123.325 49.7959 li
122.406 49.7959 li
122.406 42.0762 li
123.325 42.0762 li
cp
f
130.131 47.9092 mo
130.222 48.1729 130.346 48.3926 130.504 48.5684 cv
130.663 48.7451 130.849 48.8809 131.062 48.9746 cv
131.273 49.0684 131.499 49.1143 131.737 49.1143 cv
131.975 49.1143 132.2 49.0684 132.413 48.9746 cv
132.625 48.8809 132.811 48.7451 132.97 48.5684 cv
133.128 48.3926 133.252 48.1729 133.343 47.9092 cv
133.433 47.6465 133.478 47.3457 133.478 47.0068 cv
133.478 46.668 133.433 46.3672 133.343 46.1035 cv
133.252 45.8408 133.128 45.6191 132.97 45.4385 cv
132.811 45.2588 132.625 45.1211 132.413 45.0273 cv
132.2 44.9346 131.975 44.8877 131.737 44.8877 cv
131.499 44.8877 131.273 44.9346 131.062 45.0273 cv
130.849 45.1211 130.663 45.2588 130.504 45.4385 cv
130.346 45.6191 130.222 45.8408 130.131 46.1035 cv
130.041 46.3672 129.996 46.668 129.996 47.0068 cv
129.996 47.3457 130.041 47.6465 130.131 47.9092 cv
cp
129.196 45.8545 mo
129.312 45.498 129.484 45.1885 129.715 44.9248 cv
129.945 44.6621 130.23 44.4551 130.569 44.3037 cv
130.908 44.1523 131.297 44.0762 131.737 44.0762 cv
132.184 44.0762 132.575 44.1523 132.91 44.3037 cv
133.245 44.4551 133.528 44.6621 133.759 44.9248 cv
133.989 45.1885 134.162 45.498 134.277 45.8545 cv
134.393 46.2119 134.45 46.5957 134.45 47.0068 cv
134.45 47.417 134.393 47.7998 134.277 48.1523 cv
134.162 48.5059 133.989 48.8135 133.759 49.0771 cv
133.528 49.3398 133.245 49.5459 132.91 49.6934 cv
132.575 49.8408 132.184 49.915 131.737 49.915 cv
131.297 49.915 130.908 49.8408 130.569 49.6934 cv
130.23 49.5459 129.945 49.3398 129.715 49.0771 cv
129.484 48.8135 129.312 48.5059 129.196 48.1523 cv
129.081 47.7998 129.023 47.417 129.023 47.0068 cv
129.023 46.5957 129.081 46.2119 129.196 45.8545 cv
cp
f
135.629 44.2061 mo
136.807 44.2061 li
138.147 46.1631 li
139.543 44.2061 li
140.646 44.2061 li
138.721 46.7793 li
140.883 49.7959 li
139.705 49.7959 li
138.147 47.4824 li
136.591 49.7959 li
135.478 49.7959 li
137.575 46.8555 li
135.629 44.2061 li
cp
f
143.619 48.5957 mo
143.619 49.7959 li
142.419 49.7959 li
142.419 48.5957 li
143.619 48.5957 li
cp
f
146.564 47.9092 mo
146.655 48.1729 146.779 48.3926 146.938 48.5684 cv
147.097 48.7451 147.282 48.8809 147.495 48.9746 cv
147.707 49.0684 147.933 49.1143 148.171 49.1143 cv
148.408 49.1143 148.634 49.0684 148.847 48.9746 cv
149.059 48.8809 149.244 48.7451 149.403 48.5684 cv
149.562 48.3926 149.686 48.1729 149.776 47.9092 cv
149.866 47.6465 149.911 47.3457 149.911 47.0068 cv
149.911 46.668 149.866 46.3672 149.776 46.1035 cv
149.686 45.8408 149.562 45.6191 149.403 45.4385 cv
149.244 45.2588 149.059 45.1211 148.847 45.0273 cv
148.634 44.9346 148.408 44.8877 148.171 44.8877 cv
147.933 44.8877 147.707 44.9346 147.495 45.0273 cv
147.282 45.1211 147.097 45.2588 146.938 45.4385 cv
146.779 45.6191 146.655 45.8408 146.564 46.1035 cv
146.475 46.3672 146.43 46.668 146.43 47.0068 cv
146.43 47.3457 146.475 47.6465 146.564 47.9092 cv
cp
145.63 45.8545 mo
145.745 45.498 145.918 45.1885 146.148 44.9248 cv
146.379 44.6621 146.664 44.4551 147.003 44.3037 cv
147.342 44.1523 147.73 44.0762 148.171 44.0762 cv
148.617 44.0762 149.009 44.1523 149.344 44.3037 cv
149.679 44.4551 149.962 44.6621 150.192 44.9248 cv
150.423 45.1885 150.596 45.498 150.711 45.8545 cv
150.826 46.2119 150.884 46.5957 150.884 47.0068 cv
150.884 47.417 150.826 47.7998 150.711 48.1523 cv
150.596 48.5059 150.423 48.8135 150.192 49.0771 cv
149.962 49.3398 149.679 49.5459 149.344 49.6934 cv
149.009 49.8408 148.617 49.915 148.171 49.915 cv
147.73 49.915 147.342 49.8408 147.003 49.6934 cv
146.664 49.5459 146.379 49.3398 146.148 49.0771 cv
145.918 48.8135 145.745 48.5059 145.63 48.1523 cv
145.515 47.7998 145.457 47.417 145.457 47.0068 cv
145.457 46.5957 145.515 46.2119 145.63 45.8545 cv
cp
f
153.339 44.2061 mo
153.339 45.3848 li
153.36 45.3848 li
153.584 44.9307 153.858 44.5957 154.183 44.3789 cv
154.507 44.1631 154.918 44.0615 155.415 44.0762 cv
155.415 45.0498 li
155.047 45.0498 154.733 45.0996 154.475 45.2012 cv
154.215 45.3018 154.006 45.4492 153.847 45.6445 cv
153.688 45.8389 153.573 46.0752 153.501 46.3525 cv
153.429 46.6299 153.393 46.9492 153.393 47.3096 cv
153.393 49.7959 li
152.474 49.7959 li
152.474 44.2061 li
153.339 44.2061 li
cp
f
159.366 48.8604 mo
159.579 48.7344 159.75 48.5684 159.88 48.3633 cv
160.01 48.1582 160.105 47.9258 160.166 47.666 cv
160.228 47.4063 160.258 47.1465 160.258 46.8877 cv
160.258 46.6426 160.229 46.4014 160.172 46.1631 cv
160.114 45.9248 160.022 45.7109 159.896 45.5195 cv
159.77 45.3291 159.605 45.1758 159.404 45.0605 cv
159.202 44.9453 158.957 44.8877 158.669 44.8877 cv
158.373 44.8877 158.121 44.9434 157.912 45.0547 cv
157.703 45.167 157.532 45.3164 157.398 45.5039 cv
157.265 45.6914 157.168 45.9072 157.106 46.1523 cv
157.045 46.3975 157.015 46.6533 157.015 46.9199 cv
157.015 47.1719 157.04 47.4248 157.091 47.6768 cv
157.141 47.9287 157.228 48.1582 157.35 48.3633 cv
157.473 48.5684 157.635 48.7344 157.836 48.8604 cv
158.038 48.9873 158.29 49.0498 158.593 49.0498 cv
158.896 49.0498 159.153 48.9873 159.366 48.8604 cv
cp
160.539 51.374 mo
160.121 51.8281 159.465 52.0557 158.571 52.0557 cv
158.313 52.0557 158.047 52.0264 157.777 51.9688 cv
157.507 51.9111 157.262 51.8174 157.042 51.6885 cv
156.821 51.5586 156.64 51.3887 156.496 51.1797 cv
156.352 50.9707 156.272 50.7148 156.258 50.4121 cv
157.177 50.4121 li
157.184 50.5781 157.236 50.7188 157.334 50.834 cv
157.431 50.9492 157.55 51.043 157.69 51.1152 cv
157.831 51.1865 157.984 51.2393 158.15 51.2715 cv
158.315 51.3037 158.475 51.3203 158.626 51.3203 cv
158.929 51.3203 159.185 51.2676 159.394 51.1641 cv
159.603 51.0586 159.775 50.915 159.912 50.7314 cv
160.049 50.5469 160.148 50.3262 160.21 50.0664 cv
160.271 49.8066 160.302 49.5225 160.302 49.2119 cv
160.302 48.8447 li
160.28 48.8447 li
160.121 49.1904 159.882 49.4443 159.561 49.6064 cv
159.24 49.7686 158.899 49.8496 158.539 49.8496 cv
158.121 49.8496 157.757 49.7744 157.447 49.623 cv
157.137 49.4717 156.878 49.2676 156.669 49.0117 cv
156.46 48.7559 156.303 48.457 156.198 48.1143 cv
156.094 47.7725 156.042 47.4102 156.042 47.0283 cv
156.042 46.6963 156.085 46.3564 156.171 46.0059 cv
156.258 45.6572 156.402 45.3398 156.604 45.0547 cv
156.806 44.7705 157.072 44.5361 157.404 44.3516 cv
157.735 44.168 158.143 44.0762 158.626 44.0762 cv
158.979 44.0762 159.303 44.1543 159.599 44.3086 cv
159.895 44.4639 160.125 44.6963 160.291 45.0059 cv
160.302 45.0059 li
160.302 44.2061 li
161.166 44.2061 li
161.166 49.3203 li
161.166 50.2354 160.957 50.9199 160.539 51.374 cv
cp
f
107.684 25.1123 mo
119.906 25.1123 li
120.093 25.2993 li
120.093 29.5918 li
119.906 29.7783 li
107.684 29.7783 li
107.497 29.5918 li
107.497 25.2993 li
107.684 25.1123 li
cp
107.684 17.2744 mo
116.734 17.2744 li
116.92 17.4614 li
116.92 21.8472 li
116.734 22.0337 li
107.684 22.0337 li
107.497 21.8472 li
107.497 17.4614 li
107.684 17.2744 li
cp
104.51 14.1958 mo
104.51 32.8584 li
123.172 32.8584 li
123.172 22.0337 li
120.187 22.0337 li
120.062 22.0337 120 21.9395 120 21.7539 cv
120.093 14.1958 li
104.51 14.1958 li
cp
98.4453 8.03809 mo
129.145 8.03809 li
129.331 8.22412 li
129.331 38.9238 li
129.145 39.1113 li
98.4453 39.1113 li
98.2583 38.9238 li
98.2583 8.22412 li
98.4453 8.03809 li
cp
0 0 0 0 cmyk
f
141.119 25.1123 mo
153.343 25.1123 li
153.53 25.2993 li
153.53 29.5918 li
153.343 29.7783 li
141.119 29.7783 li
140.933 29.5918 li
140.933 25.2993 li
141.119 25.1123 li
cp
141.119 17.2744 mo
150.171 17.2744 li
150.357 17.4614 li
150.357 21.8472 li
150.171 22.0337 li
141.119 22.0337 li
140.933 21.8472 li
140.933 17.4614 li
141.119 17.2744 li
cp
137.945 14.1958 mo
137.945 32.8584 li
156.608 32.8584 li
156.608 22.0337 li
153.623 22.0337 li
153.499 22.0337 153.437 21.9395 153.437 21.7539 cv
153.53 14.1958 li
137.945 14.1958 li
cp
131.881 8.03809 mo
162.58 8.03809 li
162.767 8.22412 li
162.767 38.9238 li
162.58 39.1113 li
131.881 39.1113 li
131.694 38.9238 li
131.694 8.22412 li
131.881 8.03809 li
cp
f
85.5957 32.126 mo
85.5957 22.1563 li
101.137 22.1563 li
101.137 25.0879 li
88.5273 25.0879 li
88.5273 32.126 li
85.5957 32.126 li
85.5957 32.126 li
cp
f
81.3433 36.5244 mo
81.3433 33.5283 83.7729 31.0986 86.7686 31.0986 cv
89.7651 31.0986 92.1938 33.5283 92.1938 36.5244 cv
92.1938 39.5205 89.7651 41.9492 86.7686 41.9492 cv
83.7729 41.9492 81.3433 39.5205 81.3433 36.5244 cv
cp
0 0.992157 1 0 cmyk
f
82.8091 36.5244 mo
82.8135 38.709 84.5825 40.4775 86.7671 40.4824 cv
86.7671 40.4824 li
88.9541 40.4775 90.7231 38.709 90.7275 36.5244 cv
90.7275 36.5244 li
90.7231 34.3379 88.9541 32.5684 86.7671 32.5645 cv
86.7671 32.5645 li
84.5825 32.5684 82.8135 34.3398 82.8091 36.5244 cv
82.8091 36.5244 li
82.8091 36.5244 li
cp
79.8779 36.5244 mo
79.8779 32.7168 82.9614 29.6328 86.7671 29.6328 cv
86.7671 29.6328 li
90.5752 29.6328 93.6592 32.7188 93.6592 36.5244 cv
93.6592 36.5244 li
93.6592 40.3301 90.5752 43.4141 86.7671 43.4141 cv
86.7671 43.4141 li
82.9614 43.4141 79.8779 40.3301 79.8779 36.5244 cv
79.8779 36.5244 li
cp
0 0 0 0 cmyk
f
161.112 25.6724 mo
161.112 22.7417 li
173.724 22.7417 li
173.724 15.7007 li
176.655 15.7007 li
176.655 25.6724 li
161.112 25.6724 li
161.112 25.6724 li
cp
f
180.908 11.3027 mo
180.908 14.3013 178.479 16.7285 175.482 16.7285 cv
172.486 16.7285 170.058 14.3013 170.058 11.3027 cv
170.058 8.30664 172.486 5.87793 175.482 5.87793 cv
178.479 5.87793 180.908 8.30664 180.908 11.3027 cv
cp
0 0.992157 1 0 cmyk
f
171.522 11.3018 mo
171.526 13.4917 173.296 15.2573 175.481 15.2617 cv
175.481 15.2617 li
177.668 15.2573 179.438 13.4897 179.441 11.3018 cv
179.441 11.3018 li
179.438 9.11621 177.668 7.34814 175.481 7.34424 cv
175.481 7.34424 li
173.296 7.34814 171.526 9.11621 171.522 11.3018 cv
171.522 11.3018 li
cp
168.591 11.3018 mo
168.591 7.49512 171.675 4.41113 175.481 4.41113 cv
175.481 4.41113 li
179.288 4.41309 182.372 7.49512 182.374 11.3018 cv
182.374 11.3018 li
182.372 15.1104 179.288 18.1943 175.481 18.1943 cv
175.481 18.1943 li
171.675 18.1943 168.591 15.1104 168.591 11.3018 cv
168.591 11.3018 li
cp
0 0 0 0 cmyk
f
232.036 184.023 mo
175.343 184.023 li
175.343 127.33 li
232.036 127.33 li
232.036 184.023 li
cp
0 0 0 1 cmyk
f
74.2847 184.023 mo
17.5913 184.023 li
17.5913 127.33 li
74.2847 127.33 li
74.2847 184.023 li
cp
f
29.6772 156.628 mo
35.5913 156.628 li
35.5913 150.714 li
29.6772 150.714 li
29.6772 156.628 li
cp
28.1978 158.106 mo
28.1978 149.236 li
37.0698 149.236 li
37.0698 158.106 li
28.1978 158.106 li
cp
22.2837 164.021 mo
42.9839 164.021 li
42.9839 143.32 li
35.5913 143.32 li
35.5913 135.93 li
22.2837 135.93 li
22.2837 164.021 li
cp
20.8062 165.501 mo
20.8062 134.452 li
37.0698 134.452 li
37.0698 141.843 li
44.4624 141.843 li
44.4624 165.501 li
20.8062 165.501 li
cp
0 0 0 0 cmyk
f
56.2212 156.628 mo
62.1362 156.628 li
62.1362 150.714 li
56.2212 150.714 li
56.2212 156.628 li
cp
54.7427 158.106 mo
54.7427 149.236 li
63.6138 149.236 li
63.6138 158.106 li
54.7427 158.106 li
cp
48.8286 164.021 mo
69.5288 164.021 li
69.5288 143.32 li
62.1362 143.32 li
62.1362 135.93 li
48.8286 135.93 li
48.8286 164.021 li
cp
47.3501 165.501 mo
47.3501 134.452 li
63.6138 134.452 li
63.6138 141.843 li
71.0073 141.843 li
71.0073 165.501 li
47.3501 165.501 li
cp
f
24.2026 173.309 mo
24.145 173.102 24.0591 172.918 23.9419 172.755 cv
23.8247 172.594 23.6743 172.465 23.4917 172.369 cv
23.3081 172.272 23.0942 172.226 22.8481 172.226 cv
22.5903 172.226 22.3726 172.275 22.1919 172.377 cv
22.0122 172.48 21.8657 172.612 21.7524 172.778 cv
21.6372 172.943 21.5552 173.131 21.5034 173.34 cv
21.4526 173.55 21.4282 173.763 21.4282 173.978 cv
21.4282 174.206 21.4546 174.427 21.5093 174.639 cv
21.562 174.852 21.6479 175.04 21.7651 175.202 cv
21.8813 175.363 22.0337 175.494 22.2202 175.593 cv
22.4048 175.691 22.6294 175.741 22.894 175.741 cv
23.1577 175.741 23.3774 175.69 23.5552 175.588 cv
23.7319 175.486 23.8745 175.352 23.9819 175.184 cv
24.0903 175.017 24.1675 174.823 24.2163 174.608 cv
24.2632 174.393 24.2876 174.171 24.2876 173.942 cv
24.2876 173.727 24.2603 173.515 24.2026 173.309 cv
cp
21.4546 169.887 mo
21.4546 172.287 li
21.4722 172.287 li
21.5991 172.03 21.7964 171.843 22.0659 171.726 cv
22.3364 171.608 22.6323 171.551 22.9565 171.551 cv
23.3169 171.551 23.6294 171.616 23.897 171.748 cv
24.1636 171.88 24.3853 172.059 24.561 172.284 cv
24.7388 172.509 24.8716 172.767 24.9624 173.061 cv
25.0522 173.355 25.0962 173.667 25.0962 173.996 cv
25.0962 174.327 25.0532 174.639 24.9673 174.932 cv
24.8794 175.226 24.7476 175.481 24.5708 175.7 cv
24.3931 175.92 24.1724 176.092 23.9058 176.218 cv
23.6392 176.344 23.3286 176.406 22.9751 176.406 cv
22.8608 176.406 22.7329 176.395 22.5923 176.371 cv
22.4517 176.347 22.313 176.308 22.1743 176.254 cv
22.0366 176.2 21.9058 176.126 21.7827 176.034 cv
21.6597 175.94 21.5571 175.824 21.4722 175.688 cv
21.4546 175.688 li
21.4546 176.308 li
20.6909 176.308 li
20.6909 169.887 li
21.4546 169.887 li
cp
0 0.992157 1 0 cmyk
f
29.5044 169.887 mo
29.5044 176.308 li
28.7388 176.308 li
28.7388 169.887 li
29.5044 169.887 li
cp
f
34.1987 171.658 mo
34.1987 176.308 li
33.4341 176.308 li
33.4341 171.658 li
34.1987 171.658 li
cp
33.4341 170.821 mo
33.4341 169.887 li
34.1987 169.887 li
34.1987 170.821 li
33.4341 170.821 li
cp
f
41.6226 173.309 mo
41.5649 173.102 41.479 172.918 41.3618 172.755 cv
41.2456 172.594 41.0952 172.465 40.9116 172.369 cv
40.729 172.272 40.5151 172.226 40.269 172.226 cv
40.0103 172.226 39.7925 172.275 39.6128 172.377 cv
39.4331 172.48 39.2856 172.612 39.1724 172.778 cv
39.0581 172.943 38.9751 173.131 38.9243 173.34 cv
38.8726 173.55 38.8481 173.763 38.8481 173.978 cv
38.8481 174.206 38.8745 174.427 38.9292 174.639 cv
38.9819 174.852 39.0679 175.04 39.1851 175.202 cv
39.3022 175.363 39.4536 175.494 39.6401 175.593 cv
39.8247 175.691 40.0503 175.741 40.314 175.741 cv
40.5776 175.741 40.7974 175.69 40.9751 175.588 cv
41.1519 175.486 41.2944 175.352 41.4028 175.184 cv
41.5103 175.017 41.5874 174.823 41.6362 174.608 cv
41.6841 174.393 41.7075 174.171 41.7075 173.942 cv
41.7075 173.727 41.6792 173.515 41.6226 173.309 cv
cp
38.8745 171.658 mo
38.8745 172.287 li
38.8931 172.287 li
39.019 172.03 39.2163 171.843 39.4858 171.726 cv
39.7563 171.608 40.0522 171.551 40.3765 171.551 cv
40.7378 171.551 41.0503 171.616 41.3169 171.748 cv
41.5835 171.88 41.8062 172.059 41.9819 172.284 cv
42.1587 172.509 42.2925 172.767 42.3823 173.061 cv
42.4731 173.355 42.5171 173.667 42.5171 173.996 cv
42.5171 174.327 42.4741 174.639 42.3872 174.932 cv
42.2993 175.226 42.1675 175.481 41.9917 175.7 cv
41.814 175.92 41.5923 176.092 41.3257 176.218 cv
41.0591 176.344 40.7485 176.406 40.395 176.406 cv
40.2808 176.406 40.1528 176.395 40.0122 176.371 cv
39.8716 176.347 39.7329 176.308 39.5942 176.254 cv
39.4575 176.2 39.3257 176.126 39.2036 176.034 cv
39.0806 175.94 38.9771 175.824 38.8931 175.688 cv
38.8745 175.688 li
38.8745 178.079 li
38.1108 178.079 li
38.1108 171.658 li
38.8745 171.658 li
cp
f
54.8511 173.309 mo
54.7944 173.102 54.7085 172.918 54.5913 172.755 cv
54.4751 172.594 54.3247 172.465 54.1411 172.369 cv
53.9585 172.272 53.7446 172.226 53.4976 172.226 cv
53.2407 172.226 53.021 172.275 52.8423 172.377 cv
52.6626 172.48 52.5151 172.612 52.4009 172.778 cv
52.2866 172.943 52.2046 173.131 52.1538 173.34 cv
52.1021 173.55 52.0767 173.763 52.0767 173.978 cv
52.0767 174.206 52.104 174.427 52.1577 174.639 cv
52.2124 174.852 52.2983 175.04 52.4146 175.202 cv
52.5317 175.363 52.6831 175.494 52.8696 175.593 cv
53.0542 175.691 53.2788 175.741 53.5435 175.741 cv
53.8071 175.741 54.0278 175.69 54.2046 175.588 cv
54.3813 175.486 54.5239 175.352 54.6323 175.184 cv
54.7397 175.017 54.8169 174.823 54.8657 174.608 cv
54.9136 174.393 54.937 174.171 54.937 173.942 cv
54.937 173.727 54.9077 173.515 54.8511 173.309 cv
cp
52.104 169.887 mo
52.104 172.287 li
52.1226 172.287 li
52.2485 172.03 52.4458 171.843 52.7163 171.726 cv
52.9858 171.608 53.2827 171.551 53.606 171.551 cv
53.9663 171.551 54.2798 171.616 54.5464 171.748 cv
54.813 171.88 55.0347 172.059 55.2114 172.284 cv
55.3882 172.509 55.522 172.767 55.6108 173.061 cv
55.7026 173.355 55.7466 173.667 55.7466 173.996 cv
55.7466 174.327 55.7026 174.639 55.6167 174.932 cv
55.5288 175.226 55.3979 175.481 55.2202 175.7 cv
55.0435 175.92 54.8218 176.092 54.5552 176.218 cv
54.2886 176.344 53.978 176.406 53.6245 176.406 cv
53.5112 176.406 53.3833 176.395 53.2427 176.371 cv
53.1021 176.347 52.9624 176.308 52.8237 176.254 cv
52.686 176.2 52.5552 176.126 52.4331 176.034 cv
52.311 175.94 52.2065 175.824 52.1226 175.688 cv
52.104 175.688 li
52.104 176.308 li
51.3413 176.308 li
51.3413 169.887 li
52.104 169.887 li
cp
f
60.0151 174.738 mo
60.0894 174.958 60.1929 175.141 60.3247 175.287 cv
60.4575 175.434 60.6108 175.546 60.7876 175.624 cv
60.9653 175.702 61.1519 175.741 61.3501 175.741 cv
61.5474 175.741 61.7358 175.702 61.9116 175.624 cv
62.0894 175.546 62.2437 175.434 62.3755 175.287 cv
62.5073 175.141 62.6108 174.958 62.686 174.738 cv
62.7603 174.52 62.7983 174.27 62.7983 173.988 cv
62.7983 173.706 62.7603 173.455 62.686 173.236 cv
62.6108 173.018 62.5073 172.833 62.3755 172.683 cv
62.2437 172.533 62.0894 172.42 61.9116 172.342 cv
61.7358 172.264 61.5474 172.226 61.3501 172.226 cv
61.1519 172.226 60.9653 172.264 60.7876 172.342 cv
60.6108 172.42 60.4575 172.533 60.3247 172.683 cv
60.1929 172.833 60.0894 173.018 60.0151 173.236 cv
59.9399 173.455 59.9019 173.706 59.9019 173.988 cv
59.9019 174.27 59.9399 174.52 60.0151 174.738 cv
cp
59.2368 173.03 mo
59.3315 172.732 59.4761 172.475 59.6685 172.257 cv
59.8599 172.037 60.0972 171.864 60.3784 171.738 cv
60.6606 171.613 60.9849 171.551 61.3501 171.551 cv
61.7222 171.551 62.0474 171.613 62.3257 171.738 cv
62.605 171.864 62.8403 172.037 63.0327 172.257 cv
63.2241 172.475 63.3667 172.732 63.4634 173.03 cv
63.5591 173.327 63.6079 173.646 63.6079 173.988 cv
63.6079 174.329 63.5591 174.647 63.4634 174.94 cv
63.3667 175.234 63.2241 175.491 63.0327 175.71 cv
62.8403 175.929 62.605 176.1 62.3257 176.223 cv
62.0474 176.345 61.7222 176.406 61.3501 176.406 cv
60.9849 176.406 60.6606 176.345 60.3784 176.223 cv
60.0972 176.1 59.8599 175.929 59.6685 175.71 cv
59.4761 175.491 59.3315 175.234 59.2368 174.94 cv
59.1401 174.647 59.0933 174.329 59.0933 173.988 cv
59.0933 173.646 59.1401 173.327 59.2368 173.03 cv
cp
f
66.8364 171.658 mo
67.8169 171.658 li
68.9312 173.286 li
70.0923 171.658 li
71.0093 171.658 li
69.4077 173.799 li
71.2085 176.308 li
70.2271 176.308 li
68.9312 174.384 li
67.6362 176.308 li
66.7095 176.308 li
68.4556 173.861 li
66.8364 171.658 li
cp
f
113.655 156.628 mo
119.569 156.628 li
119.569 150.714 li
113.655 150.714 li
113.655 156.628 li
cp
112.175 158.106 mo
112.175 149.236 li
121.047 149.236 li
121.047 158.106 li
112.175 158.106 li
cp
106.261 164.021 mo
126.961 164.021 li
126.961 143.32 li
119.569 143.32 li
119.569 135.93 li
106.261 135.93 li
106.261 164.021 li
cp
104.784 165.501 mo
104.784 134.452 li
121.047 134.452 li
121.047 141.843 li
128.44 141.843 li
128.44 165.501 li
104.784 165.501 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
140.198 156.628 mo
146.114 156.628 li
146.114 150.714 li
140.198 150.714 li
140.198 156.628 li
cp
138.72 158.106 mo
138.72 149.236 li
147.591 149.236 li
147.591 158.106 li
138.72 158.106 li
cp
132.806 164.021 mo
153.507 164.021 li
153.507 143.32 li
146.114 143.32 li
146.114 135.93 li
132.806 135.93 li
132.806 164.021 li
cp
131.328 165.501 mo
131.328 134.452 li
147.591 134.452 li
147.591 141.843 li
154.985 141.843 li
154.985 165.501 li
131.328 165.501 li
cp
f
108.18 173.309 mo
108.123 173.102 108.037 172.918 107.919 172.755 cv
107.802 172.594 107.652 172.465 107.469 172.369 cv
107.286 172.272 107.072 172.226 106.826 172.226 cv
106.568 172.226 106.35 172.275 106.169 172.377 cv
105.99 172.48 105.843 172.612 105.73 172.778 cv
105.615 172.943 105.533 173.131 105.481 173.34 cv
105.43 173.55 105.406 173.763 105.406 173.978 cv
105.406 174.206 105.432 174.427 105.487 174.639 cv
105.54 174.852 105.625 175.04 105.743 175.202 cv
105.859 175.363 106.011 175.494 106.198 175.593 cv
106.382 175.691 106.607 175.741 106.872 175.741 cv
107.135 175.741 107.355 175.69 107.533 175.588 cv
107.709 175.486 107.852 175.352 107.959 175.184 cv
108.068 175.017 108.145 174.823 108.194 174.608 cv
108.241 174.393 108.265 174.171 108.265 173.942 cv
108.265 173.727 108.238 173.515 108.18 173.309 cv
cp
105.432 169.887 mo
105.432 172.287 li
105.45 172.287 li
105.577 172.03 105.774 171.843 106.043 171.726 cv
106.314 171.608 106.61 171.551 106.934 171.551 cv
107.294 171.551 107.607 171.616 107.875 171.748 cv
108.141 171.88 108.363 172.059 108.539 172.284 cv
108.716 172.509 108.849 172.767 108.94 173.061 cv
109.03 173.355 109.074 173.667 109.074 173.996 cv
109.074 174.327 109.031 174.639 108.945 174.932 cv
108.857 175.226 108.725 175.481 108.548 175.7 cv
108.371 175.92 108.15 176.092 107.883 176.218 cv
107.617 176.344 107.306 176.406 106.953 176.406 cv
106.838 176.406 106.71 176.395 106.57 176.371 cv
106.429 176.347 106.291 176.308 106.152 176.254 cv
106.014 176.2 105.883 176.126 105.76 176.034 cv
105.637 175.94 105.535 175.824 105.45 175.688 cv
105.432 175.688 li
105.432 176.308 li
104.668 176.308 li
104.668 169.887 li
105.432 169.887 li
cp
0 0.992157 1 0 cmyk
f
113.482 169.887 mo
113.482 176.308 li
112.716 176.308 li
112.716 169.887 li
113.482 169.887 li
cp
f
118.176 171.658 mo
118.176 176.308 li
117.412 176.308 li
117.412 171.658 li
118.176 171.658 li
cp
117.412 170.821 mo
117.412 169.887 li
118.176 169.887 li
118.176 170.821 li
117.412 170.821 li
cp
f
125.6 173.309 mo
125.542 173.102 125.457 172.918 125.339 172.755 cv
125.223 172.594 125.073 172.465 124.889 172.369 cv
124.707 172.272 124.493 172.226 124.247 172.226 cv
123.988 172.226 123.77 172.275 123.59 172.377 cv
123.411 172.48 123.263 172.612 123.15 172.778 cv
123.036 172.943 122.953 173.131 122.902 173.34 cv
122.85 173.55 122.826 173.763 122.826 173.978 cv
122.826 174.206 122.852 174.427 122.907 174.639 cv
122.959 174.852 123.045 175.04 123.163 175.202 cv
123.28 175.363 123.431 175.494 123.618 175.593 cv
123.802 175.691 124.028 175.741 124.292 175.741 cv
124.555 175.741 124.775 175.69 124.953 175.588 cv
125.129 175.486 125.272 175.352 125.38 175.184 cv
125.488 175.017 125.565 174.823 125.614 174.608 cv
125.662 174.393 125.685 174.171 125.685 173.942 cv
125.685 173.727 125.657 173.515 125.6 173.309 cv
cp
122.852 171.658 mo
122.852 172.287 li
122.871 172.287 li
122.997 172.03 123.194 171.843 123.463 171.726 cv
123.734 171.608 124.03 171.551 124.354 171.551 cv
124.715 171.551 125.028 171.616 125.294 171.748 cv
125.561 171.88 125.784 172.059 125.959 172.284 cv
126.136 172.509 126.27 172.767 126.36 173.061 cv
126.451 173.355 126.495 173.667 126.495 173.996 cv
126.495 174.327 126.452 174.639 126.365 174.932 cv
126.277 175.226 126.145 175.481 125.969 175.7 cv
125.792 175.92 125.57 176.092 125.303 176.218 cv
125.037 176.344 124.726 176.406 124.373 176.406 cv
124.258 176.406 124.13 176.395 123.99 176.371 cv
123.849 176.347 123.71 176.308 123.572 176.254 cv
123.435 176.2 123.303 176.126 123.181 176.034 cv
123.058 175.94 122.955 175.824 122.871 175.688 cv
122.852 175.688 li
122.852 178.079 li
122.088 178.079 li
122.088 171.658 li
122.852 171.658 li
cp
f
138.829 173.309 mo
138.772 173.102 138.687 172.918 138.569 172.755 cv
138.452 172.594 138.302 172.465 138.118 172.369 cv
137.937 172.272 137.722 172.226 137.476 172.226 cv
137.218 172.226 136.999 172.275 136.819 172.377 cv
136.64 172.48 136.493 172.612 136.378 172.778 cv
136.265 172.943 136.183 173.131 136.132 173.34 cv
136.079 173.55 136.054 173.763 136.054 173.978 cv
136.054 174.206 136.081 174.427 136.136 174.639 cv
136.19 174.852 136.276 175.04 136.392 175.202 cv
136.509 175.363 136.661 175.494 136.847 175.593 cv
137.032 175.691 137.257 175.741 137.521 175.741 cv
137.784 175.741 138.005 175.69 138.183 175.588 cv
138.358 175.486 138.501 175.352 138.61 175.184 cv
138.718 175.017 138.794 174.823 138.843 174.608 cv
138.892 174.393 138.915 174.171 138.915 173.942 cv
138.915 173.727 138.886 173.515 138.829 173.309 cv
cp
136.081 169.887 mo
136.081 172.287 li
136.101 172.287 li
136.226 172.03 136.423 171.843 136.694 171.726 cv
136.964 171.608 137.261 171.551 137.583 171.551 cv
137.944 171.551 138.257 171.616 138.524 171.748 cv
138.79 171.88 139.013 172.059 139.188 172.284 cv
139.366 172.509 139.499 172.767 139.589 173.061 cv
139.681 173.355 139.724 173.667 139.724 173.996 cv
139.724 174.327 139.681 174.639 139.595 174.932 cv
139.507 175.226 139.376 175.481 139.198 175.7 cv
139.021 175.92 138.8 176.092 138.532 176.218 cv
138.267 176.344 137.956 176.406 137.603 176.406 cv
137.489 176.406 137.36 176.395 137.22 176.371 cv
137.079 176.347 136.94 176.308 136.802 176.254 cv
136.663 176.2 136.532 176.126 136.411 176.034 cv
136.288 175.94 136.185 175.824 136.101 175.688 cv
136.081 175.688 li
136.081 176.308 li
135.319 176.308 li
135.319 169.887 li
136.081 169.887 li
cp
f
143.993 174.738 mo
144.067 174.958 144.171 175.141 144.302 175.287 cv
144.435 175.434 144.589 175.546 144.765 175.624 cv
144.942 175.702 145.13 175.741 145.327 175.741 cv
145.524 175.741 145.714 175.702 145.89 175.624 cv
146.067 175.546 146.222 175.434 146.353 175.287 cv
146.485 175.141 146.589 174.958 146.663 174.738 cv
146.737 174.52 146.776 174.27 146.776 173.988 cv
146.776 173.706 146.737 173.455 146.663 173.236 cv
146.589 173.018 146.485 172.833 146.353 172.683 cv
146.222 172.533 146.067 172.42 145.89 172.342 cv
145.714 172.264 145.524 172.226 145.327 172.226 cv
145.13 172.226 144.942 172.264 144.765 172.342 cv
144.589 172.42 144.435 172.533 144.302 172.683 cv
144.171 172.833 144.067 173.018 143.993 173.236 cv
143.917 173.455 143.88 173.706 143.88 173.988 cv
143.88 174.27 143.917 174.52 143.993 174.738 cv
cp
143.214 173.03 mo
143.31 172.732 143.454 172.475 143.646 172.257 cv
143.837 172.037 144.075 171.864 144.356 171.738 cv
144.638 171.613 144.962 171.551 145.327 171.551 cv
145.7 171.551 146.024 171.613 146.304 171.738 cv
146.583 171.864 146.817 172.037 147.011 172.257 cv
147.202 172.475 147.345 172.732 147.44 173.03 cv
147.536 173.327 147.585 173.646 147.585 173.988 cv
147.585 174.329 147.536 174.647 147.44 174.94 cv
147.345 175.234 147.202 175.491 147.011 175.71 cv
146.817 175.929 146.583 176.1 146.304 176.223 cv
146.024 176.345 145.7 176.406 145.327 176.406 cv
144.962 176.406 144.638 176.345 144.356 176.223 cv
144.075 176.1 143.837 175.929 143.646 175.71 cv
143.454 175.491 143.31 175.234 143.214 174.94 cv
143.118 174.647 143.071 174.329 143.071 173.988 cv
143.071 173.646 143.118 173.327 143.214 173.03 cv
cp
f
150.813 171.658 mo
151.794 171.658 li
152.909 173.286 li
154.069 171.658 li
154.987 171.658 li
153.386 173.799 li
155.187 176.308 li
154.204 176.308 li
152.909 174.384 li
151.614 176.308 li
150.687 176.308 li
152.433 173.861 li
150.813 171.658 li
cp
f
187.8 156.628 mo
193.714 156.628 li
193.714 150.714 li
187.8 150.714 li
187.8 156.628 li
cp
186.319 158.106 mo
186.319 149.236 li
195.192 149.236 li
195.192 158.106 li
186.319 158.106 li
cp
180.405 164.021 mo
201.106 164.021 li
201.106 143.32 li
193.714 143.32 li
193.714 135.93 li
180.405 135.93 li
180.405 164.021 li
cp
178.929 165.501 mo
178.929 134.452 li
195.192 134.452 li
195.192 141.843 li
202.585 141.843 li
202.585 165.501 li
178.929 165.501 li
cp
f
214.343 156.628 mo
220.259 156.628 li
220.259 150.714 li
214.343 150.714 li
214.343 156.628 li
cp
212.864 158.106 mo
212.864 149.236 li
221.735 149.236 li
221.735 158.106 li
212.864 158.106 li
cp
206.95 164.021 mo
227.651 164.021 li
227.651 143.32 li
220.259 143.32 li
220.259 135.93 li
206.95 135.93 li
206.95 164.021 li
cp
205.472 165.501 mo
205.472 134.452 li
221.735 134.452 li
221.735 141.843 li
229.13 141.843 li
229.13 165.501 li
205.472 165.501 li
cp
f
182.872 173.211 mo
182.815 173.004 182.728 172.817 182.61 172.655 cv
182.493 172.491 182.341 172.361 182.159 172.266 cv
181.974 172.17 181.759 172.121 181.511 172.121 cv
181.249 172.121 181.03 172.172 180.851 172.275 cv
180.669 172.376 180.521 172.511 180.405 172.677 cv
180.292 172.844 180.21 173.032 180.157 173.243 cv
180.104 173.454 180.079 173.668 180.079 173.885 cv
180.079 174.114 180.106 174.337 180.161 174.551 cv
180.216 174.766 180.302 174.954 180.419 175.117 cv
180.538 175.279 180.688 175.412 180.876 175.511 cv
181.065 175.611 181.29 175.66 181.556 175.66 cv
181.821 175.66 182.044 175.609 182.222 175.506 cv
182.399 175.403 182.542 175.269 182.651 175.1 cv
182.759 174.931 182.839 174.737 182.888 174.52 cv
182.937 174.302 182.96 174.079 182.96 173.85 cv
182.96 173.632 182.929 173.42 182.872 173.211 cv
cp
180.106 169.767 mo
180.106 172.184 li
180.126 172.184 li
180.253 171.925 180.452 171.735 180.722 171.618 cv
180.995 171.5 181.294 171.441 181.62 171.441 cv
181.981 171.441 182.298 171.507 182.565 171.641 cv
182.833 171.773 183.058 171.953 183.235 172.179 cv
183.413 172.404 183.548 172.667 183.638 172.962 cv
183.728 173.258 183.774 173.572 183.774 173.904 cv
183.774 174.236 183.729 174.549 183.644 174.846 cv
183.556 175.142 183.423 175.398 183.245 175.619 cv
183.065 175.839 182.843 176.013 182.575 176.141 cv
182.306 176.267 181.993 176.33 181.638 176.33 cv
181.522 176.33 181.394 176.318 181.253 176.294 cv
181.11 176.27 180.97 176.23 180.831 176.177 cv
180.692 176.122 180.562 176.048 180.437 175.954 cv
180.313 175.861 180.21 175.745 180.126 175.606 cv
180.106 175.606 li
180.106 176.23 li
179.339 176.23 li
179.339 169.767 li
180.106 169.767 li
cp
0 0 0 0 cmyk
f
185.946 169.767 mo
185.946 176.23 li
185.179 176.23 li
185.179 169.767 li
185.946 169.767 li
cp
f
188.409 171.55 mo
188.409 176.23 li
187.64 176.23 li
187.64 171.55 li
188.409 171.55 li
cp
187.64 170.709 mo
187.64 169.767 li
188.409 169.767 li
188.409 170.709 li
187.64 170.709 li
cp
f
193.618 173.211 mo
193.562 173.004 193.474 172.817 193.356 172.655 cv
193.237 172.491 193.087 172.361 192.903 172.266 cv
192.72 172.17 192.503 172.121 192.257 172.121 cv
191.995 172.121 191.774 172.172 191.595 172.275 cv
191.415 172.376 191.267 172.511 191.151 172.677 cv
191.036 172.844 190.954 173.032 190.903 173.243 cv
190.851 173.454 190.825 173.668 190.825 173.885 cv
190.825 174.114 190.854 174.337 190.909 174.551 cv
190.962 174.766 191.05 174.954 191.165 175.117 cv
191.284 175.279 191.435 175.412 191.622 175.511 cv
191.81 175.611 192.036 175.66 192.302 175.66 cv
192.567 175.66 192.79 175.609 192.966 175.506 cv
193.146 175.403 193.29 175.269 193.396 175.1 cv
193.505 174.931 193.585 174.737 193.632 174.52 cv
193.683 174.302 193.704 174.079 193.704 173.85 cv
193.704 173.632 193.675 173.42 193.618 173.211 cv
cp
190.854 171.55 mo
190.854 172.184 li
190.87 172.184 li
190.997 171.925 191.198 171.735 191.468 171.618 cv
191.739 171.5 192.04 171.441 192.366 171.441 cv
192.728 171.441 193.042 171.507 193.312 171.641 cv
193.579 171.773 193.804 171.953 193.979 172.179 cv
194.159 172.404 194.292 172.667 194.384 172.962 cv
194.474 173.258 194.521 173.572 194.521 173.904 cv
194.521 174.236 194.476 174.549 194.39 174.846 cv
194.302 175.142 194.169 175.398 193.991 175.619 cv
193.812 175.839 193.589 176.013 193.321 176.141 cv
193.052 176.267 192.739 176.33 192.382 176.33 cv
192.269 176.33 192.142 176.318 191.999 176.294 cv
191.856 176.27 191.716 176.23 191.577 176.177 cv
191.438 176.122 191.308 176.048 191.183 175.954 cv
191.06 175.861 190.956 175.745 190.87 175.606 cv
190.854 175.606 li
190.854 178.014 li
190.083 178.014 li
190.083 171.55 li
190.854 171.55 li
cp
f
200.323 173.211 mo
200.267 173.004 200.177 172.817 200.06 172.655 cv
199.942 172.491 199.792 172.361 199.608 172.266 cv
199.423 172.17 199.208 172.121 198.962 172.121 cv
198.702 172.121 198.481 172.172 198.3 172.275 cv
198.12 172.376 197.972 172.511 197.856 172.677 cv
197.741 172.844 197.659 173.032 197.606 173.243 cv
197.558 173.454 197.53 173.668 197.53 173.885 cv
197.53 174.114 197.56 174.337 197.612 174.551 cv
197.665 174.766 197.753 174.954 197.872 175.117 cv
197.987 175.279 198.14 175.412 198.327 175.511 cv
198.515 175.611 198.741 175.66 199.007 175.66 cv
199.272 175.66 199.493 175.609 199.671 175.506 cv
199.851 175.403 199.993 175.269 200.103 175.1 cv
200.21 174.931 200.288 174.737 200.337 174.52 cv
200.386 174.302 200.411 174.079 200.411 173.85 cv
200.411 173.632 200.382 173.42 200.323 173.211 cv
cp
197.56 169.767 mo
197.56 172.184 li
197.575 172.184 li
197.702 171.925 197.901 171.735 198.173 171.618 cv
198.444 171.5 198.743 171.441 199.069 171.441 cv
199.433 171.441 199.747 171.507 200.017 171.641 cv
200.284 171.773 200.509 171.953 200.685 172.179 cv
200.862 172.404 200.999 172.667 201.089 172.962 cv
201.179 173.258 201.224 173.572 201.224 173.904 cv
201.224 174.236 201.179 174.549 201.093 174.846 cv
201.005 175.142 200.872 175.398 200.694 175.619 cv
200.517 175.839 200.292 176.013 200.024 176.141 cv
199.757 176.267 199.444 176.33 199.087 176.33 cv
198.974 176.33 198.847 176.318 198.704 176.294 cv
198.562 176.27 198.421 176.23 198.282 176.177 cv
198.144 176.122 198.011 176.048 197.89 175.954 cv
197.765 175.861 197.661 175.745 197.575 175.606 cv
197.56 175.606 li
197.56 176.23 li
196.788 176.23 li
196.788 169.767 li
197.56 169.767 li
cp
f
203.257 174.65 mo
203.333 174.87 203.437 175.056 203.567 175.202 cv
203.702 175.351 203.858 175.465 204.036 175.542 cv
204.214 175.621 204.403 175.66 204.603 175.66 cv
204.802 175.66 204.989 175.621 205.169 175.542 cv
205.345 175.465 205.501 175.351 205.634 175.202 cv
205.767 175.056 205.87 174.87 205.946 174.65 cv
206.021 174.431 206.06 174.179 206.06 173.896 cv
206.06 173.611 206.021 173.358 205.946 173.139 cv
205.87 172.919 205.767 172.733 205.634 172.583 cv
205.501 172.431 205.345 172.316 205.169 172.237 cv
204.989 172.16 204.802 172.121 204.603 172.121 cv
204.403 172.121 204.214 172.16 204.036 172.237 cv
203.858 172.316 203.702 172.431 203.567 172.583 cv
203.437 172.733 203.333 172.919 203.257 173.139 cv
203.181 173.358 203.144 173.611 203.144 173.896 cv
203.144 174.179 203.181 174.431 203.257 174.65 cv
cp
202.474 172.931 mo
202.571 172.632 202.716 172.372 202.909 172.151 cv
203.101 171.932 203.339 171.759 203.624 171.633 cv
203.907 171.505 204.233 171.441 204.603 171.441 cv
204.976 171.441 205.304 171.505 205.585 171.633 cv
205.866 171.759 206.101 171.932 206.294 172.151 cv
206.487 172.372 206.632 172.632 206.728 172.931 cv
206.825 173.229 206.874 173.551 206.874 173.896 cv
206.874 174.239 206.825 174.56 206.728 174.854 cv
206.632 175.15 206.487 175.409 206.294 175.63 cv
206.101 175.849 205.866 176.021 205.585 176.145 cv
205.304 176.268 204.976 176.33 204.603 176.33 cv
204.233 176.33 203.907 176.268 203.624 176.145 cv
203.339 176.021 203.101 175.849 202.909 175.63 cv
202.716 175.409 202.571 175.15 202.474 174.854 cv
202.378 174.56 202.329 174.239 202.329 173.896 cv
202.329 173.551 202.378 173.229 202.474 172.931 cv
cp
f
207.86 171.55 mo
208.847 171.55 li
209.97 173.188 li
211.138 171.55 li
212.062 171.55 li
210.448 173.705 li
212.259 176.23 li
211.274 176.23 li
209.97 174.294 li
208.667 176.23 li
207.733 176.23 li
209.489 173.769 li
207.86 171.55 li
cp
f
214.55 175.226 mo
214.55 176.23 li
213.546 176.23 li
213.546 175.226 li
214.55 175.226 li
cp
f
217.017 174.65 mo
217.093 174.87 217.196 175.056 217.329 175.202 cv
217.464 175.351 217.618 175.465 217.796 175.542 cv
217.974 175.621 218.163 175.66 218.362 175.66 cv
218.562 175.66 218.749 175.621 218.929 175.542 cv
219.106 175.465 219.261 175.351 219.394 175.202 cv
219.526 175.056 219.63 174.87 219.706 174.65 cv
219.782 174.431 219.819 174.179 219.819 173.896 cv
219.819 173.611 219.782 173.358 219.706 173.139 cv
219.63 172.919 219.526 172.733 219.394 172.583 cv
219.261 172.431 219.106 172.316 218.929 172.237 cv
218.749 172.16 218.562 172.121 218.362 172.121 cv
218.163 172.121 217.974 172.16 217.796 172.237 cv
217.618 172.316 217.464 172.431 217.329 172.583 cv
217.196 172.733 217.093 172.919 217.017 173.139 cv
216.94 173.358 216.905 173.611 216.905 173.896 cv
216.905 174.179 216.94 174.431 217.017 174.65 cv
cp
216.233 172.931 mo
216.331 172.632 216.476 172.372 216.669 172.151 cv
216.86 171.932 217.101 171.759 217.384 171.633 cv
217.667 171.505 217.993 171.441 218.362 171.441 cv
218.737 171.441 219.063 171.505 219.345 171.633 cv
219.624 171.759 219.862 171.932 220.056 172.151 cv
220.249 172.372 220.394 172.632 220.489 172.931 cv
220.587 173.229 220.634 173.551 220.634 173.896 cv
220.634 174.239 220.587 174.56 220.489 174.854 cv
220.394 175.15 220.249 175.409 220.056 175.63 cv
219.862 175.849 219.624 176.021 219.345 176.145 cv
219.063 176.268 218.737 176.33 218.362 176.33 cv
217.993 176.33 217.667 176.268 217.384 176.145 cv
217.101 176.021 216.86 175.849 216.669 175.63 cv
216.476 175.409 216.331 175.15 216.233 174.854 cv
216.138 174.56 216.089 174.239 216.089 173.896 cv
216.089 173.551 216.138 173.229 216.233 172.931 cv
cp
f
222.688 171.55 mo
222.688 172.537 li
222.706 172.537 li
222.894 172.156 223.124 171.876 223.396 171.694 cv
223.667 171.514 224.011 171.429 224.427 171.441 cv
224.427 172.256 li
224.12 172.256 223.856 172.298 223.64 172.384 cv
223.423 172.468 223.247 172.591 223.114 172.755 cv
222.981 172.917 222.886 173.115 222.825 173.348 cv
222.765 173.579 222.733 173.847 222.733 174.149 cv
222.733 176.23 li
221.964 176.23 li
221.964 171.55 li
222.688 171.55 li
cp
f
227.735 175.447 mo
227.915 175.342 228.058 175.202 228.165 175.03 cv
228.274 174.859 228.354 174.664 228.405 174.446 cv
228.458 174.229 228.483 174.012 228.483 173.795 cv
228.483 173.591 228.46 173.388 228.411 173.188 cv
228.362 172.988 228.286 172.811 228.179 172.649 cv
228.073 172.49 227.937 172.361 227.767 172.266 cv
227.599 172.17 227.394 172.121 227.151 172.121 cv
226.903 172.121 226.692 172.168 226.519 172.26 cv
226.343 172.354 226.2 172.479 226.087 172.638 cv
225.976 172.793 225.896 172.975 225.845 173.18 cv
225.792 173.384 225.767 173.599 225.767 173.822 cv
225.767 174.033 225.788 174.245 225.831 174.456 cv
225.874 174.667 225.946 174.859 226.048 175.03 cv
226.151 175.202 226.286 175.342 226.454 175.447 cv
226.624 175.553 226.835 175.606 227.089 175.606 cv
227.343 175.606 227.558 175.553 227.735 175.447 cv
cp
228.718 177.551 mo
228.368 177.933 227.819 178.123 227.069 178.123 cv
226.854 178.123 226.632 178.099 226.407 178.05 cv
226.179 178.001 225.974 177.924 225.79 177.815 cv
225.604 177.707 225.452 177.564 225.331 177.389 cv
225.212 177.214 225.146 177.001 225.134 176.745 cv
225.903 176.745 li
225.909 176.885 225.952 177.004 226.034 177.1 cv
226.116 177.195 226.216 177.274 226.333 177.335 cv
226.45 177.396 226.579 177.438 226.718 177.466 cv
226.856 177.493 226.989 177.508 227.116 177.508 cv
227.37 177.508 227.585 177.463 227.759 177.376 cv
227.933 177.288 228.077 177.167 228.194 177.014 cv
228.308 176.858 228.392 176.674 228.442 176.457 cv
228.493 176.239 228.519 176.002 228.519 175.742 cv
228.519 175.435 li
228.501 175.435 li
228.368 175.723 228.169 175.936 227.899 176.071 cv
227.63 176.207 227.345 176.275 227.044 176.275 cv
226.692 176.275 226.388 176.213 226.13 176.086 cv
225.87 175.959 225.653 175.788 225.478 175.574 cv
225.302 175.36 225.171 175.109 225.083 174.822 cv
224.995 174.536 224.952 174.233 224.952 173.913 cv
224.952 173.635 224.987 173.351 225.062 173.058 cv
225.134 172.765 225.253 172.499 225.423 172.26 cv
225.593 172.023 225.815 171.827 226.093 171.672 cv
226.37 171.519 226.71 171.441 227.116 171.441 cv
227.411 171.441 227.683 171.506 227.931 171.637 cv
228.179 171.766 228.372 171.96 228.511 172.221 cv
228.519 172.221 li
228.519 171.55 li
229.243 171.55 li
229.243 175.833 li
229.243 176.598 229.069 177.172 228.718 177.551 cv
cp
f
283.965 323.779 mo
0.5 323.779 li
0.5 267.086 li
283.965 267.086 li
283.965 323.779 li
cp
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
283.965 323.779 mo
0.5 323.779 li
0.5 267.086 li
283.965 267.086 li
283.965 323.779 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
135.942 297.857 mo
135.874 297.609 135.77 297.389 135.629 297.195 cv
135.489 297 135.31 296.846 135.09 296.73 cv
134.87 296.615 134.613 296.559 134.318 296.559 cv
134.009 296.559 133.746 296.619 133.53 296.742 cv
133.314 296.863 133.139 297.023 133.002 297.221 cv
132.865 297.42 132.767 297.645 132.705 297.896 cv
132.645 298.148 132.613 298.402 132.613 298.662 cv
132.613 298.936 132.646 299.199 132.711 299.455 cv
132.775 299.711 132.878 299.936 133.019 300.129 cv
133.158 300.324 133.34 300.48 133.563 300.6 cv
133.786 300.717 134.056 300.777 134.372 300.777 cv
134.688 300.777 134.953 300.715 135.165 300.594 cv
135.378 300.471 135.549 300.309 135.678 300.107 cv
135.808 299.906 135.9 299.676 135.958 299.418 cv
136.016 299.158 136.045 298.893 136.045 298.619 cv
136.045 298.359 136.011 298.105 135.942 297.857 cv
cp
132.646 293.752 mo
132.646 296.633 li
132.668 296.633 li
132.818 296.324 133.056 296.1 133.38 295.959 cv
133.703 295.818 134.06 295.748 134.448 295.748 cv
134.88 295.748 135.255 295.828 135.575 295.986 cv
135.896 296.145 136.161 296.357 136.374 296.629 cv
136.586 296.898 136.746 297.209 136.854 297.561 cv
136.962 297.914 137.016 298.287 137.016 298.684 cv
137.016 299.08 136.964 299.453 136.859 299.807 cv
136.755 300.158 136.597 300.465 136.385 300.729 cv
136.173 300.99 135.906 301.197 135.586 301.35 cv
135.266 301.5 134.894 301.576 134.47 301.576 cv
134.333 301.576 134.18 301.561 134.011 301.531 cv
133.842 301.504 133.675 301.457 133.509 301.393 cv
133.344 301.326 133.188 301.238 133.04 301.127 cv
132.893 301.016 132.769 300.877 132.668 300.713 cv
132.646 300.713 li
132.646 301.457 li
131.729 301.457 li
131.729 293.752 li
132.646 293.752 li
cp
0 0.992157 1 0 cmyk
f
145.54 293.752 mo
145.54 301.457 li
144.622 301.457 li
144.622 293.752 li
145.54 293.752 li
cp
f
154.409 295.879 mo
154.409 301.457 li
153.491 301.457 li
153.491 295.879 li
154.409 295.879 li
cp
153.491 294.875 mo
153.491 293.752 li
154.409 293.752 li
154.409 294.875 li
153.491 294.875 li
cp
f
166.553 297.857 mo
166.484 297.609 166.38 297.389 166.239 297.195 cv
166.1 297 165.92 296.846 165.7 296.73 cv
165.48 296.615 165.224 296.559 164.929 296.559 cv
164.619 296.559 164.356 296.619 164.141 296.742 cv
163.925 296.863 163.749 297.023 163.612 297.221 cv
163.476 297.42 163.377 297.645 163.315 297.896 cv
163.255 298.148 163.224 298.402 163.224 298.662 cv
163.224 298.936 163.256 299.199 163.321 299.455 cv
163.386 299.711 163.488 299.936 163.629 300.129 cv
163.769 300.324 163.95 300.48 164.174 300.6 cv
164.396 300.717 164.666 300.777 164.982 300.777 cv
165.299 300.777 165.563 300.715 165.775 300.594 cv
165.988 300.471 166.159 300.309 166.288 300.107 cv
166.418 299.906 166.511 299.676 166.568 299.418 cv
166.626 299.158 166.655 298.893 166.655 298.619 cv
166.655 298.359 166.621 298.105 166.553 297.857 cv
cp
163.256 295.879 mo
163.256 296.633 li
163.278 296.633 li
163.429 296.324 163.666 296.1 163.99 295.959 cv
164.313 295.818 164.67 295.748 165.059 295.748 cv
165.49 295.748 165.865 295.828 166.186 295.986 cv
166.506 296.145 166.771 296.357 166.984 296.629 cv
167.196 296.898 167.356 297.209 167.464 297.561 cv
167.572 297.914 167.626 298.287 167.626 298.684 cv
167.626 299.08 167.574 299.453 167.47 299.807 cv
167.365 300.158 167.207 300.465 166.995 300.729 cv
166.783 300.99 166.517 301.197 166.196 301.35 cv
165.876 301.5 165.504 301.576 165.08 301.576 cv
164.943 301.576 164.79 301.561 164.621 301.531 cv
164.452 301.504 164.285 301.457 164.119 301.393 cv
163.954 301.326 163.798 301.238 163.65 301.127 cv
163.503 301.016 163.379 300.877 163.278 300.713 cv
163.256 300.713 li
163.256 303.582 li
162.339 303.582 li
162.339 295.879 li
163.256 295.879 li
cp
f
188.898 297.857 mo
188.83 297.609 188.726 297.389 188.585 297.195 cv
188.445 297 188.266 296.846 188.046 296.73 cv
187.826 296.615 187.569 296.559 187.274 296.559 cv
186.965 296.559 186.702 296.619 186.486 296.742 cv
186.271 296.863 186.095 297.023 185.958 297.221 cv
185.821 297.42 185.723 297.645 185.661 297.896 cv
185.601 298.148 185.569 298.402 185.569 298.662 cv
185.569 298.936 185.602 299.199 185.667 299.455 cv
185.731 299.711 185.834 299.936 185.975 300.129 cv
186.114 300.324 186.296 300.48 186.52 300.6 cv
186.742 300.717 187.012 300.777 187.328 300.777 cv
187.645 300.777 187.909 300.715 188.121 300.594 cv
188.334 300.471 188.505 300.309 188.634 300.107 cv
188.764 299.906 188.856 299.676 188.914 299.418 cv
188.972 299.158 189.001 298.893 189.001 298.619 cv
189.001 298.359 188.967 298.105 188.898 297.857 cv
cp
185.602 293.752 mo
185.602 296.633 li
185.624 296.633 li
185.774 296.324 186.012 296.1 186.336 295.959 cv
186.659 295.818 187.016 295.748 187.404 295.748 cv
187.836 295.748 188.211 295.828 188.531 295.986 cv
188.852 296.145 189.117 296.357 189.33 296.629 cv
189.542 296.898 189.702 297.209 189.81 297.561 cv
189.918 297.914 189.972 298.287 189.972 298.684 cv
189.972 299.08 189.92 299.453 189.815 299.807 cv
189.711 300.158 189.553 300.465 189.341 300.729 cv
189.129 300.99 188.862 301.197 188.542 301.35 cv
188.222 301.5 187.85 301.576 187.426 301.576 cv
187.289 301.576 187.136 301.561 186.967 301.531 cv
186.798 301.504 186.631 301.457 186.465 301.393 cv
186.3 301.326 186.144 301.238 185.996 301.127 cv
185.849 301.016 185.725 300.877 185.624 300.713 cv
185.602 300.713 li
185.602 301.457 li
184.685 301.457 li
184.685 293.752 li
185.602 293.752 li
cp
f
198.328 299.574 mo
198.418 299.836 198.542 300.057 198.7 300.232 cv
198.858 300.408 199.044 300.543 199.256 300.637 cv
199.469 300.73 199.693 300.777 199.931 300.777 cv
200.168 300.777 200.393 300.73 200.605 300.637 cv
200.817 300.543 201.002 300.408 201.161 300.232 cv
201.319 300.057 201.443 299.836 201.533 299.574 cv
201.623 299.311 201.668 299.012 201.668 298.672 cv
201.668 298.334 201.623 298.035 201.533 297.771 cv
201.443 297.51 201.319 297.289 201.161 297.107 cv
201.002 296.928 200.817 296.791 200.605 296.697 cv
200.393 296.605 200.168 296.559 199.931 296.559 cv
199.693 296.559 199.469 296.605 199.256 296.697 cv
199.044 296.791 198.858 296.928 198.7 297.107 cv
198.542 297.289 198.418 297.51 198.328 297.771 cv
198.238 298.035 198.193 298.334 198.193 298.672 cv
198.193 299.012 198.238 299.311 198.328 299.574 cv
cp
197.396 297.523 mo
197.51 297.168 197.683 296.857 197.913 296.596 cv
198.144 296.334 198.427 296.127 198.766 295.975 cv
199.104 295.824 199.492 295.748 199.931 295.748 cv
200.377 295.748 200.767 295.824 201.102 295.975 cv
201.436 296.127 201.718 296.334 201.948 296.596 cv
202.179 296.857 202.352 297.168 202.467 297.523 cv
202.581 297.879 202.639 298.264 202.639 298.672 cv
202.639 299.082 202.581 299.465 202.467 299.816 cv
202.352 300.17 202.179 300.477 201.948 300.738 cv
201.718 301.002 201.436 301.207 201.102 301.354 cv
200.767 301.502 200.377 301.576 199.931 301.576 cv
199.492 301.576 199.104 301.502 198.766 301.354 cv
198.427 301.207 198.144 301.002 197.913 300.738 cv
197.683 300.477 197.51 300.17 197.396 299.816 cv
197.28 299.465 197.223 299.082 197.223 298.672 cv
197.223 298.264 197.28 297.879 197.396 297.523 cv
cp
f
209.75 295.879 mo
210.926 295.879 li
212.265 297.832 li
213.656 295.879 li
214.757 295.879 li
212.836 298.445 li
214.994 301.457 li
213.818 301.457 li
212.265 299.148 li
210.71 301.457 li
209.599 301.457 li
211.692 298.521 li
209.75 295.879 li
cp
f
223.657 300.26 mo
223.657 301.457 li
222.46 301.457 li
222.46 300.26 li
223.657 300.26 li
cp
f
242.006 299.574 mo
242.096 299.836 242.22 300.057 242.378 300.232 cv
242.536 300.408 242.722 300.543 242.934 300.637 cv
243.146 300.73 243.371 300.777 243.608 300.777 cv
243.846 300.777 244.07 300.73 244.283 300.637 cv
244.495 300.543 244.68 300.408 244.839 300.232 cv
244.997 300.057 245.121 299.836 245.211 299.574 cv
245.301 299.311 245.346 299.012 245.346 298.672 cv
245.346 298.334 245.301 298.035 245.211 297.771 cv
245.121 297.51 244.997 297.289 244.839 297.107 cv
244.68 296.928 244.495 296.791 244.283 296.697 cv
244.07 296.605 243.846 296.559 243.608 296.559 cv
243.371 296.559 243.146 296.605 242.934 296.697 cv
242.722 296.791 242.536 296.928 242.378 297.107 cv
242.22 297.289 242.096 297.51 242.006 297.771 cv
241.916 298.035 241.871 298.334 241.871 298.672 cv
241.871 299.012 241.916 299.311 242.006 299.574 cv
cp
241.073 297.523 mo
241.188 297.168 241.36 296.857 241.591 296.596 cv
241.821 296.334 242.104 296.127 242.443 295.975 cv
242.781 295.824 243.17 295.748 243.608 295.748 cv
244.055 295.748 244.444 295.824 244.779 295.975 cv
245.113 296.127 245.396 296.334 245.626 296.596 cv
245.856 296.857 246.029 297.168 246.145 297.523 cv
246.259 297.879 246.316 298.264 246.316 298.672 cv
246.316 299.082 246.259 299.465 246.145 299.816 cv
246.029 300.17 245.856 300.477 245.626 300.738 cv
245.396 301.002 245.113 301.207 244.779 301.354 cv
244.444 301.502 244.055 301.576 243.608 301.576 cv
243.17 301.576 242.781 301.502 242.443 301.354 cv
242.104 301.207 241.821 301.002 241.591 300.738 cv
241.36 300.477 241.188 300.17 241.073 299.816 cv
240.958 299.465 240.9 299.082 240.9 298.672 cv
240.9 298.264 240.958 297.879 241.073 297.523 cv
cp
f
254.7 295.879 mo
254.7 297.055 li
254.722 297.055 li
254.944 296.602 255.218 296.268 255.542 296.051 cv
255.865 295.836 256.275 295.734 256.771 295.748 cv
256.771 296.721 li
256.405 296.721 256.092 296.77 255.833 296.871 cv
255.574 296.971 255.365 297.119 255.207 297.313 cv
255.049 297.508 254.934 297.742 254.862 298.02 cv
254.79 298.297 254.754 298.615 254.754 298.975 cv
254.754 301.457 li
253.837 301.457 li
253.837 295.879 li
254.7 295.879 li
cp
f
266.649 300.523 mo
266.861 300.396 267.033 300.232 267.162 300.027 cv
267.292 299.822 267.387 299.59 267.448 299.33 cv
267.509 299.072 267.54 298.813 267.54 298.555 cv
267.54 298.311 267.511 298.068 267.453 297.832 cv
267.396 297.594 267.304 297.379 267.179 297.189 cv
267.053 296.998 266.889 296.846 266.688 296.73 cv
266.486 296.615 266.241 296.559 265.954 296.559 cv
265.659 296.559 265.407 296.613 265.198 296.725 cv
264.989 296.836 264.819 296.986 264.686 297.174 cv
264.553 297.359 264.456 297.576 264.395 297.82 cv
264.333 298.064 264.303 298.32 264.303 298.586 cv
264.303 298.838 264.328 299.09 264.378 299.342 cv
264.429 299.594 264.515 299.822 264.638 300.027 cv
264.76 300.232 264.922 300.396 265.123 300.523 cv
265.324 300.648 265.576 300.713 265.878 300.713 cv
266.181 300.713 266.438 300.648 266.649 300.523 cv
cp
267.82 303.031 mo
267.403 303.484 266.748 303.711 265.856 303.711 cv
265.598 303.711 265.333 303.684 265.063 303.625 cv
264.794 303.568 264.549 303.475 264.33 303.346 cv
264.11 303.215 263.929 303.047 263.785 302.838 cv
263.641 302.629 263.562 302.373 263.548 302.072 cv
264.465 302.072 li
264.472 302.236 264.524 302.377 264.621 302.492 cv
264.719 302.607 264.837 302.701 264.978 302.773 cv
265.117 302.846 265.271 302.896 265.436 302.93 cv
265.602 302.961 265.76 302.979 265.91 302.979 cv
266.213 302.979 266.468 302.926 266.677 302.822 cv
266.885 302.717 267.058 302.574 267.194 302.391 cv
267.331 302.207 267.43 301.984 267.491 301.727 cv
267.553 301.467 267.583 301.184 267.583 300.873 cv
267.583 300.508 li
267.562 300.508 li
267.403 300.852 267.164 301.105 266.844 301.268 cv
266.523 301.43 266.184 301.51 265.824 301.51 cv
265.407 301.51 265.044 301.436 264.734 301.283 cv
264.425 301.133 264.166 300.93 263.958 300.674 cv
263.749 300.42 263.593 300.121 263.488 299.779 cv
263.384 299.438 263.332 299.076 263.332 298.693 cv
263.332 298.363 263.375 298.023 263.461 297.674 cv
263.548 297.326 263.691 297.01 263.893 296.725 cv
264.094 296.441 264.36 296.207 264.691 296.023 cv
265.022 295.84 265.429 295.748 265.91 295.748 cv
266.263 295.748 266.587 295.826 266.882 295.98 cv
267.177 296.135 267.406 296.367 267.572 296.676 cv
267.583 296.676 li
267.583 295.879 li
268.446 295.879 li
268.446 300.982 li
268.446 301.895 268.237 302.578 267.82 303.031 cv
cp
f
49.0938 297.77 mo
61.1514 297.77 li
61.3359 297.955 li
61.3359 302.188 li
61.1514 302.373 li
49.0938 302.373 li
48.9092 302.188 li
48.9092 297.955 li
49.0938 297.77 li
cp
49.0938 290.039 mo
58.0215 290.039 li
58.2061 290.223 li
58.2061 294.549 li
58.0215 294.732 li
49.0938 294.732 li
48.9092 294.549 li
48.9092 290.223 li
49.0938 290.039 li
cp
45.9639 287 mo
45.9639 305.41 li
64.373 305.41 li
64.373 294.732 li
61.4277 294.732 li
61.3047 294.732 61.2441 294.641 61.2441 294.457 cv
61.3359 287 li
45.9639 287 li
cp
39.9805 280.926 mo
70.2646 280.926 li
70.4487 281.109 li
70.4487 311.395 li
70.2646 311.578 li
39.9805 311.578 li
39.7964 311.395 li
39.7964 281.109 li
39.9805 280.926 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
82.0776 297.77 mo
94.1353 297.77 li
94.3198 297.955 li
94.3198 302.188 li
94.1353 302.373 li
82.0776 302.373 li
81.8921 302.188 li
81.8921 297.955 li
82.0776 297.77 li
cp
82.0776 290.039 mo
91.0054 290.039 li
91.1899 290.223 li
91.1899 294.549 li
91.0054 294.732 li
82.0776 294.732 li
81.8921 294.549 li
81.8921 290.223 li
82.0776 290.039 li
cp
78.9468 287 mo
78.9468 305.41 li
97.3569 305.41 li
97.3569 294.732 li
94.4116 294.732 li
94.2896 294.732 94.228 294.641 94.228 294.457 cv
94.3198 287 li
78.9468 287 li
cp
72.9644 280.926 mo
103.249 280.926 li
103.432 281.109 li
103.432 311.395 li
103.249 311.578 li
72.9644 311.578 li
72.7803 311.395 li
72.7803 281.109 li
72.9644 280.926 li
cp
f
2.89293 lw
42.6372 296.299 mo
28.751 296.299 li
28.751 304.688 li
@
23.1099 309.027 mo
23.1099 306.072 25.5063 303.676 28.4619 303.676 cv
31.418 303.676 33.814 306.072 33.814 309.027 cv
33.814 311.982 31.418 314.379 28.4619 314.379 cv
25.5063 314.379 23.1099 311.982 23.1099 309.027 cv
cp
0 0.992157 1 0 cmyk
f
23.1099 309.027 mo
23.1099 306.072 25.5063 303.676 28.4619 303.676 cv
31.418 303.676 33.814 306.072 33.814 309.027 cv
33.814 311.982 31.418 314.379 28.4619 314.379 cv
25.5063 314.379 23.1099 311.982 23.1099 309.027 cv
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
101.802 296.877 mo
115.688 296.877 li
115.688 288.486 li
@
121.328 284.146 mo
121.328 287.104 118.931 289.5 115.977 289.5 cv
113.021 289.5 110.624 287.104 110.624 284.146 cv
110.624 281.191 113.021 278.795 115.977 278.795 cv
118.931 278.795 121.328 281.191 121.328 284.146 cv
cp
0 0.992157 1 0 cmyk
f
121.328 284.146 mo
121.328 287.104 118.931 289.5 115.977 289.5 cv
113.021 289.5 110.624 287.104 110.624 284.146 cv
110.624 281.191 113.021 278.795 115.977 278.795 cv
118.931 278.795 121.328 281.191 121.328 284.146 cv
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
283.965 411.279 mo
0.5 411.279 li
0.5 354.586 li
283.965 354.586 li
283.965 411.279 li
cp
f
135.942 385.357 mo
135.874 385.109 135.77 384.889 135.629 384.695 cv
135.489 384.5 135.31 384.346 135.09 384.23 cv
134.87 384.115 134.613 384.059 134.318 384.059 cv
134.009 384.059 133.746 384.119 133.53 384.242 cv
133.314 384.363 133.139 384.523 133.002 384.721 cv
132.865 384.92 132.767 385.145 132.705 385.396 cv
132.645 385.648 132.613 385.902 132.613 386.162 cv
132.613 386.436 132.646 386.699 132.711 386.955 cv
132.775 387.211 132.878 387.436 133.019 387.629 cv
133.158 387.824 133.34 387.98 133.563 388.1 cv
133.786 388.217 134.056 388.277 134.372 388.277 cv
134.688 388.277 134.953 388.215 135.165 388.094 cv
135.378 387.971 135.549 387.809 135.678 387.607 cv
135.808 387.406 135.9 387.176 135.958 386.918 cv
136.016 386.658 136.045 386.393 136.045 386.119 cv
136.045 385.859 136.011 385.605 135.942 385.357 cv
cp
132.646 381.252 mo
132.646 384.133 li
132.668 384.133 li
132.818 383.824 133.056 383.6 133.38 383.459 cv
133.703 383.318 134.06 383.248 134.448 383.248 cv
134.88 383.248 135.255 383.328 135.575 383.486 cv
135.896 383.645 136.161 383.857 136.374 384.129 cv
136.586 384.398 136.746 384.709 136.854 385.061 cv
136.962 385.414 137.016 385.787 137.016 386.184 cv
137.016 386.58 136.964 386.953 136.859 387.307 cv
136.755 387.658 136.597 387.965 136.385 388.229 cv
136.173 388.49 135.906 388.697 135.586 388.85 cv
135.266 389 134.894 389.076 134.47 389.076 cv
134.333 389.076 134.18 389.061 134.011 389.031 cv
133.842 389.004 133.675 388.957 133.509 388.893 cv
133.344 388.826 133.188 388.738 133.04 388.627 cv
132.893 388.516 132.769 388.377 132.668 388.213 cv
132.646 388.213 li
132.646 388.957 li
131.729 388.957 li
131.729 381.252 li
132.646 381.252 li
cp
0 0.992157 1 0 cmyk
f
145.54 381.252 mo
145.54 388.957 li
144.622 388.957 li
144.622 381.252 li
145.54 381.252 li
cp
f
154.409 383.379 mo
154.409 388.957 li
153.491 388.957 li
153.491 383.379 li
154.409 383.379 li
cp
153.491 382.375 mo
153.491 381.252 li
154.409 381.252 li
154.409 382.375 li
153.491 382.375 li
cp
f
166.553 385.357 mo
166.484 385.109 166.38 384.889 166.239 384.695 cv
166.1 384.5 165.92 384.346 165.7 384.23 cv
165.48 384.115 165.224 384.059 164.929 384.059 cv
164.619 384.059 164.356 384.119 164.141 384.242 cv
163.925 384.363 163.749 384.523 163.612 384.721 cv
163.476 384.92 163.377 385.145 163.315 385.396 cv
163.255 385.648 163.224 385.902 163.224 386.162 cv
163.224 386.436 163.256 386.699 163.321 386.955 cv
163.386 387.211 163.488 387.436 163.629 387.629 cv
163.769 387.824 163.95 387.98 164.174 388.1 cv
164.396 388.217 164.666 388.277 164.982 388.277 cv
165.299 388.277 165.563 388.215 165.775 388.094 cv
165.988 387.971 166.159 387.809 166.288 387.607 cv
166.418 387.406 166.511 387.176 166.568 386.918 cv
166.626 386.658 166.655 386.393 166.655 386.119 cv
166.655 385.859 166.621 385.605 166.553 385.357 cv
cp
163.256 383.379 mo
163.256 384.133 li
163.278 384.133 li
163.429 383.824 163.666 383.6 163.99 383.459 cv
164.313 383.318 164.67 383.248 165.059 383.248 cv
165.49 383.248 165.865 383.328 166.186 383.486 cv
166.506 383.645 166.771 383.857 166.984 384.129 cv
167.196 384.398 167.356 384.709 167.464 385.061 cv
167.572 385.414 167.626 385.787 167.626 386.184 cv
167.626 386.58 167.574 386.953 167.47 387.307 cv
167.365 387.658 167.207 387.965 166.995 388.229 cv
166.783 388.49 166.517 388.697 166.196 388.85 cv
165.876 389 165.504 389.076 165.08 389.076 cv
164.943 389.076 164.79 389.061 164.621 389.031 cv
164.452 389.004 164.285 388.957 164.119 388.893 cv
163.954 388.826 163.798 388.738 163.65 388.627 cv
163.503 388.516 163.379 388.377 163.278 388.213 cv
163.256 388.213 li
163.256 391.082 li
162.339 391.082 li
162.339 383.379 li
163.256 383.379 li
cp
f
188.898 385.357 mo
188.83 385.109 188.726 384.889 188.585 384.695 cv
188.445 384.5 188.266 384.346 188.046 384.23 cv
187.826 384.115 187.569 384.059 187.274 384.059 cv
186.965 384.059 186.702 384.119 186.486 384.242 cv
186.271 384.363 186.095 384.523 185.958 384.721 cv
185.821 384.92 185.723 385.145 185.661 385.396 cv
185.601 385.648 185.569 385.902 185.569 386.162 cv
185.569 386.436 185.602 386.699 185.667 386.955 cv
185.731 387.211 185.834 387.436 185.975 387.629 cv
186.114 387.824 186.296 387.98 186.52 388.1 cv
186.742 388.217 187.012 388.277 187.328 388.277 cv
187.645 388.277 187.909 388.215 188.121 388.094 cv
188.334 387.971 188.505 387.809 188.634 387.607 cv
188.764 387.406 188.856 387.176 188.914 386.918 cv
188.972 386.658 189.001 386.393 189.001 386.119 cv
189.001 385.859 188.967 385.605 188.898 385.357 cv
cp
185.602 381.252 mo
185.602 384.133 li
185.624 384.133 li
185.774 383.824 186.012 383.6 186.336 383.459 cv
186.659 383.318 187.016 383.248 187.404 383.248 cv
187.836 383.248 188.211 383.328 188.531 383.486 cv
188.852 383.645 189.117 383.857 189.33 384.129 cv
189.542 384.398 189.702 384.709 189.81 385.061 cv
189.918 385.414 189.972 385.787 189.972 386.184 cv
189.972 386.58 189.92 386.953 189.815 387.307 cv
189.711 387.658 189.553 387.965 189.341 388.229 cv
189.129 388.49 188.862 388.697 188.542 388.85 cv
188.222 389 187.85 389.076 187.426 389.076 cv
187.289 389.076 187.136 389.061 186.967 389.031 cv
186.798 389.004 186.631 388.957 186.465 388.893 cv
186.3 388.826 186.144 388.738 185.996 388.627 cv
185.849 388.516 185.725 388.377 185.624 388.213 cv
185.602 388.213 li
185.602 388.957 li
184.685 388.957 li
184.685 381.252 li
185.602 381.252 li
cp
f
198.328 387.074 mo
198.418 387.336 198.542 387.557 198.7 387.732 cv
198.858 387.908 199.044 388.043 199.256 388.137 cv
199.469 388.23 199.693 388.277 199.931 388.277 cv
200.168 388.277 200.393 388.23 200.605 388.137 cv
200.817 388.043 201.002 387.908 201.161 387.732 cv
201.319 387.557 201.443 387.336 201.533 387.074 cv
201.623 386.811 201.668 386.512 201.668 386.172 cv
201.668 385.834 201.623 385.535 201.533 385.271 cv
201.443 385.01 201.319 384.789 201.161 384.607 cv
201.002 384.428 200.817 384.291 200.605 384.197 cv
200.393 384.105 200.168 384.059 199.931 384.059 cv
199.693 384.059 199.469 384.105 199.256 384.197 cv
199.044 384.291 198.858 384.428 198.7 384.607 cv
198.542 384.789 198.418 385.01 198.328 385.271 cv
198.238 385.535 198.193 385.834 198.193 386.172 cv
198.193 386.512 198.238 386.811 198.328 387.074 cv
cp
197.396 385.023 mo
197.51 384.668 197.683 384.357 197.913 384.096 cv
198.144 383.834 198.427 383.627 198.766 383.475 cv
199.104 383.324 199.492 383.248 199.931 383.248 cv
200.377 383.248 200.767 383.324 201.102 383.475 cv
201.436 383.627 201.718 383.834 201.948 384.096 cv
202.179 384.357 202.352 384.668 202.467 385.023 cv
202.581 385.379 202.639 385.764 202.639 386.172 cv
202.639 386.582 202.581 386.965 202.467 387.316 cv
202.352 387.67 202.179 387.977 201.948 388.238 cv
201.718 388.502 201.436 388.707 201.102 388.854 cv
200.767 389.002 200.377 389.076 199.931 389.076 cv
199.492 389.076 199.104 389.002 198.766 388.854 cv
198.427 388.707 198.144 388.502 197.913 388.238 cv
197.683 387.977 197.51 387.67 197.396 387.316 cv
197.28 386.965 197.223 386.582 197.223 386.172 cv
197.223 385.764 197.28 385.379 197.396 385.023 cv
cp
f
209.75 383.379 mo
210.926 383.379 li
212.265 385.332 li
213.656 383.379 li
214.757 383.379 li
212.836 385.945 li
214.994 388.957 li
213.818 388.957 li
212.265 386.648 li
210.71 388.957 li
209.599 388.957 li
211.692 386.021 li
209.75 383.379 li
cp
f
223.657 387.76 mo
223.657 388.957 li
222.46 388.957 li
222.46 387.76 li
223.657 387.76 li
cp
f
242.006 387.074 mo
242.096 387.336 242.22 387.557 242.378 387.732 cv
242.536 387.908 242.722 388.043 242.934 388.137 cv
243.146 388.23 243.371 388.277 243.608 388.277 cv
243.846 388.277 244.07 388.23 244.283 388.137 cv
244.495 388.043 244.68 387.908 244.839 387.732 cv
244.997 387.557 245.121 387.336 245.211 387.074 cv
245.301 386.811 245.346 386.512 245.346 386.172 cv
245.346 385.834 245.301 385.535 245.211 385.271 cv
245.121 385.01 244.997 384.789 244.839 384.607 cv
244.68 384.428 244.495 384.291 244.283 384.197 cv
244.07 384.105 243.846 384.059 243.608 384.059 cv
243.371 384.059 243.146 384.105 242.934 384.197 cv
242.722 384.291 242.536 384.428 242.378 384.607 cv
242.22 384.789 242.096 385.01 242.006 385.271 cv
241.916 385.535 241.871 385.834 241.871 386.172 cv
241.871 386.512 241.916 386.811 242.006 387.074 cv
cp
241.073 385.023 mo
241.188 384.668 241.36 384.357 241.591 384.096 cv
241.821 383.834 242.104 383.627 242.443 383.475 cv
242.781 383.324 243.17 383.248 243.608 383.248 cv
244.055 383.248 244.444 383.324 244.779 383.475 cv
245.113 383.627 245.396 383.834 245.626 384.096 cv
245.856 384.357 246.029 384.668 246.145 385.023 cv
246.259 385.379 246.316 385.764 246.316 386.172 cv
246.316 386.582 246.259 386.965 246.145 387.316 cv
246.029 387.67 245.856 387.977 245.626 388.238 cv
245.396 388.502 245.113 388.707 244.779 388.854 cv
244.444 389.002 244.055 389.076 243.608 389.076 cv
243.17 389.076 242.781 389.002 242.443 388.854 cv
242.104 388.707 241.821 388.502 241.591 388.238 cv
241.36 387.977 241.188 387.67 241.073 387.316 cv
240.958 386.965 240.9 386.582 240.9 386.172 cv
240.9 385.764 240.958 385.379 241.073 385.023 cv
cp
f
254.7 383.379 mo
254.7 384.555 li
254.722 384.555 li
254.944 384.102 255.218 383.768 255.542 383.551 cv
255.865 383.336 256.275 383.234 256.771 383.248 cv
256.771 384.221 li
256.405 384.221 256.092 384.27 255.833 384.371 cv
255.574 384.471 255.365 384.619 255.207 384.813 cv
255.049 385.008 254.934 385.242 254.862 385.52 cv
254.79 385.797 254.754 386.115 254.754 386.475 cv
254.754 388.957 li
253.837 388.957 li
253.837 383.379 li
254.7 383.379 li
cp
f
266.649 388.023 mo
266.861 387.896 267.033 387.732 267.162 387.527 cv
267.292 387.322 267.387 387.09 267.448 386.83 cv
267.509 386.572 267.54 386.313 267.54 386.055 cv
267.54 385.811 267.511 385.568 267.453 385.332 cv
267.396 385.094 267.304 384.879 267.179 384.689 cv
267.053 384.498 266.889 384.346 266.688 384.23 cv
266.486 384.115 266.241 384.059 265.954 384.059 cv
265.659 384.059 265.407 384.113 265.198 384.225 cv
264.989 384.336 264.819 384.486 264.686 384.674 cv
264.553 384.859 264.456 385.076 264.395 385.32 cv
264.333 385.564 264.303 385.82 264.303 386.086 cv
264.303 386.338 264.328 386.59 264.378 386.842 cv
264.429 387.094 264.515 387.322 264.638 387.527 cv
264.76 387.732 264.922 387.896 265.123 388.023 cv
265.324 388.148 265.576 388.213 265.878 388.213 cv
266.181 388.213 266.438 388.148 266.649 388.023 cv
cp
267.82 390.531 mo
267.403 390.984 266.748 391.211 265.856 391.211 cv
265.598 391.211 265.333 391.184 265.063 391.125 cv
264.794 391.068 264.549 390.975 264.33 390.846 cv
264.11 390.715 263.929 390.547 263.785 390.338 cv
263.641 390.129 263.562 389.873 263.548 389.572 cv
264.465 389.572 li
264.472 389.736 264.524 389.877 264.621 389.992 cv
264.719 390.107 264.837 390.201 264.978 390.273 cv
265.117 390.346 265.271 390.396 265.436 390.43 cv
265.602 390.461 265.76 390.479 265.91 390.479 cv
266.213 390.479 266.468 390.426 266.677 390.322 cv
266.885 390.217 267.058 390.074 267.194 389.891 cv
267.331 389.707 267.43 389.484 267.491 389.227 cv
267.553 388.967 267.583 388.684 267.583 388.373 cv
267.583 388.008 li
267.562 388.008 li
267.403 388.352 267.164 388.605 266.844 388.768 cv
266.523 388.93 266.184 389.01 265.824 389.01 cv
265.407 389.01 265.044 388.936 264.734 388.783 cv
264.425 388.633 264.166 388.43 263.958 388.174 cv
263.749 387.92 263.593 387.621 263.488 387.279 cv
263.384 386.938 263.332 386.576 263.332 386.193 cv
263.332 385.863 263.375 385.523 263.461 385.174 cv
263.548 384.826 263.691 384.51 263.893 384.225 cv
264.094 383.941 264.36 383.707 264.691 383.523 cv
265.022 383.34 265.429 383.248 265.91 383.248 cv
266.263 383.248 266.587 383.326 266.882 383.48 cv
267.177 383.635 267.406 383.867 267.572 384.176 cv
267.583 384.176 li
267.583 383.379 li
268.446 383.379 li
268.446 388.482 li
268.446 389.395 268.237 390.078 267.82 390.531 cv
cp
f
49.0938 385.27 mo
61.1514 385.27 li
61.3359 385.455 li
61.3359 389.688 li
61.1514 389.873 li
49.0938 389.873 li
48.9092 389.688 li
48.9092 385.455 li
49.0938 385.27 li
cp
49.0938 377.539 mo
58.0215 377.539 li
58.2061 377.723 li
58.2061 382.049 li
58.0215 382.232 li
49.0938 382.232 li
48.9092 382.049 li
48.9092 377.723 li
49.0938 377.539 li
cp
45.9639 374.5 mo
45.9639 392.91 li
64.373 392.91 li
64.373 382.232 li
61.4277 382.232 li
61.3047 382.232 61.2441 382.141 61.2441 381.957 cv
61.3359 374.5 li
45.9639 374.5 li
cp
39.9805 368.426 mo
70.2646 368.426 li
70.4487 368.609 li
70.4487 398.895 li
70.2646 399.078 li
39.9805 399.078 li
39.7964 398.895 li
39.7964 368.609 li
39.9805 368.426 li
cp
0 0 0 0 cmyk
f
82.0776 385.27 mo
94.1353 385.27 li
94.3198 385.455 li
94.3198 389.688 li
94.1353 389.873 li
82.0776 389.873 li
81.8921 389.688 li
81.8921 385.455 li
82.0776 385.27 li
cp
82.0776 377.539 mo
91.0054 377.539 li
91.1899 377.723 li
91.1899 382.049 li
91.0054 382.232 li
82.0776 382.232 li
81.8921 382.049 li
81.8921 377.723 li
82.0776 377.539 li
cp
78.9468 374.5 mo
78.9468 392.91 li
97.3569 392.91 li
97.3569 382.232 li
94.4116 382.232 li
94.2896 382.232 94.228 382.141 94.228 381.957 cv
94.3198 374.5 li
78.9468 374.5 li
cp
72.9644 368.426 mo
103.249 368.426 li
103.432 368.609 li
103.432 398.895 li
103.249 399.078 li
72.9644 399.078 li
72.7803 398.895 li
72.7803 368.609 li
72.9644 368.426 li
cp
f
27.3047 392.188 mo
27.3047 382.352 li
42.6377 382.352 li
42.6377 385.245 li
30.1963 385.243 li
30.1963 392.188 li
27.3047 392.188 li
27.3047 392.188 li
cp
f
23.1099 396.527 mo
23.1099 393.572 25.5063 391.176 28.4619 391.176 cv
31.418 391.176 33.814 393.572 33.814 396.527 cv
33.814 399.482 31.418 401.879 28.4619 401.879 cv
25.5063 401.879 23.1099 399.482 23.1099 396.527 cv
cp
0 0.992157 1 0 cmyk
f
24.5566 396.527 mo
24.5591 398.682 26.3057 400.428 28.4614 400.433 cv
28.4614 400.433 li
30.6191 400.428 32.3638 398.682 32.3677 396.527 cv
32.3677 396.527 li
32.3638 394.37 30.6191 392.625 28.4614 392.621 cv
28.4614 392.621 li
26.3057 392.625 24.5591 394.37 24.5566 396.527 cv
24.5566 396.527 li
24.5566 396.527 li
cp
21.6631 396.527 mo
21.6631 392.772 24.7056 389.729 28.4614 389.728 cv
28.4614 389.728 li
32.2168 389.729 35.2593 392.772 35.2593 396.527 cv
35.2593 396.527 li
35.2593 400.281 32.2168 403.324 28.4614 403.324 cv
28.4614 403.324 li
24.7056 403.324 21.6631 400.281 21.6631 396.527 cv
21.6631 396.527 li
cp
0 0 0 0 cmyk
f
101.801 385.822 mo
101.801 382.929 li
114.241 382.929 li
114.241 375.985 li
117.132 375.985 li
117.132 385.822 li
101.801 385.822 li
101.801 385.822 li
cp
101.801 385.822 mo
101.801 385.825 li
101.801 385.822 li
101.801 385.822 li
cp
f
121.328 371.646 mo
121.328 374.604 118.931 377 115.977 377 cv
113.021 377 110.624 374.604 110.624 371.646 cv
110.624 368.691 113.021 366.295 115.977 366.295 cv
118.931 366.295 121.328 368.691 121.328 371.646 cv
cp
0 0.992157 1 0 cmyk
f
112.07 371.646 mo
112.075 373.804 113.82 375.549 115.976 375.552 cv
115.976 375.552 li
118.129 375.549 119.877 373.804 119.881 371.646 cv
119.881 371.646 li
119.877 369.49 118.131 367.745 115.976 367.74 cv
115.976 367.74 li
113.82 367.745 112.075 369.49 112.07 371.646 cv
112.07 371.646 li
cp
109.177 371.646 mo
109.179 367.891 112.221 364.85 115.976 364.847 cv
115.976 364.847 li
119.73 364.85 122.772 367.891 122.774 371.646 cv
122.774 371.646 li
122.772 375.403 119.73 378.444 115.976 378.444 cv
115.976 378.444 li
112.221 378.444 109.179 375.403 109.177 371.646 cv
109.177 371.646 li
cp
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.0%%For: (jameson otton) ()%%Title: (blip stickers page.eps)%%CreationDate: 9/16/09 3:59 PM%AI9_DataStream%Gb",K$Y'gipA"Xqn/]$RhR$GqmUKjP=07ac<Fb\?CMgbe-%R=@!\"\_pXB/gA'XF++Db4=OHS,s%eDZ$hWN,LZF*[OSdmfp_-q3U%kO!;gZ>pfHZAMXba%9u\lau$FmWc07,u@a%%4a`3(hapkFJoUi0pO.C)>%\QpJ6j^K?:IIE5+IUf8'=`BRIEss3MgOT<o-fPBQc"%DSJD`?`s(Vqeo,3eVEuqX4QgKL83f&UhhL]_W!N(onP9oJaW<%_%-eJrR4O9)0G:i*Zi5>A,IHp6a(^GP6i??1PUERrQ.irI7.t>%K1_lD+G.?T8Q?bYMa40h]Z>[Y1L^+5lf[*AhKUej:O9pp0@sX&l9iJQlul1Y%#9[I%_/[XLZM#"TRGOd0V7C='tg&A0>e&Sb"keE%0W%UB*)L"0hHp+49H?C$m1B<Zc-F&?f24O\/"5VRZNa/:n`M5I.h/+?[XGYnr+h*6;YNWSpnZf=FG]$-$7jIb1R065C?DX8%ufPW%PuO_./nYn4-V6<-1]b`[eHFjn\TDrNot'U1K1PA'#*\$@M!=f<\'G+Q*DL^(rr^QE.]fEp8=e%J,tbQ'c_$j'];$GP]a577:s!s4%-c8]g:X$;C[/+X(#+oT$RiB"RNt/c8ORuu]'\NT["nn_[:QK_R+1e5P*A)X0oV=Qn0mlQ;Dhk#=)]^(o$98pB=ZHYQAKakod2lrf%TK!&a+=!YY4Ths;3pIaZ#.H0jadWO1?7-QN,V#_iMbpUQhZ$:K1QJ]paeV#&3/>nNqNH;s+K.EUjU#65SK@5/g-)*/#/UtKjV1Oj%J`%%Wm7A8Z9Tld\?2)ZcmDB&a/:a?P`o"eomjuB6ot!EK)#qT1IN$9%BcQ`BXVUWm?H-A'A+6$DfZG%IAPB-N@qHUeaYI[r_%67b%12N4efEu!EDerFWA#jnrHe.NX8\L.$=tTZZeM7>U[p&QPX2TK(A&al*i>MGilm\RIEG5f1@k1dtrl/!K-<VdIL+C-ufEPE1^N&'r%$1<^e_Vb+u=+n>.,c269N%;d&\8M5&:g=[ZajfDIYnaDLIq+sK$Xpmo`11Pc<+IK;Dsk^tBC$L[`f4V$b_8R8Jq(!>Xq-$B8BaA+%21NUc_nXh2f-_PMWc2<M+9'9(\2rb:ras@dK"nQ*Xq-"<(Kj@tXunqo-o-=?Mu3k,(dFlY[UQfS?$PIi4^u]]n[puin;CMl&%9=)%M.GW2YW&bS5K3<SDf!D`NU()CE*rO&D/aWo/Wjks*Msh&^sXei/@$JJL7#<CYUkT:#Z$lVN#bifk@M4Jk/%^5)rls\A9K#bqt'"K%_jIcBZ8=A`R5R/oMgecWF)C)(V(L*G>dK)Y\a6YEMqmLdLV7aH&l$]_/6'pjJ/AS=Z$/qP_,]uiH$NZ_)281ji*WpMU&BflrZqNe%5>(JCr%J)7[^9X;rg/+tK\tsBq'So4I@A=6WVresq31_0s3tf]56&ejV6*4>+o,LEBf>d8rg/*9pVZ\EH&'/&YP__`nR#C*V!:R]%)I_'/l)<-g<%DfC@f%co[aGG50V(W=^sac^B)&\4*+LML;::j1+!kQ.ciZ`=m_ncJMujgfG4PhrH6]As>"Jhq!["\,cK]DMhEju`%SJr]u*ll9Y=2]U[H1;o8Klbl2Mrr$AU4i&s&q!3:i(qMU@t,O+HfM_;+\enXNgE'<?8r/7cQi$`Lg)`*RPX*]WgX93O[aF!DY@A/%(aF^lgj$s+)+T8Jl?Q@!QUf+O7&p'(0pXp_j""4=4o#iQ8F'#^<$+c(&M@rhLq&g"*gS?/9M6E?<]83(R]E=O<?-q$U9u3\d0^/'%&L(2:;0$JN<<JYgl)GaCV5^gjSA:HGA!V0m1It`.jYU]rNq/NN%e/WQ-hr17G,m:g8h'O76gk$4)>l&Ds"3s`Ia\QYEg0sMPG/4I%4(P:d8J-RC%#rOan?Wu`G^[qkkJigH:D>KXoJa`$V6<+1==*;P?pc[e'r@2HSJ;$\<1EUga]jD)qOHH]Du1#]4n]1Lk$f`Zfa(-t%#ppE<6scU:LTJAr5sEs;.HA2`AU[@gkMFboJX!DLdgo98,VQRR:6`u1Pc;edQI!X<M#[#nq0T/*&^Q6)TVU_9MdJ3Wat7W8pkJA`%5?Y9o/l5_F3]jsT$TVm5Zg4-Q*S8Od-#IS*D&(5jAR.')pIMSgOXMa7-nU=QI/a%7/X\\u5sDd1Rq\<m;l0Qgk-`Cf8-N<WauRA@%5"s:_4]Ad[nsV+kSXF;P*Sm>Z?J5!l:PoR:%QJYA*#>V;1bol-/&%&.bLj.<cKF82fssP+>>,]Chn8WfVTYEL>Cc$/4Jo*;o:i;m%%euJWZ0P/1I\%KmNO)eLUXs1Q2=bIt*+u=i<%ocIc+)ian7c=mfQ*HE.DNa1I;7gu0=9Z'.!;l'i,srHbc,*>s"h"ncR?.3b;:^Q%/FQRT;_Tg\Hcu6q9*quHCgG_Go?@-4Ptpq'isGFI//u+e*9*bLA"&>=Y,5.FMs)AMR%o?0'#oH=]_E0sAatHABNpiKZgjLB5`uK&%/_7r@,qVB2)b4];41Pm]s0)\T"(I2A''%cK2`*nP[h7VZEiP".;:a=ZdK2-C7$.&5IY67T@U+]W34d<o-'k,cO[LLs+_(&bG8Q)=%=`KW4%W#A%Do1u*'FlrI7OuP%r!VuYN/]JB4=<cV;]BA3=%%TjVc>u4@bXtf6Io26W3TF,])Q;p3<JcN8TI#V#FT>ur8:^rR_PKX%J^=APM"@!4rj+9RX8bCsDtX45lhDQKkO1&"s)[mG.tp+7.;'DSg2>PfS3DiTe6]R>0l]fh"Z<`tU*]A&Hrg7'g*qsh=;);g9BHLp%lq9l6;CgcclbYiQ`C0gHR,M0VCh>t^?Xf7U1IB>@;p4;pkK]X(:8(F(SACuB$75P3S4gjfW]>G>[_:\,;/b-O<RVp@L>b[#_N@>G%p%(;qdV<IUQOr&Z7Z1QNL8)Y_h[GjtQ1b0?Vq@8kh%K'V>4OQ5E#4MrfYfX7f!4N=N_<Sia/jEgFptI=W@Mc1C-4_sXIZcMQDhg;%aep-SG.':s3JfgDl>EG-[E':XIR\BhZ&]jKa#FBSFoEB\;FSZ8`AD]hPf6YGg)M[Rq_tC@ckUm@]r*8]AWF(0N!QVUcS=BjBQ4fT%7h<k-Dpl!&la6@(k@R;p'X@2,bG[S;jUhK-FbaGFeBbpO=j5dXs,B"/_T$PsLHKD4,4-7037g>tS<2mM/WRs&e9]*nd-Hp1\;oE2%<^#gRRl.0[>jT4D;_P=5EOVXB>ie68cl)-LG__Y1dgT`J=>:Lo5bqPhZC9J5QsR$$7>jX@&^*."?!=j6;Q;;KYLc#Il;a.o.)uGQ%&=^M@.!*VPglcZdUrnCr=,f1\B''l\*Q9Lc?cRF;%_'+4S/5L_L=%sjS&DM68N+F1j]HPXKKo%Zf$p.sEhI#[4R<gQDqK)44"U0A%Geq%Q-eO>7(].*)o@fkUWa+kpoq^)L#8Ruu:@_Y\U>3u=iNX+f\RLtIHK:YNVhS.XF)$LiYS:Mnh>EEl$@]-iATKfPW:Cq[d7rf7%Y@Kb0S`=gc,Y4q7o30`A[Fcs$#+j:A[%h3?4NNn)2Ho'SS=/AD,A?/JplrbND;:kf<l?8Q;EK$,lYN8%f`8YL,ZXE0(>AV2e^bIP%FX""mJgJ]fUY-TJ0#k"o?H;X:c\Kchc+.OXQ91IH,K+Ve[^MWW%dlLOX8;<&%gn8,=8LT`fH21*BC7X*ZJ1q?T()G7]moYP&6ef4%\ER;qSj#a'4R8WV7h8),e!#Q>K44"J[56V(QCkQ48**ph46VX,QS"0RQFR5cGC&_h%'-a^-eHZbn&5RY1E;^Qmeu"uT0R#saC">+%p*SVW"7>O:55qKc)kE"MatJLe^;Fmc,DW-"',93)`Z3='_r0d0.=H@dgL,3%l=dJDZU!iq1VedH4F4]sn+R;^m?==%rk&R"I-tV+%cRpnSX5=t@oD\A_rY?'g&''%7IW'V(9;;`;efIP3qu,sNL[h0e]R7(UpL#sAp;f_Mk29OS5<SItFHH3h;uX$b3]V+lACEh_ciFS!%IEoqo4?gS;F625Qp.:UtSK,&9j_b)Rm^EGg;46?[82NOR^L5Bb9bPA!T_]*77c3iTDkCMQ<Ok$W5(52#GC!Y6Dr]2s0&aU-Ed58S%#?D>W;7Y7,]e8+mfko[Z**aJ^5f7/b,Y3OrY%gc@l2bFg+mtOa@2u:DLF,^3'Ws!gL:+5q(ITq7+i>^ci_lSf[i034=]C*U(,`mA%[Gi<hi]'uDN_Q%^Bj?X5OOlALB&$8q';uc=GHHfr<2usuVWt1TR]<4%'):`o/$641.tr3^&ie^o/JFMu6mah7(mC?:A>X)aoeR'+%1bI0KJg:Jc(+1TZM89Yr,YP./Xd%<Y4D?,on889.,>&!-<2DW5.C;\:]NR1HYa#,GdO&3NUdc,3;&3dO/tKgp=cu)"/1Y:3\8#.e%Xp/-*\6<%9$KS5hM3&'E=Dq3eV;VJDX+1PrCtREYpVTFL9D#Mj[?\[F_d6'K>'SR!\jEuYaJF5D0:A<N:ZSGuNXAR_Ni.l08UN[V%ZR'!q,A]F'!dfL1aP2rh>Dqdb?06&b_r3GtB"/hH*1IDA3<O:-Rfa[WHqoLD81NbEF,J]Z"Mo,kA6D+>oJp^mY$8UBf,+"kA6Ej(%mP4\llg]`j5G.\gpQB%"chO%'54^AHMt=5dH.d9X.\%2Z1++Y,R?LZKSXrUJngl/PH(7i2BhDs'o+F(Jo9(ch.&s^)=X@Z;(.E+E%Sr,!*=.-6JS@'8PH!;KTC>&ebkb&A82Y2-Y_nopBZLHNs3V'cB0fs#,1#,]O;0c(9BjQ7aT?fK)kZs=_@S\%J,#K[M$W@\CSEi4<%.!*SKZH/2bEgZ_3QG>&SPsG,5,^;&c*'8u]3XCg)7@p1[nqGL,JkTkiV@8-V!TFcEi+N[h.YpY0"=+&:84p\J>1s,18&4NqfNZN;%UpLJN1^.0$J<^RZED>$t@!\s++C7Cce"dmY%BM7TJOmTAka#u&Xf)uCJnD(:Cc7aTAdrR!"sT@`%-o5g7Pb6A))`XPCc!)j7_MY$%S">m1&sJ&ak_<ijN<fr1!1@0"hPf&l2)#5;4U(@6TKB.pf-Bdn6*4.&ef(qWi)Bm(;S^TYQ3qSjC14(WJ:hM:qIiRLUL^U!";[hB%Be_.mX?lsp@bUl+Y(9,V+Q!LH\ctL>5`RP9Pd^r;JhF9bPY+5m%$427?:CMoO;WYa21V>W+DV1mR"/3U+L;,Y7mM+9>=!HPTZ&e8%k6uGd!Mcb_g#E]YI:s`\#&Z;KB/SUP#5h,EM]-gX"%P]fM)5dG!EQ$$]Zu&f$1M5Qc&!TK#ZVGF^_erF,h5OqS#RSW.EIAIR8G(e%&Ql:\C4Ron5b`"dN`h$lYQ7<o;>g053L>qh[.J>u=URi^P95@:aMq+$4r3-%1U6RL\-P22(7'jL&A2*^"_$^=_TQ)"Q3qA<@;_Ap%P"n&UQ7enobY@#l.W<#"N?C6tq_*%f%YFa)];;Vg*i(\HL&B5ElJBEk[>%>T,k3=L0h$.=V?et),8jEcgC*%:N'1'cEEl>B@j0S+%!MKSBC#X,4%(dIP]-=m[+CTLDn'^VZp.FP`>SOq0-j1]5Xnl+UrmXK%CDXMG;t'8hm!uEDB!9]iM0GBc,5idB%UoM!^r]pcA>M`o%>hNqDr&K&p(lqPK9Wnc=778jSL5/bOH4rW)W!$"85f0QU=USb)7]0!FSO,F(f/7jI.e!V91lBIcMS_+A`b;tUR1s70E=#TEK?Af6%JF[<F`&1q5"-gAsLM-lk*2F@7*JC&0c^YfC="V`]?C*4T"/"84e+"-Ec'\qT78sAs#Vk6E>7`@9+_XJ&&r&)45sQ09*e7[O)%](f%%hO;C$:@bs*A0Kq]UT"RC4Se.H.9Db?;4_%K<qNqd?:irV@-daP2%?KOY"MXb,&6q=H_CV3MQ_MAd]i+RmBE;CND.fG9Qu9;$r&/%YG0qk;_^X>q38&+Pts(VY-[J6W_L;a->AjE72.(9Z<!]I%HD$Ffd$[?bRN)3ZaVu,E"*/D>*R&2Zk1$'Us8b/BeM:rVO32iVVI9r%Le<RgdIP@fSgu9N?hB[oMmL^-Zn/Wcc8A/_Wkd;P<)6`[$c@Ln7Xi.fP(cuKnB1=&jM.t>A_pEkGg6/NVEE8=X1@/'c+cm%Y0FSq%"]ppq\W=L0@VM`4$s-r':"hUE2mtW.fEr(bn/8(m<L:k[D)tI9^EcsqbO"ETp70t9)1LjNFM+VKBdVGMP);fE+&(en>is514^@Ht%979e0.93EI-(imbOfoos5-Mn[AcQsUdA=r\Z)<3'Zpa=3UTsTl:6(79-9<ikaH<_`o<66I5[-kRproS9kEAP7?gD%\=H<JM>GdHe%+V<IrP]Z6TYfQ!aQNAsH,.Edu,]H35K[=_3),7g8+*\SA>LKL3qX]OJKWNIqHl8`-R.,fomRa]cUP+]W4Tjpi,^YX<H&8-;o5r)#%HC3jF.*\5VnfjRaEJfMXSu)XOdQ<rQ@:kjfdOVEs@Tq@dqgkn,+X\1Z"%<l'#BPuigB<:'=W@3/oT9a]`]B'@Jk*b"G6Hb64CJQ?%<WX<r"qQB9Y6q_dJ@>p&cdfl"TQc=11Go25FCpua*#K0*5`eD-U4=NrX;>c:-Z5)+DNIAk;uO,D`f$oDS)T*K1jJ6t<GWC1CNS/?%\a0kR'&5B+mNtB2C`I3N_Q.3j;f^q*mH&$Pk31.OP'-"4`b1YA@(hLcj>sjG)XX)+jQ+_5Z_Q,oO%2n35,(RpOKq]>!hDCJrYer$%N''d#<&,.;.>jW>M?PssD,Gu:YTZ;lCjO*P6&B%QNXcc&:W+sh70sq]1e>T#j:X3e0-h5TC5Ng;)`Q^2Vl^TNmLm4.WNVJs8sq=j%P#nII&ZNLp9_!"W].=V"g0R1_<bsEm(MO':"^au%*54;;"H(VMAZ:"`;l(s87[4TcT#<)iekEHQB4C62X!\KZ;"2?`5]kAI@S5,+%PKGTa-^0]Pk4p2/SYf#;U<G$_."S,tU^e_L<.&E.8GpC%=g]DN8t)4$pe-gj.dOVh.aNc9A9NUM&liZbj<sc$8i7Qhg8*e/=TMX<%'tN1We/YZB$EPhR;1m&n-+A)"V;NMnl42PL9f3t\JO)\hSe*J3HVBo8KYa)C@QM!>o85Z.B\DZrkY_^mZ<KAHb9/'Wa>`?oF(]ZC%7lGV_/KSho-f=(.h!V8Yg#I#Fp_uDVRE`@RjR:rfH#YpSkA8u)]WF9PgekA\;tBWt)g8-&HCpM4l?Iri6$7^n<WWt(BSkJs`DEX5%nr!RP-?-C;&DClLXrBTu,r_C`UrtqBn'UYp#Vq])60^7q+M8^BRrQBM&sZ2h4k4p%0!s^RIhRife$9o;AETgKi_"98iZbiBB?80;%2I*s.-QEKKXu^V1XqL[fQ=6c%03<4AF*ok$mORbSKf8ejm#t+g8DXaa9:^GK#46*/;-q@BPDu`/I7=NUUT@^k"O1nF9Q5l_O!`$h%fhtDbRT_PS>Qdl&/6Q(-\O^]5(OeQbJ3^Z,>^Yk$f"WkE!C'Kb02[tpf>&2(_<9@bcg5D2AkEUBM@a)WI!VDW-+jWH&u.Q,P+5%Q%3j2oTc'.]\g!6qfRCZa3oo!H4IX*5@lF9hqLrG:DkC=@/<%^[D5>.\2?0m?o,I;T+:Q7Q-]f1:Yp?ISZN**A]KqKj0`WR8'E3-ip%"%NqC;/gn+nHM2@?mah?k?QE&.mA#'s!l\<HHp*I>fiKdS\@_!^,LC=k?PF*=5CV`p;Qsh7ruMsnuphOT\>R-f1=+_aCE@'>*L,Y%-pp8!7[X`XU/@LbQFWU,0g/"r[ZX[cZlu.,4L0YtM8cN[59r/XjrL#>L"[/M97UlsCMR<EbT^ZTDmIaa`X@1_PkQcSGJI/YBt;AV%m(>%LiRBB#8>3p:3@NYPLtc[S.kb5jeW?fCp]O).<mM!!2N07[%.2$[e"Lh(2!6$g[UqE5;p/T)CUOAe2&dJ2@Bm6AZ%U#GNIrMa%c6H^5rK_9h3udrQB-LZ=G9thZ82m+Rk;Gt^QqMUL3mu8h@E[ej[d9jX=Z>FLA!%aj.7%^uR^nlnQR?m+Il>\=q;e/pRX`,k"j5\a%-WQTrp#MZjRQC7dp(Wua?!_JDZ'QrnnB2?'jnL#)aE`TcTi`?_kGR,+@(BDaKBibSEp-4rp<<WlCksE(>19$p$fp)Ba[Xg.I*+oq%j9CT+R`L2"*4kZ?o0Tsu+39^`/E^BBfumI:f;5,AKT,EJM%tDWA"<$Er@3q)dn%<5!19K;IN3oMb0&,uf'creTJhPXP9eQ`T<oE3%pc6%ggSqS$L&0fh,f-R^"J<c6_hs1b^RX<%Bq1sg[mqWiFHE>MP/eG@'Y_WN!6X4#0+3)q8eN%BenHF'UE#9.3WRHcA0X[?c=-]S%9k^[Bl<74B-J3?WkIl*^4,4+u8:Xrl"UN-dGDI_B*5jYVr(2ciZEn'a(#!(b/`X?mQ(>41DW(G9(HF5>*+$&Mdq>c._W\7rRkrWb%1Y/$OeseJHRkrWb1Y/$OeseJHRkrVsn6GDDN:k`[jZi0lom(2KQ^tnjb8F58-Y&#fA$TaK2mp7lm;>k7>ERXqAs_KjmS[lH$Z+)r%'`ZjV(YG5ofUNcQa.=+"gb#eA>N-XG^):ndB61Q#m!tS;,rTs?D!mVAgb#eA>@MZ_`+n'ZZ$DYTk#iUlB5+I2J=C1cCn@K.H'ZI]%4A4`-7m.=Yq9JGXnrq.]He*N):7bhT3W+RY"toK=C\T1;:[E/]DjRXj4ZF:&-fs/K:>;Q3=<8</]sQu*6<`\IOJF&u9nNumG=qGF%$5&M0IA"'1i8sD-Hs]q9-frsp"Q^-0?TkkG,*(ok*MpCNmq,%\Jd(d!Y^ZoMqC*$-=C%mCb=EkB:/i&W`aa5sCo0*9$R?Chg)g?^%"8Moh.3/J(&41qX0ShU39I`;Bbqhhd!^W_5l_kGK[AV[](1e3q#76A0=2;jCpN\IW]/+(^_($R\,/?6+mD;lD1mtMB=^Y\>m<G9`%!omd8^!^sCbj.k(pgKTu1G^#sml><<H&0\\GMq$g#"TBjTKo!0Pikr[o/Lls*=o$q8o-g87Jb;^q0`LR6n<@jZu.%]#PJQ@=qSA$%L56K?ODP;s)r`BkG$%TAp'i?A18Y@O)aL8MTH+OGe!i2CN4SC:&*A!t.uBo9;<6[A`g7:TQ]RbkOjaL/bN_F(Jgd$\`FU/qP%kb0%JV=htUF]9YA4*@R(FFQSk);5NU>UMT'/.7lFNTfdkT:uRg@7G.P3F7M,tlR00X'e)&cMTm@g5Gt&WI_)Esp&ZESaUUXOs3e=H#]4%nkb!-OWCuW0^pPAJQRJc"DWH_#DWqD3*Y*+PmDt=!UY+S"&hUUUEfH%#P5NuOZH"`cit>C,D=N;Wef4?C4N'H?-u\1P)>8UE5)&7%Ym6c,[Xi5#1T0+Jb6MJe2APU(3*.$+P%\*Z^ik)B?jU?Ye&6[t_7[M2P(ige]V,a56J^Z>R@aQ7a['J:&kc?]EurQo3[i78AEsOJ%^`eD%eYeb5NOp<%!piL18b'bH+XS,[Jt^Jp2lj_0@5hg21S`36,H/PBVkN=mOJ1',^pZ)<E@l"IK8CW*nbUO`q0d=<!TsJES9g&j%#uIOf4Lomk8.:0UHkK9bfe3U2/%"'I>RY%QkT[5O%gL43`/aX<IHSHE^1Xj.j$(CVbVj4AYL^LA'YGP-kaD5,fRkd)&:(r?hT:%5%ObLfB'Ra49()dfd#MR9ciW+/7T(??=f6J-XAqo=L?0=p:#Eq1Ck!9,=)rLh:#[:LS64WEk4!%(Cb`:;!*mF)"T'@qf)/#'l?8.4'%-H/Ag#3e-%^[J896'63uLQFfAZk3AX+rmN"Qq4OEa?Xhj#dBsB%g96?4(K0sgN+F[l\a?m:hk%1JmX&J8]Y8]HrBrs^<T<i\b<pK%cp$l@jI;dqPO"<5=5j1[pSH?e<'iB*SY9S+)q6YGB*N[QW\al<)PF"]`mQQF'hgk&hO+DbT[I7:@"47A?oQ0"KOXOsiticl)"7jA%do"LR8."f3#oI-g,V!jkPsY7:^bgT"F;clIBu#PU"lG\K#=Bts65YM]3!0m4j106_9*[kW$s[[Z)^h=fUeHZfE^U#!$IDS8&I<Ah%$7k8I5t3Q4]L`ZT__BOo+_H8)!BNOKj#?^(gK<3q_8>4f[gZ7db=uA!4Fi%)4@fX,+JH4t70k=Y:WE#^.G.^h=@`NK&.\bi4B=pB%_[K"J&k&Eh)_b(G;c??D<$_U)_bfQ[ag)Hr4)1bE2N8nGO:a_Z=^Yuti(4pM"6`-RMiO-TG[sAMLh2)f9J%sKRBcpFMT:9:(3f5j%(?e;^d@i6J6p]e.-JGs1-uJ&H:m-#R(o;mWMjn]G6j<iM$8Q%78G(3S%i`]3M@XB*"J\\b[UeuTJ4sYX@OQ#CR37g!$jOeSgk3[M%"QE%,1<Br#/.b2o'%)NQ<;JrdkuJ?a9LT*(N"mInEc22eZ3=?]Pdg`RE8UbU$t(h.+@7\80Z09/1!h$S4FfnL[fZb8e7,)n1(,pI%(0Y+G9Oai&Vli6TO748jeq@Tg(^^h8JDi3b_^lD46;)25/C502*F[m68X3\ao3jr0/Im$Lh2[T9Jo.G1"st'9K$+.fPp?KB@*X[d%h7-$&<m%.p[<jug;Q3JDZ;^f?N\pmM?AC1aVl/Qp5tt:[Ege^6[eA%O]sb^)Yl\ZW*J;Iq=\cu)73N%l]dgHWPJY0V+*Aprbug)[%\cE]2!5orGY$DmH(+]l]n5r_!FW[<eX_A@Ic*9tV*=0JY?S*ss'a-#TT>e[O0E<VT^mO/%$Oi!u!eFl/@o]/:@:0n%[8>UYlS(LY%!*2WB!hc<+!8RJa*EP!](<3&0OA('8JDLHI.O6n_TQi:dK$6+^PXmr>7-QAKL7'_*Qi:tUhM)`6JOV"RQcoIdjn&Y'N=5eiZ@LV!%+>Ad"iB\5/!NK6Q7qSS'dV2CX70kFTZnmos+u55e&QV2'Dm4F$eGs%\%QaaQZ8e=1#Z<`LJjtR\$5#^p>D?Q3IT?:Y%3SS<j=:Oi%Tr-B$<!b7fh2.=hP\6+P'kEGDRsFjn0XF$Tj#$@hiW0$!MS-m,8Yg4aoHa^Ms('lIkHkr1j+>EB@S7i[<>Gkk.[%n/&L)1\@43TA%])aaCB>47/+S\c1A5"%UJ1M8_;HXN]&0XK)-rQLJ$R?/6oENlH+ZP;^"0HgRO><CF+p(TqfYSOo)?@Q-3'>O81GB,'^F`Id;o+^u%P5ZeK_#`/Blti)U80j#qY;j_$/O_TTCm'Q)>3EeXWPf#-mt&t@Jp-)b!^hcHCs,d+$XdrJ,%%$![Ol0V1D!750ERqi,3KX[g1IU/%/661ogZ!bqOkM(F!MW\@Ms22l!2`[TYD*CuA&2k/2Bl"AAW[@b%G.$cQoR)m]T[?A6uXgl2h`C+Lt"e*W@\[_@4H.PZ*kIbBqdc'%(ml_F$q3Jk`%t7+X%[UL_257[]HRH!f.PR1;)fk^b#nf^23<VX,+V"23-OP'/1bhE7n$kKHKW-c;ZVcL.L?bA&n>;fM*iEf1(]6g%b=>&S_s/Ao1Mfo>]0&@"jp\-hh]lQ/'"J$:-mg/"\,q4a*"!5t('6Aj>R"f6n-/0((g(OLCj-F+Kgq/8LD"'q7P'c)TBl>(Q!"aP%#T&%'`=o?e+L,2Q7^Yp,#b9m>.#Y6q8HAGs1sNH4"(G=>6*V25//FeN()[*J:KbUE2bfg388Ki:0Wi9ZJUJ1I5\-1:Rn4%o0\FsR%Di'-u":SE:?r`ksD?)f@@DO)?[V^VaYN8D"5Y5Yu`sa^'Q&Y],1^R)6QHfno$36#?V<h04KI$W<]/hOPTu@"!6W&goNnpY%kQ]u)%qSNq_IgidtQ8o<^'K"BSAM2KK4a\P6-Z_QW7`miC6lQ6:/KQ%>^c7/RLj`q:"C"Y."/,#L=>7]m4C+Ju&;c:?D8m3H5U3EibNug=%@N&@]+9ttk%H(QX:ch?eru_smas:%V0R6!&S$Hiuk[]?%0neoqN'rO*B/QI"=]fSGJ6$?:ZlFlL[)J_-AMAh'-%r8F_HO+(huHs/%Y6=S"AH7k&`'m,q2PC8$,)B@>ejbn\)@10D4;%h,1-fRVCc]%6*=@C.d1H)Ca$lnlpf(X/i7'*76kPBQjk@X<%2"SrX\CNhmkGJI%$BWCcJ8u6>+pBV&S%ompbH_BuMeIhSOgEM%>*G#9.]5qE,n5/r&b(>:$Ns.fj/r)*"@IKR73$u8g-QjaEqqPc"m0PiK#@c0/gCE+%;U,Lkn38B9.r!H`!%Omj!JY#FJ9(H1%`"MD5hqO-"/q$tNPW9+A)oVP3=TD1@$0!B8E?`j!(5/Q+A7lFJ4t>_ArOqK`QiY'dQc#F%?:$4Z*Pj'6H^&-j5LH`S^)<;P$!M$ZL^1^P-5-Ui5ulS>6R=5gXi(8pcKkmO"'u1fNH;/OYt)eK)psr?TF&2%EGF\c\3ET=(;b#=%)kf5`8MH&R<KKK"3BEp?Ilpm`i<G)4!2P.`MIpHO0M*RcaWO;t"5k%acc5<R0SNYgQa,kn;K$B&3oD2sP]A6f-ZcSUEh$Xq!rFGI%8oTu5.*=fGMErIg_?4<kP0Snf$ufE9M4)juV*\R]XlnOR_3nMH_T"7KN=71S2HL#(T!/pn'Q4_]WK&c))O\d)/]i)S3Wt]"S^^\P%)1g-@I;3S&NB7YO4cG?"F$l"nNsm-gfYj%;@Q^Y:k"tCSXrrjo2,t91`F/^EW>HIq[f?eg5Wl)>"=RgiN3+?@7rT#tg)3p%"QH[-%#21g8!2VH/Jt<;U,-2&PiJ>su8f-n"`BotPZA:g;Ot%WA/^YfiL!t;%er?_8P*&r")WP7d`-JRD[(mq%%.`a4`j347VZYW'La2)a%En,fNGuZN*#mC;P2b?.uP&Y-gmKbceI&WFU^c7P!c'GjOW.RVF:_J$S3"J3l0-C`O9K\AOVc)Mk_SDIB);dhKS<3=\`5&pad,nnm%J^[,%Bb1BA`7EZ+29$=]8j'/o5cH0b:kT'Mn0SoG(_5(.(b=e'/CP>[,70m%O`#\+EUJR&+93lC\ej*qTGS'o.QJ`5i#>DUl_tm^%dm=m'K8)9@YQiVM%te[f6Eu%*&h>m@Qmn.-Qa?isB1DBrKh4\`"m*lBA,qu"@M*(nCLdG*]L\i._8&#h9[;$\'he$fk#2K*Mffn>%/M!Fn[W.nH1_-%fh&P>%"oKDVV/0O.;5VO"<*3a,-oc&aq<8n%V)"EWSVR+&QB9`%S$pAkeH4*"#*B)K=Zd:7nNmL>:;E":]WSo+%k_Z%9'3[-qaoYS-8XpYh=Xc8#LNQUnfXMC!KOYi'k#%T.8$R%k$9CU#gd,WhgPkklfX@1`5Gg;bF(cF[P&R3L,Qt=c%&Eq-+=YpQ%$l<;s&jk!PoZe)S-]YL3/(#a2%2bH9JQolW6O:+d$HA)A!<>T`i[RbU"IU(Uj7X\kLQj<2e2CR-^sh1EaoR>Ng8_sUJRMS&0f=KP%'=*lpAIhgDa^jtAJ0TZqjh0A3A:_+^ag!K#NRU<.hX*X;j=nj/$c.C_8VX.s`eIDJKdioF0XTjb"+^-+,f$[K7:&OP!V<ZY&"<P-%:/8ed@4#h91"-]_-jtt9@=`SP5VMJ%@@K"R:a_rX*\9\Z9JRt`c:TV2Q:0hJXrRoD6mISj-E7o@[4X_K,9p#99OcNPJ<U`<\4Tnn%No3mjMY.*[*/I1G1\TH,F9rns)AtdZ;0uk;.faX3@Q0@ak]io"e<'u4S<N(6ElWcs'#,X%TG/EFZAT!jHml1E0f<hiJs-d5T_9X1%.e3S(ZEF_dGQ>g1>l6&(^Im9>>f-/I#("HmEbGNj7ZnFUd2=,2Vc\!RMV3k#[*>,/82ZkCL&6M^7h_ld@t,`&J[&3'4R*nYfL#FB%qo;0h/lrVb0MQ?=]Ca]Y>e[XN96^^[;ic;,dQ\7CfmdFS>LuG+Zt,hd`EajbUs01R_6ukNb\buY>\[kYNka>a7rT/7%Ns.A[agO`%\clWIk\=mC14Z:6\Ek4DQ5rRn9jt;1FqQSMmj#97'`[dY4\h?cFt@Lhb.&#Jb-m^?2;DHB+PonkmRG?bTqo3iHNU:QeF&=P8YhYm%?@b^F1-h#D7RIpodT1-rdVLB>^at[g6`!]7U-iLC$`4n^N0?s`E%k:VLR=Js+H'f(,.#.;K.9qMYpfqY@s`18pPX\ii_j%T!8'2k%>,JRHQ1c_rM2Pm5YdP.YU@#s\`dK\%^YLHXG+hG,D69A`*M5r4Vm<r$3cJ;"M8oZ<n=,Z&HeHbMUC39)g7Ih#+CuA=P"mq*!280A%9\fUNNp>%'.H9:d*XPP)5aY+@7GA8-NT^0@(RoAk$:"l!/7Ghh#XU0SZ7Z/dSq;#]K_JWg&pe=p]*<66MBB)T/*Y,l%&LU2D1S[B%Rs$6YVOFEMNC:40!%_6/*ZujEIrDgCn2+ic/PMFMK?@&L7#ml_0XHA%g7T<L9!!r6P<=]s-Q8*'HZ_5X$Z[/$Os1RX4./-Ne^hr^%j*FYY_O'uVJ\4$"eXJIUGp]bRQ60"16(Dce2>-YU&?Nh.P?$8?i&kD6m1>8T1aGGOZlXdAZIIX*6#\5")Zs=*6D1A\M[9HXm*DH%%N+4e3)K<ubEikN;;g@>RZ77-RK',P?m20'EKpEj[,*c>lKL";98>/a*&j\hL+HhnTZ.2I:bR(]\5WGofHcjn+!=W"1PUPLBP/[r(%\)>m^7ZN=k&@t+1^kk5*QZA8.5SH31B.V#d.i5#<h?Ar*P(>I\<gIAI[QmW0`A?JE`[k%FQCKlEX1`aP%Nb[):.<*!D,#cIHa%b&%rW&&e7$_YC?K9iWiaX7U_GOUXQdf+AaQ6/Tlu:HJil*J.#[M5Tk;XdK0Rse<QZAqR?7;@H#reCMo3-dfFnbHN-%#P.&)Fci(X!aZ%db:8"P7S3/:*V2M$+>)s6E3n)<3L2["WK*6g9sDFEPpP]+;6:"L2S)+H1/_/3$.7E1.2hS1-caMA7[^Wl.0)_!HF8!-XMMJ0eDj(%SHMk[#"k;#8n@kB\[EFa)NWQCi@9bm!+T(bTkI=.a;L;br3G\uMD)+Cbt+ddhl6.WMnmsi-lS="&_8uH:\_kLlEUf^T>jbNU*C7n%d(JB(d"c"-%)#UXZ)(=H[/t.^VBQ#KN/mL_DU0/Ngcop]e\n"n!?aQd^]JBDM*T+s-l2lB/k!6l?j)*5QL_[ODG!iAQTsNTateJS%h#IcM@d<kVA%kg;0t;F>cg=p:=:P@?b)jbVYnA-*a%ltS`0e)P4WN)A*i3,6hm$S'H^dG[aMDm^(9L.Tdi#ceS@\*$S[m!'HfCWp%bM3\89]AriK,KDXi`L#WK]CcaV\cICN[2QjEeY54&E8KjcgV]%5CTldVr@f<Q<Gqnh-R=Uf12?9--Y#$!us1>Boc-eZ6E@TE4-]5%93g#eRKC\C,VG![[$S<):EmhZ&XZ&IP=-!<:LitE.OO(JX!u)*!`uV8%\J<l`DNV8V'.g?cH#?PR?2=@Rs%!B13K(Rg-s44i0;^"%ng<k7;iE;IiDQ4mct9*G&)7K6bSGf'/VO$gJLCaa>F9>k+D%no"mAE?+dX1OEY17eF-0T=i>JDL9A^/d7ue._<">ctg0t-HWU3Co%Z31I=o:o\?nBWrDEZbFKS8$(3OU7ELWB1ArkoI9>!'\=&N6-]#3i'Ri6U%?`L;O/B2@S^"Q49r)k#.?ck%CQa.@nIPh+7nWAtb`+%'.GgO+-3nF<u`-/F&,NP&-KTa^1N.0,1#f?"]59_>E^f-XMKi_S/gdp7DMpD;HFmVri&G^lqq1qGA9c+<s3,u%r6FU#0;"4'75H;%O\N/"MiPu$2/tD-%Ke:_/>Y<n14JW<Se44i./X!g[*86)6)L4Q;N:nU#uWK2f[=WMBm31d?nkM?.:`Zso&LrYOD'k?Y@DbeGlXr7%M%gf=iF+Pb=I=uH!!k<]E7U;NNHY3JL.`Zue?S4gap1J%P[u8CQN8jcCPC7[Du_,O-n.0bF;go[KPp?Gd]e_j]>0A47`qfp_iD$6%/+js9<M%8d7k/f:(4KK+j@0VoX^o"FW,'&pbd)5J5U.c]QK@/h#?G?>e2F=<`!!21ajG[d1!HkW:?dSAh6AX^WM6g@Lmu?;Kr3nk%gc]ZO5$:9t/6L2miFY3uO+''0#HTpY!h`F(7XN]?jeK:#rBtmlHBLff'F,,El=Or?6=?hKWHrp(al)QQg+CM\!KRE,*F-T)[0(BH%j[Q)rT#(W'FuP.eU8&Q_M:@9#],?Uo:;+g?>a'CI2D2la%"R0I-&J/;-&N"Al.l7h)<KEX`)MRALT.W%WB2heVn@_mZ:>&%e.N-p%[+oRi,Sogj+\_8Q2McnV5FMu)(2-%d;TJS5p:-"BN=7<W3jBMuf#p>3M:Z&Wa^CPi2ipntC1T,aq\GA\k5sr:=j1mhPSU2VQeXj'%h9@CI#_=\a6N@X:b?T)7_AIL'RH?R4XZ<Y1(:r7dY[nXgj[g3iJV.uULHXj^jrot+])3Bq[WP*.LrU9ESC2")W,/aW/r2K.(r^N"%Rs8>bIbcRV@;[<tgdJ(p:mV3)X<N_33u/gh"26fTLHa(B[c0-,l/L\K!/h69\Uf[p1&WOD5/YbLo5FrDa@$Ide_UlKkjF+g"I.]A%gtsRR;uh[@[KbH]P;">]JdrG#Gt:j>87sIjW&(+uSS=<Z:hO5'NP!Gl8*C.2Hlu[XCo;lclpP9rWTAk<qnN3dg5%AmE>(OsRH?Hc%Ek:RS*0hb=g/g>g@FL''>OajY=KiiKF%e(V$E9>,[i:*&&A)QWD/FNo[0nr.a)%omPKLSJ[/D57Qmgo>.*c_=\b)/C23>]m=OXTh%"YC=_U)!nV20)FpMh6N8;G/'CS#_E-2F<$M0/gtT"kk!."e^kgb=4L%N&BA:aNE:(-nP8LZB*-Y=-:*F%;uZ7V.<91W"gT2]u8.r%)fd@@>Bu_4B,%7T84L44QF\!Ei^Y$!>s]LA.Z2]#0.V%?:DD\@[*:\/p(3?Lgp0ZOYF43::n6glY%h?3(<n]Hg$Y+^<4arQ\2Be^%-cb!+llMAMI<cmc(!giC=UQ6a%sFH9Tl[K$+:i[t"(N.5\/c1^b<[Jd:!Y__RfcX(.g`:3`mQBHl?&[A&i(BYj-KaAEH]!3cR<b&%XS=c,**nY1Ci#Yea+C98%hWfe5ep>7CU4'^2\Q>,mCs3s+VJ@jVi4X6'M%\-<X-_6C<G;l!,uKC&!]d4j33d.Pq0nq&0KRE@MKh;%3S&dXd'_of4Ttg4O^OhuKcGW_hXlWDgmr5sEk)T$H\HPI-]:D'\?6Vq/hKn)=lBAoQ^T<tLUO,+!)3t8.$:Z'c;EPG,E[:MQA'tN%E?a@N/@lO2GC-oA`ZBZi=*!8m1NK443^7g(\NO3ZU4YGdr4ql]6`C?L$).ZMck,<JN[T/S)hV-A6eF.qPe)IOiWgb`:am%c!q,u.%l;CdHmR<**k8`-f&I*tU-K:SgThh2.`Z)e]H2E7><\*$]0u0S?G#BTO(;ZF&LU)85O`BR^'K^OI9Thg9<bg4Ba`PLnDk#%a9-lN`%:-=5K%ll%57!ScS4eaiVZ@RQ<U;WdKZ(14-2(<[GiG`$Rj(>:(RmX_*RhTeO0[SJ4T#s,+&`MP_W<9ao)77O4=U(-c>fBpVgcot+%T;qhG'sLt9<(YBhi-dKnX8KE]0_6"9jS'#'NQHE<*'5+PKuo,jV=I"V^9^DHRJ!ZfN$;DUggur3)Pt)%7>Q0<B%#9,%fjahK,?\U%*!&m'T`$rX1UeO$h!I]6Pf(9d^VMS`\hpn7?#Lc,FbdVogZ-46^0If`-c!XL4gROr\gIR_8j[c[)>N(/Hil[>:i=aqG`i1Y([_B%%%bLTXO8!N=U*4V<I@K[+c9sjqqS#[J9Zon5m+n4d\"_W(US+aF'Ym3LfOKW?H^IBjH1FC(4raQpF-(*U(A:3j!X:t\H(KWCl`57p%:jPW_1NNRg1''O(P_V(`p<^"cULtLrLhPFnWV#P49Ou?/"U)3Qb>`pD#!LQ^&Vk9`B^lrYE`>HK0n+LVLYPq,o#'JnQ8hsf4U2+s%<F6P6d/^.c>44.1?QsJ\.%(Bm<F@g+iA!Cp7tGWq4gG/lVZksC]8)EfmQm@uebFe3PpR9jTaX+3-B48"Aj3+eccJb3MXJIl6]$*T%<l*QWkuA@Xg0-$kPUA7B!$+)]!CBj5;"b"s4t.lg`3X(L8O;33Q`Q%:r^lC8bIA77c4c"?d\DZgR70tZ4M^m]fRdhD/+jsm6e*7>%mRL&hR\%(d]Cq9/+P;@1kK!"a8PpBtmVCAK/-^6T>/Yau.91]AL)p_)]6d*8O``,R]9CBh)?AT-n]:+(iW/ebCoL(j"l0#H(BTR9%/<&C6%?o\_T&aH23gAXl5`DPB4L5/n>Nd)<Nrs_)R0=tD+60R2h&-O2c,DrI6R;;W_YX1=GBc=*ODuY8YUk'9_+E\t<CC_30!Xh+%jaEe=]2QXpq5O+a%Kn;k/SL3nd@QBb?b%t2B/$8Ge0H]RB2\r@r,r685Hl!_:A5[/"CL7cmcF3+n^`rk1rqRejrXA^n?$YN0bDhC%T*/\p0lT5jE%%YrEr6744I9>Pg#1?!SSGODVNUi>]9t:f`>FY!@p3lFRJ@"@s3qAZa2\79I)gh;GO-U`"IRp4),J_k%D"Zb^cI$.%[?B7AIV9[%0c#rLkI:KOENB""cjX5]rogdW3BBO9mb!-!3t=sY,KUsZg7@f2@_p@f61!g/Fq=LC\6OAs_>4)7gu92dmmNUkS:Yo!%9`H_J*7r73Z&L>&s*e#%fK5"Bj]%>Q>ODoTkf3bMgbU7`>rP)KH)q17Is0t8Ja<;dT*!XbFJbW1pfF%5(^Bocm`Pj;?6=nNh/Y0l%[nF2:4k]X[f]hD=7W3e))\1Ss&*J@[VgRmXj8K$Bg'4oR]tMldGC7)OZZN6/)RX3]llYosSPaT]T1A!I%gS<r1]0-+E72_OXp&%]%bI;Y'\A@-GMg+Rf.6%'D5mr&k+u[5N$'1@hr53R!5?n9P@8HsupV"l5BK?(#fkR\KW7sBrROhg![/93jW'5T-m@PB+hh4YSdd&Gk%#IaHpCDcL<hVFgRL8TY6i)UdL;V-:F#@rL:)"]08j_L<"I'^U,<lM@=:.KZ/rU+(.]9FGnB,N"+j@`UqdM7_Pj3rGX9p9amhc`C-%\9&I4m;]TmlMbc1>Us3oB:=>D2+:.S1cRXI\j'oDlP<;R^[5Z@b$__@ktUjf3LkIc@qt_3f.XG*WQ%AC`rac.F&64Ym(+j9)1ijg%F6L>q>2L8M&jbD(@AD.$:qOWod=1i+W-r^9gFodm,3ualALp5#a*i3\*OR94dIJ%5/MBg7lGMYGiOCfqU'dLo!=C0>c@)b@4Xf4@%,YX\\Bp16QBYpQ'$.DmIQjuT&Ld1do%t!>2b-Vd1e+0NWRUo19Xi;\tg13mHN+nJ1D).t=P;-oEl^K[F_L5Fj-?TKtVBTeXLTIK+%IFmlT*jn)IpE+OaBmnD;p2?0YY-3'(l^odb`bUfA/.]Y=P>7nMY1H-:MF=RqlUu<L&)*rAEN_O(/S<E\#-Q.[d4+!^3ie[pFUC,%%c=M7o6CPQmG%c,>0^_]]&bNhJN@meNT@01Z89*6cK_cMoiBapN@=L8JrVgJMNoU"j&,cQP5MPP2YA&C4h1'a^8;>^:6SAr^EN,l7%p8C.pN$n!YJ]4/HE=&*WL"FlQo40iE?=[>eO3bPCj[WOpVk\n<IWp"N>tBIB>-Ckh^TE,r3KmN%gCJo\fWSu&^E"'+rdW+rs5,+l%!RHM6_.9H?6N:a,DV\T6:Nigl>bd,9@QF/)QGSQknWf*9Y"Ti+:Tii`MGc*g"lI>CM2uL;rtb<Ke/,747m1,!#lJN?qt]q@b\$sV%0.PcPW2gXkS1Es=Y/ieE^GgGhmOcYtf#WWS8%m$lEHb<2)ui$-[Q^,@"\PB*Q0ON7pS9l3lltiJ-k%P@&?Z`?590fpo-Agr`3cq\%"f<Ka)-4,W'S`+;,V*r+UcodlCSPeAJ'5<;2WsS]ll:IV=ajlFW86^/(*J49];-ukbtn3N5^cXtCH:Z1T=8rhrH<`Dl*\[eSd\+:%8&P>qE4M0>S]Lh'(o0#I6Nq@C=B./!"`D63R%Y6L6ecC(:pS058ZQTSf(doh"`W?=O8Mtq^H2*&(K#aK<SuoCgZkeWJ[fdO_hXmM%n@W@WEA'QD\@INEEu4RXA&tC./06/G*hek*Z`@`F<qu1$>'mjBZEq-6DE7,8n*-Dshj(5a[0M>%J%+2$mMF$2ch@/3].M2bln5rP%ZTTqc9/LtTPC@knHe]W8T!V;EaAj4h@Ar:W7Ot$4"D,-dB3p<k0:/i*?53`@UtmNS\CL7(C](iO!k>F.&YtH].R#jgnQ4+9'p5)Q%Q2KashWd`4Enj_[W[_s8kU1g[_l@Ct6*^#6#JGT$d-6Yk-#cd9EmWYa7Y-=rE21aoLY@78rigbRTIZ6"W0gJ&_\F_29nih'`o1K^%N6<*CLL3/BTT7+<<m[W_N/#@VFI66[rd.V1gY7*%DVjggmq#.\BmpA4I13^SjTk/Hg\q'u_ZC(A]p>!]gDqj>(@D)!e)SnuG5-LJ%G\o\BC.;K$e!D_de*0SQmtr[:[Ci;S^-1[#(Er](3eb>GO,M^e2od$n!VQCK4pFjapU-t#ClUed>-YAh$EU?*Y446&!k>F])<32q%s&XcL=`"X8C^rf0223ZCnlGZ26kP?h\d'D0g=NIs6&5TPYIq'n*/)raK_V'r\WR1@_Q/"pU545(=l6O)#9aH4^,BPaofNLW7!_m7%o%3XZ6il(E5,u3lK+KQH$aDnY3/T+^@3]__>[,5RGSN6\[A!K<Vu+M^o"Z0*rR2p/8X$@X'@Wrlh_aOG#&c\;AS?KS:4\k^W^"5Y%MEFo4+9+$SNIa.J5ad+tJQfeQNIfe#W/ZA>9EWfb!FQR+D=#`Jg8?PqiPmusbgUt2ZjE?_k%S=s2We`8b`ffdn`F?L+g6rlg3i5_%7RN&J8FhhkOQEP"BZND?6_<uMm.R(EgE5:Rn\&%spKK:7pMKRh=YE"4a#H79E^nAj\k[ure3+j*]ENLR*`WdfGgO7g=V[D24qnU*%Ed/r=b+XRI5oK[ZJ_0Dc%X_)Zs7<n:6)T(V)_Ct87UOqG]'W(aLt[)J5Pp>(=m38A^;]jMT5_&W<L`/UI.l+gURuJ0.WNXspsuU]%6=1>:Wqeq(lrX1jp*Pu14gcoV\ZiA`jVCe^<AdJInqGmg^>XP&<I>sXf6!YJUO8X/b2!a&G1"\HO8.Aio4PJS;.$[k+8,+Ydb3`\%(U0QN0>i;UT_bC".N`eU$)h2^2I0H%Fs/6;(9["&4C%5o(CNaHajG*P;BS$skP;LX.D&q\.Q;QW'gc<7A,.j&/D'[eF.42nc&Umt%a)\Lrq+o_L,dW#JQ;MV!R#0J^;JpY,2c&Bs]9^\oj^skM,;Wc796ob^_.K$ShEj-4PlKO`]h\%Si3^95r`<-sM_8E![JE8"h]KR>%\rM7.n7VlqDsu_]'UQ"9[f$PN4#+j$M`hl(WppEK`l_e>3.Ni/:dEsaFSPc:j)TWi3]_fdYont%>AqYUT34Q@?e2_9-[e[TFQ[Vm%m1/PLSC>1#)g$C]_`R=5_gZfMB@Q>()33F'KtAq+3n#D+R0l@iRpsjDf_!R^kbd!Sl&eZ,0!G5_s49=rSLjX*,bP(an?^<$=h]c2%+5R\^FEgM5Xif&T;4,+N`qcnM82N<ffWboqNPp.VM_3tQmQOb7d?Q[^%Dgp:/64=22o<Mm)?/;1Q]Mms?<?aE'*q)\ZECj\9!2r.%]@bUc2RSI$X^qBG(Ud5X[0p3[TG#8AG-S#PChacUg;Tq40obG_,^EIeG0rN%`F"7WohF]4;rFlqF/Cgr]j-[]))"m@fi4+m\)^n$%a4KjIquV(EYNd_8"n$/5eQ_SP:jmCXr^TJln<q>IF^eG5\bl?^jB9+(Yh$HV5&>9jrp'9ac/W@nO-f[?pp,fh1Fqe;$9Nj)G@d8a%b$8dj[QYYI`?fQr8=;dM>gh\7ifQ".8+"UkrT5%Q(9VB6Gr"\qB)Xg"26X[Q?N.=/c&KQ3NuQ9W33BOb]D8DMB,@?FW%ToU53dX#%W[=pN*?#t=N4T`;oMN(rbbe_%.UA2U5Gbdd1Lfgf^rIr?KWb_)5#n/$%9TjVK2sT8g(*f,;B[UL=>.Rq(;daM4EDD!9W3R)\A.KT%MOZ'#bs).GiW<mTl4uG8jP#%U<TKEqc')]tQ%2kn^op3R^hbJ$.hm]7lWXZDJGQ,UYTatGV@p+b:2s2==:IH1.KQ.AJP@HKDra3J%G**FRRk/6tZClhIH[jK3Im<973+C+FQI/%=rlcnGs-P0(4u_nF>[Jn0qoU:Z6"TkU3VM1eDJRc#j0Uo#09H4X2#mIg\E1b!#H,U<%62BCQH!5aUp9Ur60\i5k-Mr_dSUQt,S%\%YM_&SBnN,@iX75J?c(e3<jO#EAjj3+^$k#&niJO)kK@01uJ/1t^9=U>\W]^]cLmQmZ%#t5W:GnS9^8LOsD/c6lY:JromEB;f8m=Q1X?eK8_+8SeZ*F.,op7M8-KMD,YDNqT;Y,@'_@(rXRLk7-rL8`03f&7$7mRl@f\s%IM%l?o'.qL#kJQ3Blr;Er3E>_PdfE90^&b>5N^._-@rjDH`M/!_n)11$H?Bp1>iEi.%#I$6@'Ei'6*9ZuJ,:!U+X3RcM=F`^WhVWIR!%Y?B;\HpO6tBp1AjP,:t%Zq6^h8CFjcY&E#n#kq=nSFdOeS;OCV*>57lLVqErW*R2"DR-,sbF5TTA(6Fml+3n3Gr>$"?_/9Tm^QUM%DQN1FpR>ga?0WI)lYB!L:CL>K"*DnFW0+j.o_)V+^&Re$R6e`Sp3prNiHC=biHXped!&N3Zd4-"[a96)Y,o>O6[rrPUkRg97N1ia%*fRA0Q+qp^Yc>EU9Fk^8YI?iJ('h@KaaU[em&F0foaYaFJ(reZWcc\mXLp1#5:U\XC>XIrnFh,[`EUW(qp/X5/]a@9rH=<:G,k'>%0#icYI5mm<P:hrScZ]*MMctSdB7)a$B^^-QZ=piB3Yd%[GW@A,jf@Lpp^&lkoA/u0":$\=C\ZHNlQ'D>W@qc]`s+!0`SupVCl_4K%SQpDFbs,!YKC21ZQ1rp!/=VIW,=F)PJ7TCupc.VD6aMLZb8!%AHEjZ7hS`cjK'tpti*5.:i"nP"_BV7Q=i!)lm@kpklJX%^?@_;E%m-*3I0V\eJ?aSSVUTQ3MotoGcX6[^,a=0m[^@q6o@I6p1Ecg(gnp(%k0=uUeYc>F=J5olT?WM^B)ddd1g!%V8Zbh`1j2s9_lnVl"%qG^<Nhnlc>I/!iAD%3HDkn$rAemFsqP['(6\R#'!Lc'5$=7?N]RkG^a\u!#ag<*c6aDi/R>(."W8fQ`n*8#&`.gK4g8:"9$gn`aU%)sW]22@lJHpmdNdCO!H+h(/*X4@NFBc+ambbLO2ABCk&3<DnqGjcSWH4um"tN?921M+TRrGnj+6\)=HM.fTZaXRN)PnITGH[0(3i%aGq'<iX)fXK3FVFiYRcV[Esg^nC?E)Ja\]VKX;]EEBt%ZFjM/:HDAY4+fl#(-geSKHsGpQ>uY-:g88Gq/6J=0C4(;fh`2_D5@5Y9%E!7MdP*CUi<L'Bc)d3$=Z4pVNZW+Q<,79Z5i#SUH7d\%eTYSIl=%B,@HDl4&$O7K*SQ7cQA<qV;(iWD:pr?AFkQFnnhu?2Z'Gj`M%c+1KJFY<,]9R`[R*8.>U%"gL`6-"EF#_Fm"hL%O-4G+g@OWE0bY&t8%"94#%pEt+mqIoW@n_UKW\d$q1^;!t]b#S6:l@%o]Y+Y^"%'NEL+<A?mF'ch"RaXN4,!alGQHmOX>Vu3Q#aq&R+q>bFT_2I1OoY.EL:Wfkj$-F8.rHW*=8J5<#<#h0%Q(!TP!`_FU!='>Q!dFsd%.]J(N1^Hi,O\$"7o@B>4A4g$PK4L7s#WR_lWD:u(@#N.n+:`cqg3NjY0U^AYXZ+k?K1\Bn*Z&V"lMgeInak_X<PZ'"!<:o?IOJdh%CY-b5I[k^AG@WE0^p*SO-tINY^up''-82H>D7p7u[q`fhJ%El)_q53l]acR]esl0q5gP#]j2m+]bD.;N"fkn\=A8^OUo""2Zi2EO%IS*s]!TMZJmWH^\dHUG)r1lJh+*L09VkXa#_>0^gq87NjhsVS+P\447!#jWBlgi/n;Ju0^P?YIEd.HQ&<dY&;Y*ZUjfCHrSU\8AN%f^@Y.?EPuZYd>iA5Os+:TFL50n\1$=Ubl>T72c'1fB:$!VjN76:l>mt<W6EWVQ"([4@=_D"h7XL1.7R;7%lLV]g1UtX'?u(KO>S4%8sCFtqP^I<p_-cO/j<in>e9TQ0RQ*X2kX7(WWO_YIh+%pf='Eq53[:Q;_iZLE0^Oi$/roa?GO?b]2tQO/NPd#<ni%0e6+oV-M:37%K)36'W8+*Im<$]ph_Bh$kRG\iTOg7kicE:$\N-kBm\IPrp7e)bbZ&A=Hi*e!UZ'tq\QpD*h1%JkD/W1)90e<ljEYs!#l<C$eke.q%O)f72#=O"bHF["hjp`Ql'P8Z24DU!)F4O7TG6a]1=+;j^e:/D*BIVdu_KkkZpn!+aI5pG\p*L0op,d^3VB\2&#+`!qhe'&2"Gu4[%iXb'eo3HS0[*uR34TE'p=O*';XeKp<q.FpO'N%tK)gCQ*k,Vl.YHX9r@oGZgg)_BWlS!MGO)7*@IVOgr-Y8FsE,'gQn2('BddEZV%E-%r[%D#TaY>'/SoqFD009r/+0Ks4F7Wo(PmI-*+qc$4e5jia[H++6"NeX>/;4EHk!lM3#\NZ@uO99%p(pSs\,g[ff:/d+4JhT!@%i.$CUj8D/MXTTYnYUHS'#R&XkO5A0bjBZsdnWWFTra6>9r_]!Q2*foorQ-_96JP`2H%#dC<t"U]>S%9AS.:*u*i1M!oq/Yh?-$:X%pLeilZ+]kb:Nh5u:<S+Z^X=[GoPFOY?*=,s%p,UR/t`]i:@KeijP4S2g@GQWo(-b>NZFK8;3^iU18C#J==j$O5BZjO/CRF:C7UFK%[sKgoFpGID%MK\<7L`Z%7[AdglQ=j/2GKrKa&pbE.1BS/Bd&IO=LI/.OfU[!$njIJM7i?laP@)b[V[,?0e6BF`#01B@sh\Cn3`Hd%*!k^<Fd+=#0-P7(r$KYInq1l?XBbWlBd"CT($,RQ(Ps[V-@et___?U4'u!Kf$u*b?iWR8Z;A_&FN`/M]JqQ,KLeu3XL(W?4lk#X)%#XAp7JQ.&4+DiD+((@LC/7U7D1bT7A@fFG6Lf"Gm@AL\u'O.P0/]k[\YquX5^l&KAENoqJ&L55up5R@N<ZkAq;MJt14;)\jK7TO(%fjplaM%gVg@c=0Nj)Ga[ZUAg;_s)_=U3<@1J[ElEa$:o1?#LoTMAUCb"tIErAVcJ*SRV0N1_;GSqaJR[*(^8U@WM!0R])d30MnK3%#HS\uki)0D_U'uO<k:]sGp#FE+gI"<>O4X%(:#tf8'iu"Gu+Oi$=U#(hJ`K.8rK2e\0gWRD%K]Mm*KWq9EcI`<c3%gkf+4F#t/Zq%_Zlr/<c?:A@o2WE6XkM#nY?I,*IM_/bfsUSo[J%(`BoCu7?J16ZPctP?)C5WLI`7,,&&N[G)C3t-Emlc[-SZc:eXV4N@c5(?3\DL%Zp)HB1#F4LL6Xt[,Y0L,>%BbX&Zq"ULnbu@fO[N-F-R2fkmfqCb8[+o2SofJJEdA1+E#%a"_ndL^<m>8N+a`8@TgWMC$(:d:Ei7b%<2)Nl?t_PEhp,aN&<hXp.:rqAJTM5$iEA$M(>+r33"ABdfTbce:HCsAbX3Y_bAtehlt'^!2.b=?CTAir+lB6=`.KHP?Y+Xs7K-Ib%'!ZDmlkYq!,cW<8]W@/N/=MmVgj9nLBU)1<KmkP2'kq.:9V3%G/aG.:(l//R[j.app>$3l27af=Aa2`"mMh9?@uXPY=[lG$B>Q2E%+uZqnC5U)qNZ(&R^=[]OVd`]rEa*A`@OWT+7;2dt6Fn=013OWOCR";id67k0/.E:t&k&?ab'%$B\f6f68L#*Rb`K0^W=Zlt7=:%u%P4]R(O!,>"/7'mMjs]LWAh8Lk(fTo[c9+jA%#'nXZ31NM((QsW+`p'>W"M0^-p.o#g1EkWVQ:>0$#:2?0bo]d$1c"DM4;KbJW)4B%8q`2Gf!64Ep.A3Xg.lS5D3#gXCj11:h;QW4H,,s-cWrU8rN4UBF5#BR,e0oriNUYe@n>kl%stb`@MGRFU)4V4ES7R/gZ,O3%]Amc%+/eL'G?hSgES%*Xip4!2ln@IaKjEA6*gWrlp=rEa!3rAcLu5-$53DT2i+s@G2tC;HHS+[q^K8^_nU$*j.k/5ojF&?\aa4q&@V,Is%;1N,M4KH$R:NF++D"-dV%d3#gY'P=>aeY5PJ&<7]q1!;6HtJk45?p=-7D:M35<T4]BXB.(h#3N4[./KYAg>qi?ZPkXKnhR":RR8\%I/5!M_Y=L6=608:o?LER]t*ju@/T.mHSiIClm*"H7JO0@TFR1Ue@RT7c<rV6H:/%-onWE_]?@q2JZt6%2_TA\HbD]M&7,.>&82Ef%Z.kgs:Q&>h5/6b\@fP>]`-LO([b_^%Ih.Tn'G:8>>[8^G^\t=>WajLNQ=sO[ronY_4MG&np?CZ-p:-*9B_6SC@R\9+PO$3UdX1%>%-Rr1`9?.;+=4eI!Z5S]!^&<)_`M(Es?\Aj@m`$j>E$=XU[cn5G>mW2\?a?,3:QZe'5$[erU/Y-W;+l3+^=QNa"_<:>D0WUl;IN[a%Ot9qJWhXH_YK%h<Uu`oGSo!:;>0u,F![5BTpL*Q6e2po]R%FpMgLg]F5M836DkVo@8M8j!K9s/c'TTehFpGmX^PbVU2t?[;A*XXo%Us!O9HNlVab@fqnGh?q1]&c(;f[.NSMBd^eGH.G70IoBPNfV?/gZ(kLeGC?T_j@!>U#Tj9C4="gD[2AZ%SnJ6_pRuGKU]uteDO+u%-R[:!r8EXdZ$,<jZZ:CLfc.@iSMGW\BfQ=oKh@KZCkB,dT!V#_XB@f^f-uc-s6CF?nrS%YWND1[PV-hmH.+E`HBDW+P/8k@f!Ppa%)"DFl*Ht$B]&aaa5:>Q)V`/>Yp%lAD#KJ^4jWH+diYI3VV^LSsp>GGIIFp,9)kI?$Y.];4mIX/74oYB=al9sAnA+st46V\AQUs3`%fk2m]ls0EZ]@311X5ipKmE>pX-c9*GDYJM/<[K!qSWdC!3[Zq.2<;YKUaFWIjm))@kiD4!/K7jgUjW=>O*epFIIBXfE$7Fs#!'T<%TR>\]0VXuDhf\Z@^q.4&^J0b3SRnDMA\[+aJY=eMq\*([#WRdhmf>K$mgZki0qC7.deH5+AGE;h3l+/HGa`*O7*A,3oRBWj-q!*e%m^mB:XT$P`@fl46KjL/ETKe+K5OY26p;`2lB7f:qQab`:J(L9BK^B3BgO5<^0mu734hA)+K'qi2_f+dhquSZ8S5hbajdd3W6"osO%fb@#anmIh`YhU0/a6^L/`O%!BK/fHt0g5]=D&ieTD?](20,VFq;,\8">;'.GC/\U)RsT&?G!t&:Nj\mC-FnpaBKk06D`LafJEOn"%*k]1?js?c[47BP-_\j4'iG@8H<ZZI5^$oaTbmG,BRkL\joMW6Oo!L(^^8YUq6MOc1e9DA&;85aK9Z[jJeSdC<oICq'MM/H#RLMi#%>MEb8`,SQ$PKklc-iH>>'M^^4`oIJsCRA+llgS,MS;\r2A+3ol4p9QiUfGk7Rne^hg$)Hh)g7J/->B->NQgq,Z^5<omUP#G6i0!e%o:$cF1cn(OhhQPDcuJMnd%1Tnju+K.mb)i7BuAmqYC@$4?+]fTY;\IZT:A+k[i(_G.*o9WmuJsq_Z:f.7c/\*Wn>afi]T?aah_C@%\+Q[u)3.OEQ]MOn*e:Y\"5;h\k-cJGmuK>]NArHHfPdB]NXE4A[huT<_rJ4k0&9NRY51sVet8Ilk;3>X:%3hJS[fBt\PeG^6%@:l%HBj;?Ln9,`oEGQ<--\p9g#")M.Iu2.O2g@EOr=CQ\fK-=cR9K@m*%eI[[pVMd+UDdoBcuF5AlP=Ni0-7d+Dc4TWNulJ^uWsljQZ"%#*VZWIkj&%%aJ#&PApc$,gcP\q(*Rg^tN4%3Imuu:Hd1tc]cLbesMQFT%EP;LtR?&f';<nlo_nH\)XE6nVEscBKWDtiB2ur1PqsK%kF&sBMT##]`uj.RC,h_'SaY]TFuC%mf*hbUF-g&>*[uTkXQ+RoZQ3&_7<&X.iH^Q!rl>pcoEOLR3-9hs0Z5k-YcoH9e!4U/VtOq.%Wku^rh(ME-K.%/P?DkI1U"gLXhG$-^@^]bf"e?;.9Gu2G!C1kOb+,:M2PL8oGt^[44GD3g=.6I?Z%j5<0)&i%`d0?-^7j4\oLM[o%CMCD%4<c^Fl0j*]7t.G^ra:*p-)&SZf6>cMKe@$i2[5i%L<TWP=#L\t4V),4XA^[<gLbiE-``-f>L\+n^X(H#0uR[kH^nl;#Mm9U%hY"Ft`^A683580P6r2/FPijhDrP2:BdiE]kNOc0g>t$M%:'5i+>CDoTe,-h"\,d%n-i<)F1"9TYcI/[XkHn&d4k&kIc"6Wh3nReS%jkGF(d+(@VEem/CW\c9i'p=Ij%>0@+pkprr1iG-JM)nT2R%)/Mad3g55R^0!<$![6C;t1=-]h%2cLJ-kC]o&A)L$u/7$Mas@Y3I.%FQ\ecd;\Ot"N]&FT21*MFQ=3Malj(X1TWZP&&];9/NZ)]pJ34h+-+KnT`d)/]YpX2CUDsf!SZ+<G[)7`h@E+pG?hp&7J##23mnfL%22:Q)I"(0#k1nM#iOa/0*$c6C9"PX:.ND-REG0BAa^du`B>]2Eq45(Dk5r#'90bqm``pA1gO.WS/:%Oa&Nb.'bYNtGiF7*b=S2/.%o=8r%1U@lNG()jJj1BdDK$djdJltS-HCet9mL;5#)/P`;E3Kj.&&"i"H\'jddJU1]^l.g$!Q!71L\\tZcpWU>_K)g2/A@TnYsm6V%K^q6YAP9'2;:8ctZIAg"*VlEgDotCNR&Z83c'=n)_+N\RbmScE_'n3$iNi;XCK518l!cc%Su3^ogZE4X05,)9.fE8aSIuX_=lBQ5%:orM;iGHqJpUk7'$rk-+]oW`l:>1=qHW1!UBnGCR3m[e.QG;oI[0oZ]%#5DS`R3r?hOr]jgD*5)WN!h>!8VcZU.]@Z]]ECFE<Jr`%"1%%1;7CB5n1mNHnmPdPJ(,L'a6e(!k3YGP=`p8B#r]:Yb?JkFnM>W7#L)=*(KAOAN+lPl4f3*q_gWGoQ;>:9PsOB?b]lI+a#q9f%U\"c?XmCncbq_uYq@A,JjiJ(Sg$b5R[&_e2pY43b"!28lT:CG*A[NSOmN3U\%gNOn]]Wep]K@-hfdU;k4NOelNQ\5P\+kW4b$qb+%$%mg'8%k+m]?gp(_l=$Pia.Pf>BP$_Tkd7TG'`>*_p\1&p[AKT%Z@>kD:r7;<9r`1QU732!42:dgnODgh<XZeIkg4/?YGRIA@n)j%_FMqrT,T<J6LkYa)Ue':fPbaI^h5d:S9I#)TuP\h[JbLNm1VTG9P"2m,EgiLS8Y^;gU+q'J:GMM!l[=+&EA^%3:7m#HS9a%pO=>/%?`laK6X,R,=?B+a?hh%-"oC$\1ATsnC16NeBjV[gGRkcG?\?ZacD\@&c<C"u/oq-M0H-+*)UBIBJ<[M?PX"`"!S)LZBi]HD%j.[[%!SM&iT8BnN^4#k>lPk%tr8t%Am8l4g`EtgbY2(0_3'Op%3;D+#f"Z*/ql8Lg=2t7u5CD'>?eiBq_h3;3e@2o2rqk60qkMX=Ut(Eq%Ug'Nj?Ne3TnU'<cB(59dGCHZAIK/`[PO\VAj60NXli*HGIuU8OUIjkB]Dq6Q^T4rXp"hY%p)B:>=,1Fcg?JM<o-KCIf'VP]#F!0r%^XUcZgGc1R_jtf?iU5dj`]`q4Brds,rF>6hr`;=M[MfCeUV43jrB&+2P*c2orSQmuHKF8J8c<hAJ%:('D<mPc\&Xco)i^=kVla_F%3X;K5,$+"g&B)T)00^ekrr)hsgBY-]8c:(53Lh;6DdPEr_js$[hu38L+*ehkH!LCBnCJhrqXT]e_p6/Le[Eras'=I:raNZ&]P;Xc%93^*<f5Bq6p[s$=eW84L4*R`0nWu1Lhr"A!`r5a85IB_3e$&5RI.YD*Sc/N\>C=u5d6-&AigI^B<]_2lrr(U=hQMu$[Jnad?YtjA%r:dS0Zhri+M#[/FG9.dDV(HcOjY-A/KDi!6Dg_0;cE61&^Ye[HjOX)KY)`2tL,[uG%c)s<NCW#q5doaSDXq9WFDgj<\(\XTnB!W@%[Vp>)rT)WdYMc=LXo%dHGJEpXGr*oZi60$ik)4RXIJE,f].Z7LDb#.]r'J<X)f3?Bm[:8n5aK&@5FVT\OA>ObDm,XI/"/+Q4$iYb%(JbsYg3:;JrThJL,Fla2#J\\8e>0Gdm/>g/7B^XbCYcD%mf(jdbg#H4S%nK$d8/.W&D^F(NI1Dg2l"C%LYpa(If/?rS^-]]s%8f'%#fCm_CYI&8NG=Lo!l*e%K\*q`NfCW-@/=6<`Z$*Zpm,i`q:Y\[?[^>srC5i*f&Ju`mIjW]Y*lsFrf]M"HM'YuBta5AENn3pj8L.8%gcd9+e^RAJhCp[62P$J0Do*GHC[+pmBrge$O)O<shp&8b#KL&(Xnolc+V=/"Db9N41X,#TGQ0XO>^a3Tp#B*5HKR$37L78E&)<eI%<;pt!gR%:lGX;'tg:i("`T7'!0-3h_cRs'hZ5t$>&[+\(P+d%bF.Ur1V6/n+SZTfn\%CNUK%>G?a!:_1J%OHMJ960eo1!SarAr-&%C!-:2'h5FgI![\6,q?`7HoaFEGu/q\-mXY[HfO24Dlmd[O"8c=mYd^4li6tW/gE,G%WhJ/laEsEH#gTIA=gPQhUng7E_-E<ph>O"%B"-GZ$,$jAFo3O:m>L<'_kZ?R\[2=Ro4mi;o]%J5Spf4?3ApO14_S`jgrnib,^\9o>VBqo?TdT.!"3j$CXdNVH92XAC?`-Qn5F?-%9%/`Nk^e&#<cTP5>1]D>n$F#0kNKq!#JY,B[dnRWWqHs,c%\u.B)Cgc1,tQg]9bHjd`/EH:;3n053X'=qLb-PlAME=s+V[<hf&[f%1iEl=O'5n.-a0Ss&!"AUDSLR%1H0K;fNMU"*.7FM!GmN]C^$:]?[X:K*%#q.bDWlQs6uLZB]+AUm&?a%X$:FfO/L`\=ag;/F[,i<%^O;G">4)Z(QMg@5UYp%WmBr-algBDpRV1B)If=KEV[<,2cWGt=hJ)T82h1amH^^?u6'AEGP!_L<]6i]3oX>c`*f^cH@def?CZ0"-%F`mGf7s4]C<rMFbh='VDB_'nNYQ?mnf#"%Thc+eq?`<m$C(,7o!6=h(qmX=NDYa-Sl_hAP5-5?YjDk'Ti6gWYrS[4Rj!O]he:P_L%Vol1arU`egY?p#e=SofC$P.%&"(q(-[Va(*f+.,pnTT5#4aY1sCi>_la5Oj0>0u]lkO@d2"uifH:O!Y1*]ET0TimBpZU8uY],m$i%FrD,87L>3P;#gikKpP@U,#[$.]*u#udAgjqloducL[sf-4*N8n?p%W9lYjJnO![Zk6DGX:KjV$a4t14BCVS^B.c1,b7foRNcX2)R%U\n<?.1<IU1MT*h0?T(g2RlnaIm"?P!M[$ul[(sr.<9C>r%6)"8Ij$n(5E'/.Dc^$!Pad0mAEm$;(Re^$O#K0Z2"-%48u7#;)q9#%q>b/r7k@ss;*r@_XVi)(,q@#k[q88u8$U`I6Q\C^)e'^):J#iBYO>1[MW=6&YO7OejP63d.anktjQ8^aH)b<g'"ah=pd.SOrQ]f,%cS%oUV=HquJ&P((A]ukmn&&mb=T;$'81_$h-&Rg3j4r82;gCe>_I`4/^\[D@kkB5m`QQ;Sf);e`0-J\-LjXu?<<qG4%sM3l4o+>c%lX+"#^l&BP^"]N2qsAl#jO/:"s2QdA33;k'I<306s7VL,fp-jAKUt;1SBgn<a,M/iSUk$^3h[]b)i*2"^ZEi2fu*.Uc$eAH[M=10%s5d>6ZMMu5o:Ht_+9,40(K>b1XZdg`T&/B'FgMAcD#aKS3'GFoarPAL+8"IGh>XN6SGi*2s':*`8a+?]k5NUA[qb&;[-ct7@;YJ;%dJ^ZP>om3YV"Ek-b6_[RYlCRr^!t:;+s8b^gc"K-L'J]iSJg@NJo9>\>>Ljj[u,DrU]f)VrqZ".-O!B]N0O<RE`+#;Yu.-Wcu!#+%Vp&)Mn#p[$$mk:B7c.>ir35kF`^d3ReL6C$l')^$[5&+^Ua;Z0m_=b%2=hPVE.+q`TDPh,Y5N#!QO/A`_4q6D15AVR/ja#scTJ?e%*r_b<F0\)DJV:AjY7A9>?M8SL<1j0Z(rRH%PD(e_A5Q7@oXnh\f1l>feGA=s2+@PAXZZSIMeMj!j2'KP/u[BOmUB%'+(!cn4?3/O%]e$d87t!Tbm*:2.jmH2d@3/Bls$(:;\n+C66k)>2hn]_50Ml:p9E>ql('Y,i?tQVD)k3OY_8beFhk,AkerE%R4=:S%l<\\n>I>uH%.7Jn(+XsjAHKg\uqSD(\h+uq=kq7D`9Tbb.Xc#DF@Jq8HA('h[q>Ik)^O5e")n!P,m\oio5H;skWdXoimiT8A-R'Yi&$:JsJVh51%/&/^r4k'GXN.$$4hV%,r28-bn,H!'4DdED2W4aK!hu<W7F2uo4G[,Tl]26cg[]EQ&J,S+Jh`Z8basS9<qUiLZp";i5dDoU$\GXH=%T7):$[f57/hn7&*cPNJVqr=;4Skf8G3dpbMc(?*GHs(dWcF<iRrpmT-bp8?'4ad%JkM_C2^O1f#nE0AgRm1;(GBLK(Y.eQ*IIjWm%2m.hS=/PfDcQ><Vd_WE%0:+U^Gcgr'<quRUf?5ue]Dh)lLX3\aj7qWWYD,)CI9G_lYMT/OHDaQ"O70aZbV*Y/^\$)Q\,Wu1jX77E%nA[,bI.h>uIcWMoF#,lG/R[@YmFqFJ0E/aF[VmnH>^r68D#JSNZD[$%/mWpW4<W3`ri?(q^?G@\^"63d]sg`?s1EjSf13S&X=CmV%D2fX?s*]%QNDD:P2m<2@RHh>jp\O^AWumk[,B(fL1EY/]s74b`s)\!gYNL86`rCJVdCj>icH<2&HnRWekNVG/f<3tTNh+R5Im3Jt%&MF:VlIhO(Mf8Ok_[A\eS8N`PqN]O):ZqT&ci0TAj4jh;i^]Uohd=->qnfhMndh>&o_4X*0/\g`9=)5klDE_t<(W>Ki,]rEs692p%IU0uJ1h(r-F*I0+-P'sfPe[.cYKte6S"IoCq<L7P^O>^O4#JpA'*HPYQ`o:pAbth8Gc?'gLVGJYNWnM8rjb[?^%;%-fA8Udp"M"e%Mm&-nIrb)>#F@Zgou_:A0,NLD5%",6^A$!/.dU"2p\M;l^-0#_@,k13UlN`=IC</OjjjgcIs-5&\JMuoG/)2cb3AKpX4Q3Xl/e6[%\7pA`,)HO@I]kY,Spg50o:Puen^11(kbjKE^N)'b\*a^:qWlFlgR#X!rh"\oQVXW=+$>bd3B=5u^+8a)d;,dI^%fhDhRDsf-*M"]%Pu_Q_r9aL^2h$2FP7MG"pZgl#CL>u/\CIt:F7GN:(Z,)hcYpSq[th]-Qp81Zk09GehYd3CbJ2Leg)D+sGk9PQYQ"@B>Xudn?iDSt%J,eri58R\FF2-rFZY)_Q4fZ6W_d>BbGpe%5ma[B$Idt^DD92.a_e6]c@IrBK<[D,LgI-hfWp-I>pWL=s?(_Xg%36G=rqSiPs#^5W%``q%i:LXid7>\LGHfj&\c[PZ\lEAMt+0/h*S!X/"qn55'C^>?<dG=`lmU,(nqle>4Dn^5iK1g,hq9)7a;R<i=](GL"nebm-V9A]3%HQQP*?[d7uqDUY=o>6MMbARnu]N+q0mB82Cq9.$@<FT`RC#K^'qH^:PXjfH$)(U"0J&uUH8GW5Toimc(q38b944inMnu-kF*\*to%2kE+FHMRFCa&aoWq"2Sts-qoX>[II/o(F;p0E-.ZMd,ZKGl6.#InX_E8Gq8LQeqN.k6I?>^E27*FijTc>^%i.,[FD#qY6DTD(16c%laOP"mcfL>YIpF`]i"aOhqu*BF]4O."6K2G=Jl+o>/tP7>l*IZXiKS[Dl<=O?T\,VhJ8J7puo3E9lOG=\WraLro:"p]sR5(pLSPH%[=;5jhb*f"T"b3IcaSC#;?%W;3,[N!I-nr@7usgdqU>!-[pFO__WTGb^]+,Qg!."d^:epbCis+"ItL;Vc2"1sc@lW`<4hi"[JRES%f#ccjs31,NpE"b__n-_FTD@En_rkq;F7&t!&!&UW[T'I+i+;9BI!'i0r]@i<+.9kd3653XjUgbQq6,8EF`R$H?`q*>p4],SLf"eg%_;>.MRn)kRD]Z[chRtQs\blqI`)kQ>Id8nh$BJQY'0tC8nJ>PYH&3'hr3Ad\n,@M+k'Y/"C%aX'?[D&*^Rhc[;8]('e%O@m'W4I)%IZrXf4C#W@?i/ap$l&=4=6Lg-kj;l(CXXXoH[PD)ot0aTqW6=h?JZ7EMjO$J+!+K(I/WTs5;1oDC&9D\nfKDYHGrN7HC>nfn_l"4%HI?"N4S)N8F_19JQR<Z">C<(BWL`h8+."ALcLE:4W.(,:hu3C[]QWPZ?[qCZYPsB/0!QS5qt6dag,P>\ig'PWs3:F13n<PDJ)rLo%HCguHZB:QZ\WAI.`d%%<)mA(IlX=S.?%Vk@`llhre'l'\fU9O!)`)C/Vs?QADnTg/G^3fY5?pDNnRq2\4GV1Ml11a%T)<ZseXM'G%dn&`ta0!qD^X-%g\:42*oR3:P4S/(;qXWm1h-f:3)kW_K7/>+)B.pnoVsV6q*XcgQ!$Bc(qt^mR]7/jK@Z!+Z]`-'u(LO-C]`$R!%4nnZ*[2XSaI/WX+dFOZ1?"i-po$Ua?a"Q0aI.q3E4h9ID$ibYJU[."HE[\-(rTKa!#KJl/U.PB3l'%IK`XLt(f7/5:NOL1+eVB1R%SA(T[(n",Pjf]_1^V%5VkT=Vh^NTP'qlbEfFoM=*d@3A8n\SFGo;=7r0>IJ[)+BZ)PM`qJo6RckI!PPPY6W&nd")#<-U6IdZ/2,%%S+e$)r,?lDrU]$Vf1h+10hb&XmR$bs/t^[=qm5>C9+S%bJ+iZg^&POu7$Cr?"6KV+<qH.8eTg/W%kiG+lD:MI#8dEE?QnIBIeWB=%G:kPP*Bf=20^Y6/F[prZHmS]>mp>kMoC'FrniKok>lEd=Hd?/Up$ANa54Q+cIIP'WcaM*Xh-r5_49"c(l^-K+rpq%Ok"f<OgoGq^%XeYeQ^K7%Ss0'V<T#NEbKCFq/?$c/6=3k4Mi-etWrjaP/Xh>'cO>[tI&64^RBokr*s*aG9CNlu]q"qIW^V5/@Dp2t6<?%pk+SFP?%);sOnnuX"*H\`![`Ck.+Spj4[:QKt,?hs*;d:*joh8_1]o"WB"n'ul9lggCo*ea!3YA3psP$+%17rH'9rUnc?rj<5O(SBe(&07jT%^N&`!h-4fFFShuVa$4tOp_W!@gjAKYN*5&g&F8ZFY5Eb9`S[hJF8)SN2W"4A(&s9FN\>nYbX9LG=M5IpqlMni^AC*ROo;I@[\UZ>%F+;Z[m\d7;rq+?O^V,'Uh-5*gZr\Wt,iu54s7jK=Y>g5Sq*tA]p+)d"JgLfibPB<FC\+ZP^KGH&NWJPQ]WZd\c9s>bIJh[dh+.Jt%q50ZPd`>3jq?P%0<r2aSH`u$bqt[;Y\U3uMY8oio*e&.i*R%hsI-1Ya#QI\shXk<cohRcapAJo"=*>WlDH:s5*@ZL0c*cTnm;KGj%SNci1asWOJ:KPE.5>oe9rjoSLC7SNMqYo4I/,q`/F^(pF:VM2Dpn\M(/=1:(E:HRHeGNLpkJ_po^=R^@e][nA%q"+3f(M895Ic/i%mAFmXP@!e.V)LWK=ehnZeZZ-hs31FU[=%sF%9,MRIM)1oiu@G>2rD4g[Jb:!rf(9'^\ZmZX_WtMR`SD!@V;(A?<huj*+-D=4jR)P%!>X8Sqq(.8N\?sIpXX6JqHL-e^@p%G9=LL<.=_0ZXfn][<"JNQf=cM!?E!gh`e3pFd6$r2s6q)=ATDuJ4hgXJ\aQ-Q=5CB0kP[H%%h2QWrQ#u9YO_nn53T[U%c_%I0q;BGs=6`=uiSehKRqH'!mb`<W_q.-NmdGrtq#0\1r)nZomk;CYC\,Y`[Ga>4Y/^J!Pm_[*hq!9L%e]TJp5CB<WaSX+u[9*A#\2o5.^\E<8DN(`@inH=O8<2mK3GUtAhGZRqEJW*;lQ<m655OH@rguEl;&Po.\=&W9+.nRB4T4I2ksP2E%:X=A`mj/b'Rf)dHa1qIrGNh=umZ6d#r;#g%4jEpiTBF?"c&Bl9A-Q98HU%Q#W27+\bs]]SA,geHr8.I"f\;0gqY9$AGCP)6M!o?\%09&^+`=_R"\oj4Gnp=I/IqmZ_#KgAt`ZOjFr,e3D)jU5cG.J\UgWI7</_rI=nO[ZUlV%9Kk"/@$Ga`A@<9aEjN*9MihMiJ&r_)<&%>Q=H,cNd%g+.<&gB'OCIidZmY^Q+D]D-2^GMm+L'hu30:^L^C5b.Tb,.4r#g1%TmR1%$a+s8&[dhsk&@N*D93:GMLEXm9]@Fha\N%^+])m?-^2,ojtnE:47V\iE^iUer_,f(B!e6p?N=TheVT`C@.Wgs6F"i+18>mns#0o0Xq$\d[1N+L0MFf^C4g?BY8J'kr#6d.o--A%C]AjRJo.e.rHsk0b6AH61FCk[T2JT`'`bb]I*?^)eAJ"B`6/$NHN3+)Vd8KcmiC;R9'^a0n,;eRH!L,dIW`frDBRbR4'ph@F9.^t%iIh>Tq%SsOccpJ2Z!IErbPBgCkA_7!F?Tahq<?[-oITE&48InVSPf70`r,n0^NZdap\aBKqCG]r\l56(IsP6JGj!k(*k+1[omc8I%0E3>b6pGq]H_.ps\@p4Z&%UWl_0GtGS9(i&&(At3PE&)(Na,/P@]eu4B$/sppR(r(nM)Njf+W('G'#`q59EKWEc0$u8qZ7NmfP$@%,h3s2cm_6j(L$r5_5Hli6ELtG9.D_@F`rIOgsLee$1FI,&Jo&j8D"o[E#qQ+K`J+RJ0cbG,:GGl\Ret2;t[aWB7<^V&HIoU(Tq>c%KmbB4E5<YuZU4(BOI56Yo`\8#K[a1?K;G$>MJL@f9r[paPcsbN6UgeHAO9WQ$R#N`6TKYW'@ghYRc;7]"ZP'%/QFekmN?UF5F3%"%_<',CP_Ts(e/-7$;Ij<u;9R3uWiBFsd5&uEe0G$s(?O[1oV-`or"PuQ0rJ4",or88(OF5",nY_ZFBP,,XW7rc'WWB'Lq$oFg/@TA%@N`H>oR4<!H0tqg4aU8]:W5bp.OhY@bS+&#\=hq'))co')M8D<4]aa@Ch$I@!i/ApK\_?MYuFpr:IV7+Sfp`DX3Z_U^(*qDbUk#j%;QE&Ybpc*ph6bE(3UR1b->o9bgA?dp-O/R6!i\5%@11JSGI$*D:MW1dcX.oFq%25\WfR:n.82g9:RI1tOq-X`0c+*YR9B9JGE.Y@%cV\ddbom[";IUs7R7qt1<C/Jl;L`-HG<U<>K%Y,sM:1:Y3A;)Ci^c-VhM/6E_mJLt;fdaMR\6F>&maHT3=nkQM7<kX.YU0JPj"<1%4F#G<01G^_Y5&b`i_iSc!X9FkU??RRc(5LgKI6-CG=D3]Fin8jr:6h9R#m]4\46D7VJWT[AUZZ*I]4?e<eS5RMtH)+`N#p>@CUoZ%Wgt@:[;,Vf$u=A!]7n7l(oo7JGA"[pn^ZTj.p3LE,T54G"s%fP-pmtq'G%d;h_Zu=Z0o\X'Od8&$V%Z*'U5f`mi;E`jWL0g:5\-a%`G0`^O!Sf.;(;%6n$kkbo:j]2aitJ,C5P3uW!!cdR-J1?,feo(+VZ@AE"=Z4Ss,BH!Cd<rjN4S;+%"P!MH*5f%goh<S?*hc>gIQ=%]3G0n`R!5BU1^@'Iko175TA99H]1Hnaa"OT"2NdJ:>=B*X?rn=BDl$TiTm.2?YYsRa&6K>[im2GZLKi#WB]TcmJ.ru+NRMeMf(d`%n7;Q)VCAJS6+HdDI]$[-li:"*Z!g.C\4ar5YbNC[ag2:8'#LO!YJQ<W'q\1LOfC2h&r1Ek;3A5qGnkLuE)['3Dk@@R)4_'q.^I99%'m6<s1jeC[e56eqWANn=8A`@'2X74X4l2roMNfD$'6U*c,/sFZe57qZc-A]t5U$Xb)Kf.MUQ1@Ke3S"na[@0A]d9eT%b.M?(Y5Me%2>8hmYQO960!3!NMM6=r-L?8YE;sqh4!7;]Q;uR7YrHG7Yg>0``jbJ+<F5(TBbbbiX:CP)rD]0W.>g/o"sM3kW2!g#%bX5jYb!;U%*d(F)CLEl67m]laSV]B?7[$j)!FsCG.dEtZm(<WcWn!G69[(nqJVcBjD_XOJa23tB%\5</-_-fZREiCq,?s@4%HZSMTa*9?XL-?L%,1Ddh#sFs%,Qjs!*YllfG!5JJAj[snoVdRidB,_Gk^1a6JRX\?UEsFi<C#<dR:q72=hBlW:nUB#;(2'e-95>pTa*Cl;DFk876Ca]%/bFQ?]u4(mH=1\AadLM.FI?bTH2s(06mE5*4iNX(H2n8#0qj@k2"\!hLE>7Q2"n`J_AlU]#HBf'dUNfTi3X13H_>MT`)Z:-)3ehn%_$=-@]U7UZdO\7j!=h<?S`V5dhud`A)$u'5(ji.p<l%;FMY#[g<R"oSD"N;+Ga^JAiTR%GBpNcZIDG38OA5@EOhuR]7isGD&;#a&%BG`+pXjIB8Jm#:64t9S\?,8oN5Sf_mM`r\dd>,\#q>_-D'7B0>]q+(+_^oM.hLglL2*VGH,jRoU/3F0t7PeY5dd>\HjuTo?aCTKQ%>-Vi@Zgje*a^qc,1dap">PZYTSN+B5MJ&:#O65^Ok@n6_dYcSK1`/_dOZF=Kj%+7.?kcY%Zsn13j,G:c86ENq^/lSGBg$mJ==V9N%dYcO?h+liZU5lTjl:?Kq4BrmUI4s]I,=S`WCo?a#\Jd-s;)HTnlfia26ERfkUC^ClXWN6Vh6cmNg!&6F&snT!X?c`E6!/%\h/,s<%?9-?_Ku*n)O>SYt@PNcSB,:ouWP,=DcjD`cb7!T%1H_kM0!q'YSZ>p1$:@O!j[(J^S2?gcBLMu^]?Q1I+##mcob?FR44[lq4R5s\%+#5SE?=.Li'Y;D3m6Q<NOP;m27;@Sb`e-U1aY,.T>-Vhoeq<,;<pSChActqZm6I@]33qs;.jFR'FcFajSG^N\P&;Z55bZ4LiAQ$Z%-o+M4%gk``[n\!OMJ#M=1EI6fPa86M`NW<nFeGPOBH8K4*eLs.-/#n@4=H:F>7YH\oq3(1&)-][*gFB?ilZnJSs))S'G`YSlTrq0%OOqs*aC&/@nXttB.b95=R`3=4#=WR"PP(TqbEAt4`MbkT0rkP]=E&=`5F%OF4XdD./8Gcb&`1d`K4a[Seq7Rfno!h\@D]iLj$@DW%Nn/ga.=UYM/!f38N<]Wmkc+u8:lD7W[2=6e+<f"LL$j)t>o-Zp7O?sr0Qrruk0qPjCb@R.eB3**R+5"^&<]s'Vj\Xl\'B6O=K?A?%SYJB&,t7&s9:-SgEtL',4Nk>V;,BQ]&C"=WZ%nR'];u8ggc3gfrS%SS<;iu&Xn.J98(-[,$Pp[WB6&tI6ue-eF[_U1=gr7IQKk='%/:i].nYR-P<Q)LcABErs8*[6MUk^qZc'Yd0?X8f7`=?pZ"81(WT`MiV"'u[Yj?d+8C5]Xl6X3bL?jnrq8ML(QA.\u(*,["`o3F7n%2X&^954Y@1MTeZ/jOY#/_FeJ_ZDl"AdAG:Y7n)V.7EmO1f:)MKKpm^0Q(&Y[Fu<cHX`"EG!btbSUfanTbN^%i\g$-o<?E5YKis'd%g>8SChs4`qRqF8X'mY&n9BQ!a;3_Oo1\l&Bo#dD2JZAkcUF\XZ-ppFgB3Ds-;']C:2Hc2nbH"6K_\tt!U)7p:OIoaen&;N`2:&GP%5."@u:G1:n'o!:eH`G+[;PEflC-=R.VFh-&VdO7FD/bqTk+up!YcaV)Ohfu/LG^4U.'d_XP2p(\Oj:js2Cone%LB2W)Pm$kK-W"R%R.nr_I5YHMTNZ`)Ea0o(RCe2S]-7PGoYsmaL1ceYMZBG3ee#HX0[rq?h.2?R,8KU&:')?8#Bu07:o05@4eQNC[82&WQfLkU-g#3h%Qs-&L_6nSJZS\e"`nP%Nm(:B=o`?A_MU=1QQT5W2-Z+17LigXkW.+Vje->XCgl=a,C5@t<oc!<t-XAH\eVXqI^W?+ISSg5a8"S_+%olIOP-2QH'3DVd*7pICecW(dh$F:=s72_.$d][+NRKIDjj+b?'X\/jUiXR7P\P!rrjrdI%Rqe7f.oaE%nL5=,c7IQ'$8Y;tZ40CI%PE!')0;0.-Y9K'cjV"Y5XU*2D])O?aMcecW933Z(fkb/*?BI?slgIKH_3qBLBiIn_R@BCs*%Jh1<=:EOjr\CF;R*Td;[O_`AbDd4%B#Us+OG_H<Ah&LO[!>[Adb!njo;_5a<*b/RXXcsB&j[8(!8AWl@S9JP,8Jk":W@*OK_nY;eG8?5RX].G11%=f86p)5F7[DRA]AAl%p8_\A,#[%MjCmP*-LDR;W'X[XdBmM[Of$n4Pj6#u8?KgZ:2Qu\8^4Bf>&D\G9eEg^5cqZ?8@sBeAF76*AmutP^_8DsObP]p)+6<^%mqKr%m;FQr.G0fGX]l6)d,mo`/f])I`CXmfcF@8C-Ms(OY2Yq'9XNHW6c9UNOR'*bo?+P!&"o;W()',9Up0=<328"27jA`VEEPMj%(8'rOl85V6L"b]*mR=fa$RVK(LoO"%IU9L#Oo;[?JSM8mp5rHJ<C8CL<B*l22DOkm!7GDk<C`KA%DlGT]ga#Pqj)5oX[::S[RrJK%gmVj1FV@#]l:jamnMa%.n=[n8"VIbt(2*9uZUZ67]DX1dJGu:mG=^HN`0P_?eD,A`eL5;#e9&;2e@N8^Zk$8Qep0C`]1qFMQRe"u%$mM]e85jGR:G[RX*k)VKr)A<kAK?^HCoWfZi,aJ>`hHq?KI-(ePgr$Ln?QasBQ3GS(*Q*IKa(%4S7;R1L@RUJojZ7F>*Y^HFn*:Y%UKp#qYaJQ+:C3f0onMF2Gu<*8OJ2,WgcAjTjZ5A->aTcM#@r^tRmn?(BT/<e<G&$:%?.VZ8=^,O7*-)7GNWQj'r/d6+_[i?H#leo%ieM'qNO>(b65DJ[X60ngThg[JCKp]peAK%LXnHG,:)o>S6BP/g)m3Am).@TX(o,I#:GpM[rL:SQ@XcJ2"tU#uQ8Ma^4N.X.JdBk%%WV21mja<Ue:q<B92AKG*VPj>So/8'923=fa$k,e0eA"*uT?^=>dK>RLp2N)J4WokSF=a_/-fr35lZ?78:](pq?W8:CZ!-rk^p6oq%]1UUq/fF#?0j]lr]O"@S6<!j(b8o*"KpLX@:TM"I@A/K>WlhSP;>BN2ehIaB0*\3:bFGB`Z:ruB.BnVRoc[A"X]5Sb-7MHCUT,6d%/.W^8!g1<m+usX'g2Ug4QfB(3r_soDI0fE;iX#oWA2%)U;RqKC$+5Lf"1JlQ<YPZ;Oj'f'3ta51aaV#Dj`rUM%WL_.R\rgbB7V[,%pLf#%-NR98H]F\lFa"1`EX3H&'UN&f[t6r2Of`)![XSQE[J_9?RO2%jbNik"Q5WH/@Yipa'LW4iKGbeeTF*IhfsqEW&a=^qYfPpA%mA]rE8b8FAj5(pU/bNo0oYiZL7CI))dP0\?A0"$:-!!WX$J(!C2oJ;=`3FGQ[ND&X7[Jf?hC)Yd"9LCb$.m:ZJ4L3iSfE`*%7-$4%U?*;ZVCBnkZO])b:AcGYh/sPdZP;I!Ls["X9@SfnPF\,_?VAei1'6H`)'P_"1.4X$_tK\^71,JWO=Xn'(#fe<aAR1o*G<*J<f/\k%^V.8Oq&)"Q\]*=$((hlfcl@8&lF4\:@^ViOOa!H)ReLXm\gAY2Jo@$phj&Iu^B0s.W"8q"UoEAn(hOEEf;ED#8p0b013%DC`Lj^4%XhBG.nh^Vc=/mJS\WMSU'f)j9SYXOUQ6+j[_d/D$2GF-]%#@>-TPB_.dYLc;(6&#F$I"YM5Wb<;NY?MCJ44%hUNkbbo+`HHi<lX'%&5/X=RV>t.b=RAs3VV&?/iP02)5A'*eNAciO%V%Z^*%\^3G2@c1)IqYd,EA-RS?3`V])CJ.ai8K9gUO:gQYCY$_,pG#R2'7/=a,G%G_DbLGofb+.(4OopXlHCKcO(@/]C/KGmK#kc9-GkRJs$3nj?DtP.\.uf<'HTMGRj[ao4G6&UE?,.XU-.F!aqDcWQ/T1s<rg.C>JL%3d/7o03>t2-]L+J13%^''06!?NCSp[8ID.K9c8J@!S7?sOUV=GEk(>#HWOSq9T,^2;;+5pA1q4S6Ie,g"AReV,47BXDkF%!0ZaGp%hR(c',c(J<>WMi4bNHY:ZMm8QPC)JU!#P&cY5_dT9VeM#o^>NNGFPpZiQ_XC`IaQR,1r?p_Vb]D"a;$tYuab@N5't-@gj,*3Po2j%aY=P=QQ4thE6/,-$TE-[bJHjh@'d'TN:9u[j8bs/D0CHY,/ug^C,,[dVoMn9B6_48\Le$O))</e(;96%EEfW'-?iTFdK'Ps0!*qB%VMfQJ_mqD$h\!;T.!U:2+rVM1]Vn"(k.F7$_c\Wtn8R4lQQ'AIaH/R#I:4?;@)$Zs&cR^@q>^VP99*t!UuVL`L3mf\lmpDq`J:^s%*?t2;0c""'*#lPXh=#:P@ohgYI<uqO$T=<pem%gj)dF6_Y*u`<QW_#29nG:[\^AV1m`Z"q_9Y;p#2g>NL.`"qBM`Z(7>$2%4;oh4%_PBK>0eSHM*+767D+F@X>]PKp_b)qZ;hK+#X;W]O^oLn])dq69_8Ef@[Pt<TT+-5Yd!^Y.79A;lK4V@rJ2XnqJe##%=N;Y6)sOX1%N#U@=!9ZhY4M\Oj+mj7*NU#PCk)GTFi8."9%qjd=_%H[+FM%VY%[S0oi336AY]/7M7sI!uEeK8o,nK1u4<Xj]@-+Idj.Z473K/r:%F&6n9SV*)8r#Cq@A*BTH(e9?SNj*W8j9SP:9+EXu=?n*9*@faUo@'pd=H=\S*O_L>`XWe)i9[\=&$U4n:Ki&,IHD$T4mn=6=4.$P%IqRl42cr1o%e+_Qj8bB6qW\'ILK-4Kjq/m]cKC>+Ck0p.qDb"o,:*Rs4]:%PGs,DOK\7UKDLgKZFtgf$@FH1SpMe4dL(BUjiV5sc%!LD&qSF\r%LX?^R&!n9pr1N*^l_bL<iVfG%)"RtYa1+?=nc8@o(H@f^_o2fs5V/-e3C'Zs!>Z4R%e5)%=:SsFZ$?guJ[jXsC`k>h%^^"%ig3m"`8DnGn&/Q<o#)TVi\3XpQLU2WOXq'V"Yo+'+KXft!*$OQ*""YTJ3PlG=l&7<MAAgTt/&W2W_A6UU)rV0EaUuN(QTUco%,io546Vh[*)uLkPq[=[Aq]$fQq^`qaq`H'O__../TAAH=nS<@$7(*;j:W0Zs@2*_!FuVnjpK0jg,1p#;hr#<Q;"KZpNmS2M/>K>V%DLHf&DoCiFis6sO3(GAW`]?H.+l3e<N\QSkEf>@`,nFQ/EN'!<&JlEp+E>683Ck^M!>Z=6ItWTq2Kq+oM62/UMo5c0B-U!Y_tcj(%E+jlh,SE),Qc)3TS=(YF)W2r^B,tA-Z!e+2PITNN6\u0lbYaO4LU34U3#^^(EQJfiP)PreF-YAZ7bC<gcl^P7@OiO//9/eL3D8AV%#$=OQ_9`sIBn\GL';N/Z-:S5B9IMm?@m\:c-53.!>UHVq#b-YiIlO&l7!Ube8IC3C<436:P6Ge_]#AL>[>Z\l';Hcl-^5T\3MGLN%cNto<Qqgn,JEt.=h.8YS3l#t!Os>o5/igdo;H4a_HK()4]I/p`@m7.h*mT2nEWbYU.Cd9F&p/m0[H]CMEM-DVLU3XU"X?,X2OG('%'_dp2\PQOKKFPmH#P_,#E.ANHA'"]uMWHn9MIIMAiC.b._jOBQ[Mq/?"^3:Z_2km8B1VE_:X>0/o8='TP`-L_>U^OJ#1ugYEeH(l%EZAI\aY5KcR:6J^Ybkq23h/.J,L?^;8p\XrgaOj7_OfbM"8jSsGW:=J7bIePQ,Grj/1T5l#`hRtqVb*t'23k(DEe*KjZibBj*Y$d%7FeR<\L'6J9l_TorqFs(:OPB'XUXaG=8,f+F]mcr`4=BXeZ]]N-4t5/YR.ib#-2(7WmhDE701YUUo0,GZ6fURYhJ*i(0.;]iH1i<%-gd'2A>W,s$Sq!^s#W$hK\WLPb"8]l&o;#u%@NEX6^q!4::l/+C4F-O:oX[1+*1O/;%DeCS<Vd.G.LOV1dpesa9ZP@N!'>$jiI*U%fub<siFDY(NN_?SE456CWtB^oV-m302l(q5KuH+E>F"TCI,f=DIOB5]6pp8WK?f*Q@hN("nV3SO=j36Cju%mE$Iekc;\n1&l&3"$%CQ*%Bb4]#^2bl<sGG<$o*BKp:UQ$mZc(7hFY3d-M^/P?2;QN.cURW(J2&b'5]+qa05X2N+A]gq=>sfdi2>1e:\cuUJmPMUm1otm'%NmR(<\VYH%Tm8U'1HQFjQ8OV5dn;H%@thjEq?Sh=CtI=?DX/511"bEg>m%.\LuE1%^m[2;bAGkp=?#\T[WdB'NK,1U`S-Y1gTfTm%p?G.RUSFr,cr'mf7u]NP=nJlEZ#8F3XQ]rV)[:(81gQm.\p'.IqE;B)D"e;ZGgE)'BH3,()6A^Sh"?M/7$P0S)QuiEcHc70M/um_%^Aha(S(ect_OLSu$9UO]<s-,DS6r]R`?LV@0KF110oI5NZErJ:S[_X5FefN>T!f5hGq'pH_r0;+Ue(A(DK]b3B#r&:dl/ElOk(o6%pDSYP8Zg38XYoK?]Bph4G/"l58!e+U\Z$0r@Mfp&)Y)e?0ccZ_63PQ`9;Nk7cg>5h;5#Sj?8,?p+H4+JZ!a=lX$D*\/p(Qq./B(t%@SE7N[o^?$&6#?YSXaJ4kp<qMo]:Et\[ir`2W"9JMqDTX;Fk0a*!\n8NR%D^qk9uYjLKrC?0(D:<K1KMo$V$fi/90iKYlC!??inf%CV5FnS80G2"Hm4Shd-eH:cN:@kWsS+CXicH=%S$<8SL#r4J1Mtbgd/:SSVci6W--Mi*Tr#b_kTEG[sN$d!6`S_btb*-g&4?V]]CM%Et^=H)3\on9h`<AZLQaflot_(ml4)o3ij;*3:IDdK0.Z[K$1g&"m6Qbr1tUfc%6bfOQpfNj3^e!VGGH)eICY8*Ke[uEZN=_=.oEa%p*L<Q44[cmpCtI<Zr[,SXa#3?:?2=rJF[dDljS>*Ot8Z&E-f7%MTN$4Z3X*t`GMUp@Wt8DT%h;Ya#]"G[0JF@SWimPSSHO/:5E8'%*U:91Y`j.*jNMCirU'3nPjD]]7;TXO6bTiqX^l@X^3rd8=#]3:_\CrEZ.<>08Q[i``*UW?`C_N=?[QFZQ+^3[6L$A8`epJ0+9:KA%QE4"gm'cE<1$o,G@YLrS*l_BGP*o72bhKBfZWIY=M)@P%eOqUadF+aiZF.9WI9/=.2rsYhK@8=HdaN??H>q.S+cY'Akcb.28.gE*%]S;u!/C99&U3VHYh82k=)MU9`Q;P"rR8[QMMKuL9k)HM0(:O(^j!XTVl7S/%G2?j_0uZK:B.-Hp`sLsZeWB):]51uk`]:E%<j@8+%q)[/E@etr1rNE6scP^gM/=L#@O$a1fIB_j;qe*rE$s"?$]qRhZjL0VnBu9ZpkQ:,j%6ND@Y"iot9T)38lb\Q_B*Q7[!GE!E**\er%4l(?iD`_udd/T2GN7e0SZq3",:>291e0HUqd-8R):0-P&cBQq5AOiM@`Jg8AN;PQ*2DLuh3b?2mgUrL`eaIpq[3)pk):#GOhUQVR%#,'*'V.3fWNb1kPOO_!m_.nGfX)2=(L^@=4U\Tpm/U(oF@9rL%mq]0WG&PrhD[l!cCJ[rV/(_/BpEibK=bb]AB'RU!3E!SO1mITN%B!K.9`Y6A=R2%b/-j9_c$'Xs1Hm!RSb"n-OTRY5].$/0U=D"3i\&_JS"BHXe<WNc+PK_]7Xh#Z(LXS.Z?9a]?"Q_RB<ro+M3[E/J%YQTPu?mKu7%aOI0M4>IZF0lGcKW]Nsk05MOZ+N?iM11iVW</M!O;^HZ*'N]qO^3[/-plE#a/!3366^s2Qn70nC!ff]J`BQ^5;RQd%B[)=I"WaM/\$!9%FFF\'$0%db(Td)$Wf&kADO\NZ:7@PEalPj.KeP(PPDgJ=A?$=AaKdCjjoLlj;%:=NHpj([q&rP)-l1Ye,/q)h%3l24W3.K%42-5o@1"2U=kLft>U^"cV7EX0&8sJd=Nh37;>8RAg(5R%aN^YgXg=N\W(',^g^b/hqBJ"feeY>p7]h&o%@2@%R7trj'%3&kP9-uZG9K8J9T=)Djfm)3:8cP,kt3D=];e)#;Sd3DGVUVI1E0!Jnq)t])n\].?SJMWIp$(7_rH75\q.WM[*fkk]&8YXsd5$<J;%R9>UmU*61Q@=Emlf$X_3jt9GDq`na6.bFa_(l*jM7V^R;YFc0I8\$l5Yp+g"ZJbKtd:D7n7I.@Wa>n:3BNL!(3CsaW[5M&r>51h!%'?>F[;R;<\0k+9"JrH`-C1/[JN(kE;!IKZrp*6?N!e)b.8h!0__a\o-T2rth.Wb(";F):e!\=IP>")%q`$(2&)MU[.lImOt-&\DK%r+OE8D;DPC<]O]VA#A/T'P<J:*K61!BU&%Qa%]McEiFXX'H4j2G#OFp.9EpCebg)]T-[-Y7nVlSc8#AoOj23\-Q'6$@\VE81::u=%d0)QWc"nU\o;d,kc9)5a9W^b[=qXsjP[Xt.Es`gF0`VdC1M[W1aVE`DBVcE$=h[@qH85I?5d9/%egI1:dYd6`/(^bfl/X_m@n3hY%foEiE^4$jl9U$UZ6/e&r*#$;I%I<H_q^u:2F;'kD-QDNL6)HkLr@)o(cO=E#hb%fq>4uLeIC;RIXhoJ/?lF7i@oq2*%o?R]0s="e%TY.RAB]O_d)c'smO$&6f\r&V9U<ZqP$=ks&S]CmNj2gu`:D(-;7Pp,fYR.M\M+/PNJ)bs<4=Hs_RD=H<DWeY>4HM0L/^X\B6j\(o%"<L)qn8;P9*gF$!P1%,J84pih*Z!/MULP3hd$oD;_$>BAY@8$BPRM@jW2&A-@5[aDo@SijfE3m"1=T.e!@a/sDm9OYJAesT4\4S5%hud.38/l>Q"]9cdZ3ic2b#qC'Vs#P-*diM3SD5Uf5V=P*H7egjBrT'&'RLtc5odXm*^jEQ$#o)oM)Ncr%R#Wpm_^OHTWEquR*^If%m]4^0GD%#aoFB>[O+tW-o0X@a'+&(LZQ44u;mt>2ZG(Nl%q'J"-MB^!Na!84HQZT2LL-A#K2U6/0X1kZX2H'*/9H8I=G7gCG*Y><%Ta.,O&58lc\t8R4mIS]l.e^Y+^qE<L%k'3D[#.#^/m2F6_$<s(V;<2>5a?47pjail>YOcUWXP_Z+-:LQZOK,in>l$\=bRhcC&DBO%%6uJa&P,us7Nh=`e![b0blMkcJniUlRfHumXO_LoZ;>;mC]Y0RGd1ij5Tn:IPZ7uUq*H6n&;18EBf<d2Pa?P[&E3r9Co0A'KN/9Z%nd^Se`?;ChBbc8.6j^\t(khJ4?!>2i0]06p6"gDIcGUhjQF$ubOJ_,N\E"K[:<fJP5[k94BFJ?)N^83:!6ub/?E`+o+`=<&O!M%I%Jf(RL;8TUp1\t%e*"AP*7"L"8mYMIGR?7(jDH33?*BLI(S@T@;id!:*mL`!IENr7Qb959(B)<8P&1IB%E!NZ:=N!L`'*YhkS55ZR%"8uX7Z$T=j0$V[f;.(BjMA$.Y7s$U9$7,-IfUO@ogk%^L;*mk^h2/9GEM<XN-YhK`rJnXJXb#n/\Q3081d"XSGu>elPa[r@%j_f%%n!ah6+lt_,*stC\F)dm!Dngtn6:iOW)i%"RbJ@C!$4PTPX+u<$F8)=mkkn$46@mC$0&;5El-OI-\kj6rP%FV:(VdlMHsF5n"en^7%(J9FnLas/U$EX6<F;IOR*g?%Fe9$?*6;;Z<0!o+O^3*O=/G$N6ok8]e9=E$a62JF^CrV0lhKW9<(J:`^EUhk=OsXo!\%,>Um%2X2%.-WW/*t"YN+3"(Q;YRPsk6lhtP)GmGPHmP6#]%kR.B];3Z7_N\LQX!B7&8g08X6Uih1l%DT.N6kF;^umI44@.VpKi?lS=.U6OCPb%R,*P'jQFs>-m=U3SG:GG,!L+&OUj<1'HbJibL&@J_NJurM,M%)13Y*<X\5r@+AS/3YXhSa:6\IZm$X@lO=J1VSLF0/8W>[O\EfI1%]d"t%`s)",_!7GbfV`[`=OmWV;N"WHWXj6:Fs^u6j?q&QZHq?^P%F3qD=aH3^Qa\Y5*Q<APe.I&T"rN/c&!(!I-==iO<lL'M66hu%U+;1m-m:=cmR?k3hQ@[6GtCU*!'K3X@=FVUb(V*S+ONUa#TXA#$W=m=443_;fTDX1:ZmOoj,he4(^Q]OJbeCO/hW$pj$8JNLa.S+%5TT@1XE=X(r=e3hB0%Tu4p3CZcG!uCq+(H)EZJXl9Vmg^=X6Q#HI"Pb>C8K@D5Njmg\r'IaV9_n.M?C_\g4gkiq5hiSe4Mh=;*p7%a'-DW9.Lf),3@;MqO=^\=G$M.b_&*GP?QB!+kK>$Np[XgD&nuIWJFMA"qrAd)`^X:W\i.W=66]sadh.V@o[(@fO$Pm)5l1FgqB^k%6$lJ<Q2\=+:g0c7F'A$MQb@OtH;t1*_Gs@E+*;3li%c#tF!+!bmX"+gf:Kr`a8J_I#CHEP?2lq4/I;8SZJ%*P\<jmh)TEI(Nse^K%&`Mu*L_lTS0MZ"m:/2*l5U>ceprJ$o/7,1kPY<V(RA3GP0QI80ZO.aEH_9ZBm>T)l><eC>R+?2=q5sJLXNcr$+m$#ndOs's`hIbN%X4GN,OR*=Z$t-Ku3gJ1L,-'=V!R!#m*Qg_oKUnHnZhc6$HDSIA4AbVr-g,aHms3b,Pqf2Ug*!ejRTE:KI'N)1bj+>2,),;`&e:u.%JjR\nOsWZtfLA>9Bq%A42gWjg`f?u9l#[r8Vo0);:#0"LpUWpfV7P2k]t8.Teo_@$)0@B13VC,5V27CNP\ako&P##(]i`5Fb(d0]%qjZ(FpA3X+\"#b\eO<GD\92jj(Z3f,gmm]"=hW9H0ncf)<a55OaqZ=?C^+$8>^50ECjjMr=mXW,HNpf-Pr5FG70)Eu)duK(A%,6b%7U,e.aZ)_\eHO:Prd/KFI>ZNEV(>T<N0HAFnHD9'I[InSW:i9seRXpIoHQ(e(=#9]=W%[T)&RX.B=!<F%#g-4<M7npXCl,2J%&@$%E5qC[9$553PB1S=7`.n(7KV7ead\YhbKs%PXGjir[\SjMB;!PNUl:%r"H4[d/^,JOm(KS[*+@kAdOHcB[E,.T1p#kO[%]]<A++:#%F<!?\/7U@gMHA"O\Kj0?CBH@bVR%G-o!aGn`UA5a'3&Qj!?9;Tfa__]Nmf_XAK:Aq7.MqRC0nY`<PS:aVL*7_EI`nrID_#8Rln,5%U\hb!osPZGE*Ll%-5k>mXK,Z#G0TKilY0:<l9q`Ie(O*RSQW$Il2`C]G3kHt`,f'ee;JEhZ-5K.R]EBF7t"5f7U:Dl7D/u0;6_p=%Li[#&H3P"GY,f"/WkbC@!a=*S8D@+j7D5(2F[?l:@cg$qqk@CBlG"l<aJ*"b\fRiOH85#r\p[R3B(]hc<=`0Dj<CW.[&Op^plK,)%_lJ)!d8dl?l)Gf]Zq,;XX*XPIOjkCWeH7_OPaB8ne3(o(26Z;=II+!1\fR[*F<;p;=QUgD4g40;R^Dd#(A8kl>$,SKHdGDBRpL2R%&*5a;.7fDF<3gd!K&uIG_B-pO;Am`r?DN4!bdnjs-VVON!bnpFXR!^hCfV#sZaGJ<ojFi,9YkgV%i2k"m"Ui!.M*EL9AjBph@]Ui%?LKRr=g)8RlW4>4F/:J4/F2\Gb-nAfEQ%d#];Pt2AQe`d7D5'G,tSpGTZ/6sSh0.q3\3XWHP.pm8TJ9R;%I3[H+g'[:%PNPY3ABF%fe=ce_a;b^#VbomT6S8o4OrJ#>18*>B;q]0ks:;n5Mju`TXEdihRo^e&\<,.Y3A65.<%:Rdj%;mSsD`oT6MqXf(;N"kPL,XIcjBW%?.$!7Y39#I=7j*#F@D6SQ:sg2EcEP@#/r*=W-+CT(U*%rD7%`.<qIRVZm.)2[%^(1cA'ONH4XYL2)egf6U1.IS&Qt)2!?8J`PeG8%B!VTZ.]7XCbYngl1?]p*@O$]?_BCFUYU0^'gPR&2E0<u5.s`o!WGm3,71\P9[K[Nc@O:84=7fs6d[XUj"3.C]\tW7<cT+_*U1XL4%dBa[nki"t#I\A9<4+2!ZL-i='S#j1WK:.1[FE_L.1OXcAI6EPn[n$[oI($s5K:-rA*4Obu2QS4em(X(g1/IU(=2SkA[Ib5H-<PW`%1G(pCfJJrF[k+E8#;A*=pCrbg),`0I#D0Lj$9rQ8Zg6QT-&m0Z)AYN2?Tbb$(3Bk;?gfEfgGMF3VhcnWSF)ml?-*Z/H\upeb%12[%EB6>/K3J&$.j2>Lo^Ds\p"PF5^5/W<4[g@A5OCi\F:Z>):%U`,pBS=.BG$4f3i::0]kKCZ&:?LR:@phrR&m"m<4i@GVhjJ,ce%(W%1'k5><$Wn-];Z'=7_agD+E2@</bX]mE\shfUcPsuHm%;V#>2(hUAJnUn3M>O42D.W=3G'J&%^2"'n,S"-HS_!86oIGro3F"E`p)4%5%(C>*IK!AQ'43bqOkcKfdYnDU\BB^IJ!NeUQ:0&*#r@mV[.)@1];I":U]Hh3XWHu.e-$J@ZbaeN^#:iI;1\UTugjdJ)DB;m-LSn%EmUB<`DHJ`Hum&_5G7D2m%.\[Ho"3P/Ejg-[,+_,h.@V&5dT762#`"H3@D2S+&HL:m%,C8.6BC,IR%\FXLAn;[jB`[7FIu$Bf&f6%I;qrt%n^FdG"WDQLJf%@=@<6&MfAaF25gN]I4hY2'WFjeIQ7B/;PGrJ#g@C6lRbP]^e%>`!/0^p"sB"=ar1h1!!8"t<</3,ef]_`%kbgHkBE43BDF&V_EO%+2nHXf&afT_#@8325bjbpsd*7K*5B)gDTA1pqJFTqAB`(-u;m8?@5_sVoifAuE%Dt@.!9.kn@0)?P/B72b%O=Aj'`P#Te'7nN8J(&]Nhm)T:J]/WOMSfI9Zp#1Z-"^e<.#n<:@@`a;A&m_s&&h\so47H5k[GsLp7ZTF8$G1A:-D5#LZ7Zs]]2B6%Z$5J#.4a"Q+%dtmbM%_(I$.D%Tl`6<@XTXF7CK:G.'bN)b(g&?hYL',W"89_qU#3goq@nr\^&AaX^\S]3N0HGeq]uFi`+H`63_]j%4qpm%.j#+$[QQeITb."3ntB1%RT;TdWl*eXeq`7h6X6b!HA_'kqbWdf8W-loLOu/^<^%5\8/<dI5*W2V=SkoUf[EtFWoo$n+%k^B%:@$+DS:9X&:6a&=>WL3g&\8YC*MtpGL7&#X8#E.=Ddt-LhWpENM(Z^M>WYejDWO9kD!4qq'N[-9AX/Ycm7tt%;!9g_`eRIKmBZ;V%k^q"#LXPFWZh:#6Y[q)::t"aRLLLf#MtNdj@k)79]#Y2_h1n=Z_>6tVdcIkIKd&BMQ[L82deZd'S^mL35]3hj'Zf@;&%.5i:lDRh%m0Zf78tV#W+,W+5aen1,o50s-7I.h'p7W$`>c\G^H_5+X%YS!5g5//WM^G5h)0U<#<;-[Sl):7=PV1l%p7^4%j3!/:4?C7NTf@Ns%^W&I%c<m3F%u"#\*?RmHhCB[?"-^38Gfh=UCEH/?k:7V],R'Bs@fc7r(1SFYVu0!L6h`XtNXs*STZN*.OK=t(:D@5F;T;:jHfB?P%$810`d:VLe=Ye*2jV6#G)R]d9K#sk]5i!V;kR1PG/!N_+!aj-t>p[emaTb#8E0RKN/Wk*5b\NrC&8=?E]4[EZU#X:M[F@8-[YAL!%U@Tm0j2&#22C59bahK/K#=l\\R05)V"5>)-'ZTAU(=DO0NbRcKJ!6abo^DGuP$TY52/*fWCm<ebT!QikTU@B;8t,_,A_C!mR`&DS%NTd1K8QD8MV+nGt+k;'l9sYK(0f>e.ULnAFf$,C5gR?qV#rLCS6>A[!Lsh.SB_$=e_J.Un6]C.9-Ml7/2&"X0D_2p+G_uK;1(IJN%B:FiY]H#h`&lFNfce$WG+MgK/5:<j(b$NXoq>LrOB.MZrR#7.Q]N\.).5[Hs/#B?up+[=!I,s5:&*;mDqF/AiS^0`Ah:1jLEI#"'%34PJdEpHsM>Yj9hXsP?Kg:/K,(.6?Tn'd7t4U6Tl>=_FajZF!11o2+LF$BGi1bYYSY@ipg>%s!gYIWeho_.roPqE6bC$C54[$NDi%Sf?-iXr0'%0,h<eEE%R[Y2T(NZ\%nFAh3"b^:0-ge829fg\7):26PVN'7oV3'/=2k0X>eJ#)eVRj0P,4<X`FuAA^gQm7kh4G5C$t%K.LhsAtcZYHIT")`?R$kM4$aOh"i_Nl_GKF'$*/%Ur)al*'?]31)"NR[1[K(#OPl8M)_FR*A_=1FdsnhpUZd]YHsWVH]:06'Bb3"%H-&q_-MaBE-IJP_<TK=?%Ep/&7(KdA'C3aVqqpe]5S`WjXjV)LNb,"$2NrO9Yb#OeE=-&VT8h;RPC1cl@?N;;^T5HmhFEu*p#M$k%ogF]jO"IF\?gPP2[G<3u.ei:fhPQl5dBT!cd>PI*MuC,e'5p#,qCk4@\l[,@3DX\$r<?m,N992D``:'<me=HMg)nd9m;sBF3npZE%7`D@rTX'8S[E#Z&\G]T02KdTT<d)B>@[dA+0Ve!JpU/"M$;$EjU[6PEU[3_XA[eC>fm@XQVh+NW^a@q)*+S/hoVRjt$0o`DJS.j8%F6M&JL2kQ0P:Y#LZ1Y9@&cf'NK;Mr=PBja!n8:,0M6HHHGsXe0,L-MDTpl^h4N:%IO=0*ASROPJC3P#>Q:k0?:%Wf2Wm!CGXe'f!%5#5c,FB;61SpZ26<LZ0V&\@@])b4s`@!#*Nq,.j0LJsCZ!EsUJ,1@gabG#[q%n81,(9$G9eA.abSXd/U89\=A@6>L%2p$Y2Y'-JA%'j8ijERn=aM>.d/+j`]lZZ,'jnkX"+Oo6B5^5C+YZckc":*W!h%!\eX5XdeB020cAQR,oj:Qkbq$gC&-F6paAA7c=.Xu$AQ#M-#K%U.\r$+a3o"R&&Hb7'S/ER:l+)#7>!&ZUCln_QmT-0Y.IDWl_1.PL0Q3CNC&X.t!s,[18qHTYJQiVN.[7'_=m57-sc@gap?/oZStO%DD:Tl/lun6&aX%f;+9S7a$mlDI8%60a[VUZD/KFPD3>#h-gR>.I4'kYkmeLoG73KdPPhM_,"/>%U.S_aU,a(T[R_;q03<B^pm=Fo%=UebZEh3s\[@n/Cc^FhHN$ffhlj,,i'j6u@:JHbODJ0N:_`&t!%Y0`S4jJtg(J_%i=\ZaGHK#Nl]f1)VVLK\@mRihs)+D\"@"_(l%9393l'tFQ&nZ3C@lhVW-7'].rm.>?.UW[S7#3jiZqUd@"GHt79=Gf40Un]*4g,`s?qL-)3$b\V<XX0O>9=$;,2+qEL_Khh:WCWDf%?;G$ncD3Te/Mb=l0@l\A@Vs8$+paO19=E&C=?':6..q^bMTufZ?([,s%D(SRgH*I9MOaT3fA;UcP"SSkFdifke"W?.M8u<$ObmVe%SM&D$]J'u[.MT`8'ffRgjrMcCTbc?i?6O?adL)a36G/+D,Zm@pk,pf%H7n2?:>qH0(A4=@lWq25FNrl)f":t=qg*i$,!/r@Nbel3%(,PEp,unLqP*.13Do7q<K7VXUcO=?!hTB_E;Y4N"D720Qf2YmZ173e;^h/E,2"V'0+]:%g8!mgW8jeXHcs=jRoEaXk1ATtW,KtP=%9+NL%&gW0-,EL3+eFo!a$`Z&S#`eA[[uj2-6)-ji!LqB?qT4jin8e,dM**9M-6%14ho@M_49?A"52!^rGkjl<4Flp/WI]gn2"7^d%#9NN7(jb++?Rp+2GQb@i`IS8oc(hZN*b_(6:T&1;,`oqV;qqBsko(DZ*>#%W3-,nt4R%kG"WgL^U,u]r;a>92H-Jf"(%\c[rq36O%qmV[m/0IKs2=_%2WMo]ka9.`loLqN-49EgQcE"aU6=F"RZ%bY*adj(`Ged!q@m^?ZJFe2Bn]ZOhb^55iY+qb`>:8Wc8+.uln7WZe%C)4Ms_\^%DD\KI*Fgj`H^a%3chQ+-gcn)^TAAK!o#0:dS7=qDnB\X12C(']o!tXU]r(7>Z_TZ6#2Y)C4PDh(-Gm&?oR=&sI!G1TR%]ga'=>a]BK;j.F>&pZa'6-e!,a9.;n_+#JBj=G#h*-h\HbILX6&LKO.\4%I78_KouaMSg2>n9)GMgdMTn@3(7F7_2C(dJ06"**,D%(!(A"I;0dGTK]\%J&>\"OA]oIJX4Ph*Hn+S1AB_*K5=h[ZPTn>PU5ooUCKgVMJ7.]&bJo`(/G(HJ]pM&!Ac`!lUILM>-pW@`Y^g2%Q^"EN[\VXe*-GXGiF3^J^aaut2/C\BgPnK0q+=E%V4bcS_J`&)N-H7`?p2M&64ud/5\N<b73*/kW5E'YFT`_Z2<ri]EB?HV8=UK(%K8tt7h[)u"qjQiH>M-%?9ROmbELk15Q+kdR-Z6R(/(^2ME`kEAV(\r/f=C*sVKn'BX6V;lTN]rM`7g[C/@n4)4=?l[TWJsT=np;%%mQ0C(K=e]i/0F-q\[]pEBb[GI'8WO7Y[/lTY1$kH3r>DbFlI1&2O;m9U/#H>i]<!PR*Bahc#PSR'8M#CNJ)^mS*)Wc=`hR3ps+T^%#;s5:&QO"X\B#M'IHMeq^&F8OjDB9W<]`4R1\\Ggps*V8FAluLSXHY??MVmjpLYB%RJX]Hqp*^cX.&KNIEP<3BBlH(loSE!kcV8d%Q0p[bVBKf4+?Yu<?p2*Xl]9kE(:l&4jZ6'/-1!Z#h^WGIB@2gV\B[P;J=>e/GiQcQc@qHJ<j$N.3HXUKE=?3_drFSTGP@Tmb\`l3%LU)/`juG5X5tl(?M%lSVH*S(o'D+fT3Klp6`cEIF_i<\MPk`Z)Ak5$H=MIF:cdm#h`)d%`a(Z.YS/,VdfbMT2'>GnThkg-D=I/dd%p77&H@uTkMg6IZdbdtL;S1!`K&5*f%RG/Kpo:;<@(l[q-,,F?8X57=>ELdKpAA*:=C7*)6'*mVlLK)U1BEZaGB5(Rhi]+3CiH?2R%>?GU"ZY7KcF.<DhSf=7aQ]p75juA9rcS`aWOQJM3`f@AreDD8/:4M#<S8mso.TQ8&pSj[Q1<!M8=bD,>0ob5)V2)D"fs=-!'3H]+%&r8+$+`3PYr#K.[9YN+K%5s?t_q=p]Pin^PHcV(`^8(4n1%5Y/k,H^+C%t+_6Pf9u:d&9n22ZagNd^H2[1/Vb&uCKdU..?sUY(nN%8W[1NQc#_SDFkNpY:R+=Y7\?tSVo@a0.q/r_JpLh8H0UZQ(/V*!SJHg:/YqN/';mHNPgK;Q=;H'P4"e+6CK1u\4^jOP@mJ\C`=;#%RnB-%Cl1#d[&LN!V$>:Qe?$T9cLo.cWKc/<[i/grgY?G@,(O:[9h;Ak(fASIo%4(/F/#S[M*[Tm$mthAHh*ub^i#4FgNNOc:=tZU%6^KuX]:J$F3>#?>Ps#pqmUo*IE$U,L=H7^KAR_@!Q7hC3T='MG'kgJ+BMJtAcjb[,:E)HDDsUsbcAl"$=i_GmNm7L!d+:Y=pO["0%Br-DU@8(K;PUa.W>i8je,D)T3!DQ7)fhd@DVCj=NfHa#Cfd3e?*&Xo2dif[MSu9?&MUaB-Ia;*-jS6@=$>IAqPAW6J;P&rXI@qL*%'oPW!CHY$\k2Vr)]/Tn"m4EsbQO1^6aqD[,e7&Y]%;i\>bu7@NFkW>'>g2r29sn0(fsQ\rgGI/j(>OSiXLnk>o`ZR8Yd-+UT7u\i%88a;>85l.s7*4gjF0Fc<n*TtnKSqAQF9>j>N>hhd25<44ac;m(S&$^7?)G/]NY6AF^KWV;dQ?h)n70,oD;oD#qbAIqMY5:VSp6c%%oeP_'RHG48PriOnTap"mN]5P`RVUKRTf$*uTkpedMj\mc))4>VPHlPTn$Co/)@Z9-Ugee8:mfR*NOhBUhALMfCZeM9N]WW98aP\?%lFrmc!RLjl*P$q6.B+.1Y"8@Z<s:VT8=9Qo)kWq-l$)NoKpNeUHPZ"tk$q$pOJGL,cJ`!80c(H0Iqr<:*Q9@W,$W2a8k%:c"-eZh%?#+!>"D!Y41tdLa7!k0;fGjNCWQ4A_l[H6C9"f/H\9dAq]]R5G%+NgO3GCJ"V:gKU/ohCQRT`ned?J9Q'\./P.%.6V05?e^5*pR`%,*cn$f.,W.Za[**D\GFCn0Y$`%u`3;%P(97;:fiW=q&iDB/!2&HW)_Qh1!t-Pa$98WWstdG[&^<+tshOqm)![LkJ7RO(30;DT@RU%(4QrWoB27I'f@;)K*H#0aiXmE(>uDI)bI-8Fib]#,dS'2T#teqm7jn@Bth(Kg]ak1U1Ci9mA8Q[CYZdn(E*n$B]Xb%&Q>6F`g/F,%5tY=@<7C3&!$iGSfmR#!C"6VX$JUKg>P>7CTA&V,T"!<U]lS*tpYfB^^/oC,o`u$3\hJKPcpb*g79>BO+*Kcs&>cG[4OnL+peB"8%bkG">2jR&nRqiaWQ>)f>m'd:pfm"00lNp%N8tP?8O.;5HoO8B\-Q=BnDJttj4kDi8-UbdF>"Z'L&>`mpAolZY0JrsL:'iF:Kuo*\%eV^:Q$FFc;gI=L%<tjCl%BMW]ZF9*]1M$UM!D(;Rll]Xu\&,?sH:lPc.;lLeMT^Tn=cBNlFIfI%M8WX"=j.!:V+B;iYG["sQPe[;%\rq+*!):TMpR,>O.kA^LDiL1>X@f:+ga+\slDilK:.^i,b6$f%=_&#1Rlg(o?+@(0#JY\g7tl;)2;qD5/m"%kBIH(iN7L6E</Vl#%36B6l,HOG43Q]9o,%t0H)l<+iXsX2uUrdjLr<rM"W!O:#'n0OIqo3Ug]M?31aqGeo;7K)(@=&5p3m-%ujVuRW"HH\Q>=`ie_8M*S%cn'g-\KoB=3kZM$En]H/76b,k$;G!gjmK0KN40W=3u*_Ge9S9l;a-_aan+u,<N`BL3'/ATX*OR_X\WuIf&Z%(a!`_]e2kiCMFD4`%G1n*@VVEf69q.9B`W_,=W]h%gBUL:;3U(G*,(':8@nIcO9524nVO[?'?G)tu#IXl+;kQTt.T3?!E\,6f@=54i1s6Um1MmiRXei<r%6F"@4Z8LLaLD4I4KCoDi-V0V:![r*95FDNgdfih`;ZP1@f8,qF2q&tX'm]K-$=!#j'?5.1J?[MZ"&P5*Io(7s\i;8FmF?<[Wja6/%8BN1:*137B9Z_)Dd"1>*kn64fVs0K;'M`_4!u<4\E2+gYjr<&qb@'6C@QIaZelj7J!W.:c?u^A.Tr*:4CG!LM3(0r`Hn-,@cj@@f%)V'C)b/r4!(<,c&+3\\q\*JEH!Ig/>TgQKlT,T`-8aq@n[EJk_]G-iX<J0]\VeT!_;!0%ID>Q$Z8f8FsT)D0+M&8C=m(7p=)>$ch%EM._2<^G)sW14[l]fE7dR'a2e8K'W_R`bIMft\*1[6PaBdRi/g<\M(REf2eXS<H<ClE!8<\)!70gtI2\4'?'1`*\N]#AOd<R#uLE%+`t(h,h[X4'Hl+jg@Ge+Lds6;-!b!'MFe"=e=@j#_%=Do8J9Qo8!4l7+U6@3^rm=r=?WIR>:%M@"N'+,:A13b>b(H+6kTM30:nC!%cRfd!n/EY@*A<RuP;3k*-@1qGR(G+%aBlAQ$aAlqaXOS<eJ4!J`Z1i1lngGac96"QIGJGPJ3*"a2R:G\_'CQY1DmRO+tO(/.j>9U%4j:mD^Kuc_UJ$]U>.Bc.7_ZEAAj)eboGP.c$.%cc6]b(9;j;5Jl6_B)$7Z7V+QmY6Xr7).Xum=%NdIblZT8T7#at?t*0(aB@YUP1%na[mC#'stuD,(2\\aL.X*J@rjA<s<NCfYc!k\ucc*_iQ0)-+PuJ>;DB)0n(*gJG7^>@$0oK,eH0;YS4G371,W6<NJY8H\?/foU&h%g?j31GPN\74LPWA*nUEEiZA="q"H-6]0fo8E+b*CZ9hbBN1`6H(.JO"/@FCYN<LUuLb)eKKZ\n06Y$rb3'q9:Oop@Q/iZ13iKAt[%>$.p0ZkbQN&Rl-7*20gF]ag-.`6\bQ/Z\<hP%Af5REkoi-b6>*Q85esH-mf(fDfIJoilMSkllhU?F\qPPS`SeLQc%HaTJmddI@5,%7?i0ZogO"C3;H!8*__(BE[(](/ic7LO`!*CK&Mjp1`3Zm&L*/Nq>_7"3mI^CL54-nkqLn,X&!(_m4Dek$FKuS#!$:Lg0nKD+L>:)%/Y^Gr?+k0;/7ZLcQe?\cIX-Q&A&207p5(RU[*=.[hR_7aI1jd7g&muW,#(MHW&.auJ4tTI,BOig)^Ek*j9VT:bDhTuUu^LA)D4!7%XC:?%:i!T!#e>[)3C9oXgDM-dE5;R4%2U!-frR5u%=^9l2N7'%D(N9dh>;;`<VWmr\e4FNg'ni<+l5b64e-i9"UE+-U>u@ON=9D$%"<>t3TbJJ!G:3bfl8_,IiK=:2*%j3;`F1n>OE"fA)5-#/aUpiLQQ2^[8BF4j3DTp/2X!.Oe9^5)M@P7@,TRR=U?S?/#Z1igL8[.<%E.G#g$P(U-Uu^Kf*A0<<g#5sAOEO_J,IAID3C;M0iu+NXE5;SG%bpdZI:q)sXAduKn,V8lnZ5P+pMUUgekULOc6M9+KH=1E#c1&&%lf"W\<n609*`;G-Yt)g>K;h#6MSmP!>k2i[O489%i5<t\T_NKB!Kms4^u7*l0tG2Y5&B:)<$*_Q6M?P)LXLUBi0$$T5E$XYrB[tK%ndh'LSGn.]6NeMa3'[L2_''F&(EB(KEPVZ"&/Q=Z!cc$W1([*$KFWZu6\HSjSAQdACuZb9+>,Z@$f[<o`1WBrh4P"P'FlJrEQQ*I%6DC[bOq<s"Ta?R$*DR=.Jg45<mKt1L+mDAsF<MZo%OV[)aUu[W%&=!$+]db3D+Fm0_hg`cE.g9j,tH$DinF\$6Vm9bqa;X$qc"c4%qdcFYVL:K;d!\4m^L;mq`/j>LMYOTk[%^P8)R5+!]1Xa8VX8!+!o9ajD2D\2/UrCdZpIj%h^9AFcpftJHLKFopPDD!%T&4ri!B,a%,tI/h-oXOZ6GYA`&kWXrOLX3S%7s/%&<XK`!#:@P1I=RjOs>&o<osB*M61E@P/IPd6;$7#,IA^F3C$8A"\B[*,S@oo6&A5U:/MX`%%?Qgaj9SIOm-AVb&f2O].WNQ2ZB>naS?A[*e)>s+/ic7$P-K+Z[)=7\BM3/d"2lK<3'pm`-T+.qP*,q>V'gpe)apP<g8I\smZ<hR%*MG9_j;=Qs-2/f^$m&/YibAnKR^h8UZ&(n-6>[>Mm"^!.oVN@<UXTa1dp>;J6$6XYJF%r@6Za\.3'_^T_'-r7(E=P\EPYr7PG3gE%T=EPVe0cjccQ>],;Z.S/ImUsp!YcFjTKoak%Zm?nhuF3Y$LSJ!"Pob<R3%M$,"&Ut7d*[M])b6_R-"ApMG&tkU:B:CZm[AI3&-9u%N_lK]"?Dtl`<mKU7nI>SS05dO2aWX1fleT3m@_I;lk-'FfVh[P4GYPrRTOB&VI\$j+AKtV0gM3@=WC2,P(Eec.31ed-Vna(!W&#h%5DKoN`,c>`W4:pI,UtE*6DNN]4[Ps-OonZ5).Wun<"f$9d&FP9#bd.#@"_Eh_T1!Kc0&HFr5YFZS50O?WTNf=s,u,dDXQB^1nF[=%*+"TG$`;ZOW+s-Z;loD"U9!%t/>^(lHql=,X2"SiqTJd/LYjTRJ'Ni@+.iN+qs"$lMLP6_\_qJj)Xc(F*G5nTSXY`NKD!oPSJWma%:#NsSh84KkTDIA5eAUadcJ12H-'SmBAak+\#4mQ#!`')sR6\Yb$):''Yep,l4'j1R6*Iu'8AKq&/r1Ie26aI%?O.%-XsB>7"pj&]%%>5Y&!/c'9)p^VLB,MO0/d)`s,Em-lq's*IqB+6:3kkBU"@r,Sh@3h-m'V!62;EqB]-/]cOi0Z^rZYMM1*OQ+Y/d,QmA"%`\iRNC%*VZ0&KgT67&hXBl#S@=NJu&S,aslK8,YqitjQOlE^W?/,,D;#=la`)c]_!)A3Tei:8%DeA&JqOdb>9S<+X:Ft7_9B\VhggVIH53;%&giM:,0XAhl04LT00+-M((?:X34]kHG=+a!MQlYR)YPWCoI1%V#gKLY8MQ((/D,%+n$,/U)B/Y`T7Kg:*E?&,,Y)U=(G&?uRLV,/%C*#NE&W1.Nd)>i7R<6:1-*[4R^5'8g_?^<?VCR2]^itsN*lH?]Kqt<U-4[RE1$sK=)kF9A8KKi?$FW>/nn3odnLg?e!bB,ifg'6=%8?,'!,]&h0Cog64$O>frQ%ACm"[WNE5\:O2n<0h"rK%/5c@T1SOH_lBM'h\eDB0W$iGpLErfl_3MUDPtQcMprmmXd<g[TZ_C;i,N%,BX=Q#&91VQZNNu7t!0@Vn0fHk>_e0i?r=pEBd,Z&Bqdr9%'7)mUVK/@+ieUqYdLtbNu]>#Yc\CS74=?1)>u)K@9KJXl(6`CUjUm%*Wr0!PH!E["ooicP2MAs\-u0`S0tb]2Y?jBE$q!qgDpeW5Z5_X0,@=rO!86UH6\IdghSY:,!'WJl]+urT*i49aDYNdU!OPTc-t=`%!]NR9Ua;cd$WiOppBFM7&@ldRd4p!a1n$ft[k?.n1pNDr56E._1f62*Ht,-sC2FN!K->pr5Q]hBD@joY?"(Yhj#9\K4iH(,ms;V?%Xp/4TZ(A=2VShF<g.^M^^s!q*pHEZLcNL2h!7V[\lHDN\%Cgm&'WFet$D-V!M_7&*cV:cUE7U.XlW/$.P&_psD_d<>YtlFIrCDQe%j?Zo8'/oC]`drb3*^K99QQCG%aTHEJ2fT'6@emIB"%X0=#q>dW#<]([R(rf+%-qP>@*tpJ3lL;fj:M\[JFVID)Kl*`h!BC?iFa]O%"_Y[^5dY"X_@@\V=_V:LON;u=$TikbLWdarllZF0SecJdUkKg>N5?'R;s7'`J$)0YF\npsfRj[6G>(X;3iHm='H;.U"CsdW$jd1g%V9i]^&gb$%`>g.A(RH1aO@Gtj4dmM,\Pd7f!UZ2)!2r-D-"bMk"%^R5YqZJ;*bm[q+M70KgGsd%f85rPK?OdgSJH4\,aTX++#uM?%dYZi9+qA!K(hsWf)7NgjO#TfLd"oU3'TG'\j>^-UfZ\V\Roo-T]3V\tcqr7Yq]R<C+Jl?n9"Y1XK7&Y;8<&PG((tNcRtF*F:=[FP%b\Oil,Y&ejOK+FYhP(H%m.</q+@YU8+OLBBQ??`0C)r-8IaTJ'OXAe4-qXuK7iS6]m.du%!sl%#R:q6FkTn<K4`XG1>'d\E;GPWm%E.]GYEXt*Z8Fn+^=<S;pX>!tkmHU$WK+Lit9t3KsnhKiWK.?;U\VD-R4:W,ag`ThP-s-[Yha7hYdQ*q9W'TDQ8Rl4?SC;-jQQAO[%Q'6F;L)RjB)q4Y_(<B=\Ig%*0C7tj5C\#nD.+B@YS4\i!!0A]bOTq4kOsknm4J4ECMETC\:,"?H7N-sE\1&XFl4W8$BrhlZW5`;j%:8^$FV+2I$SSnI.`=roIoLP`e`cD4)D-"iO'4[C;B$QF+\#2'P3BQ'9]u8Hkh34YZPT?iA%^ha0KR6PYYHANOdoXXie^%&#gq78g%i\Jh1mg85PF"lGadRi+O:H5qedh'&`GN$cSmQBGOUGKUt]p#?Rh03>X@N//$M8u12*S>RZV#*oFZ1"JI'f0F!n"mO_Z;[TA)Sie6%+bDR(h@hc?\CYt$80BQtb"bj'SXHdI/6N&1IA1n1NlHLAG,:QT46\B<ZuVf&&Ul1pVrf:o.6CZ5[L0,56lXeIM>tMeYY<_0;!QbC%2.\/9$cPfmJP`X`GG+^SaRhnA-sg'm1M$fSF"gO9dhA/Pm2`&acjo`!epHQBD.4irhWpC(@cFD`YcO_g^_X@aFeKPl=kj7o:`\o)%$cUIjU7&:hOnBQ6Teu[?%'<9h#-MKa.)r^+Ql.u">6bB*TqpM+lr11^-[)2FSklBn4)*,;B#7<3"I6O0:u>l'h1\26m'"?]Os4H[%A/>S`SlRXj(B"r+$O+DL;\s0\FeKR\a4Cbc>pt+S/LqVEN0]3e$Ur#N^DIcEk.+l4lm.2tB&c5"i['=h5>&W&XJY>0o&>TIV3,s[%1Nq2PcDqgEBpdL,bYoh]#s/Q,cJftsMaA,9F;4GC(f=b``f3<<$T\+P7Nq!K8)m'Q"Adma;'<uIPoI^;W^CG=$E#j8`f4/th9g*o%G,%<I,Z6S4fCAS'$)F@=EWn-h^*f#p>1Df$77Wi;Cs7T9QmFbL/18"!2="(=plEW/7=F+1..%75dog=?cKY:;F)4cQVbAs\*%"3j%fMo7r'iZiD/c/I8<di\[^t+M:qK!6rGc:aG.SdY,fde,K;m<?,(MDUMlS8HMAWh"bjTNS\b+GKOjc\6P3\t+on\SS^(2Z9Z,jPK&%(?3TergkBoO7oiY_e%8*;PbY<)QhSpAM>`?ditt4ZUCVf;:7"aN6m>/f:bd!S16J"ad\f*?jaE^qs#f'k)<5=p"G2R!r@i):@./n%RTcQ!`G*<'?2!E'lW"gE$PtPjDU;r4i;0@^$bQP$7q1#*77;,9;XO2PL]Ql8\TSB11I,*`Pfn'dXk)F#GG7H_Dm2ugS."?CddIjZ%U+@g$oL>=,'F'k:O\q+;h-c'(oN@5qKkb4jGVGa/g]-,(:Q.pC8.5!$gCK[*cl@-D6/GT>AX!XUp:Y3-.6CHYU=.AGWHk"UX/`W^%,$1\d7KtPL?Kb3G<?s32$^6M!YOSZ<f,_<G(!i$m?kMdc#&46n]P,]'2#Z.FF'ol"\4V[V[C9leG5\:XV)a\kK#3Qf1#_K@=KF1a%P;d#?$o1L()ZI?P1jJ9-lQK#)Z$AscTY5((X-2jsc(nOFRb>*;B3ia.eogRa)0?Nn3VAEZV2=dpQ=Vru#K$/Zh;L1Y4/@F0_>Qf;%"FL)bpTc$6F<N`NZ:[b;-,a=1O?b%ZK1oD]Y;9m)M1&&Q5Lq-+L56BBBj8B7LZR-Gboen8Nfq64=#3?qI/=Le1YLr+)^p2H<Hd@i%&>tZbaaRI]l2#'%:Y@-fjNKmfV0V2CRVb`UT'X5:I&K`',\)Ii1?mAd3no8_:!P`ZK#<2;ZuXo4dWerDH^X[T_s[OT_YqtP$"`8[%b8s:j:siA1j;"AP(Mm&KYa#osIEM/d*9KtY_n>hPW0QnZX]81Vd:s_E]u@?3BSb?;!,eVc40kY9LC>\g",mkZRTBQ@]_(X%3mp'Q%L"HS&pP>1&+7$):=%W=,YI1t&hR;j^]*-Ws2^u-GTZPUb$;KM3S7l)?+\1"PM+a:lqbq55rCq#Wp3UOO]iNDC>0WORReATHDGk.K%Y(G)n@"^P.4[2Jb.Cq+09!O1cY!Ypsm6,1b42%eN-+/.7D<%"f"DnXSL<Aqm+>ld"8D#5T=a*'Aj/s6fn2C#IAj/AgLB%Lu;bC/i%JO0D%<*)sHS1'DS$U*S73phJi610E^g*KsBdqmop]o@/>;EV-jQqI2.p(D5]4o_a$?Jr^6N=^]e0Un_eXT"X'U`eu29#`4ZiJO\n%ZAA3E"19jM?DLo5J$/[s?7GQW^#J=BHh4i;mQsbMh?B`15a,dj'Y;@CSEO_8OJ=>0#:<`qjs`$;p82FQk'P@K>,@\@[>Hp'1sKe_%gk=%u]EtT\"s_DSVb48>-pjOcPMR_-+K@R,M2L&GRMkJc]le!$-;X/3$VV8M+qn5Y#pUo/_G1Cf4@Br[cj1</,]d'S$q_W^W6om_%PQ;2oDu8+cLC*9O;1'M?"ba@0eH9,@f.eZV.p]'+;)3(-JBVGf6lY3oj)YT@9OVC%)6L];"M*AdYorqJ31RQpPaW4rf;[]l4"`B*%nTRBR+;(j:/A/P]a=R5/N_cPR-G-)^4[@d1dNR0Q<sZA-X60oB!h_Ree:sbH?nDrFd:SGqW`5ucTcW9_Ao^?X*B/Lsblp,^!?3PC%i`O7`*p2Tu"fY55<`1%Z0i(AMR\\+,R<cEdEE3:dGtGii4t7<_J4Ljl%Wcic&D<.aHla;pUU/0AG>&JJD(j>3KKl2G;aLum)Pi7N%P?S&r?\<ls%*3La(D&X#hU*L^+[P[tO"RCFG0629Q%-qg+X@;q%jc4L^&dX^OcX@L'=H(@+cY4%3qUXjLQq!>1dW1m9Tko.6u10q%>[@a1]Nbh4<`bBAOe!tUf2k)4&-H(4_A/_B<(WM?GE`0naCY6BjQ'B/&;$!@\AX3a9*6]7%I&.('uiXUqES_a$'^,Uf]:,.mZP[(%+cD#18;E-X9*V/(,>9[6L/,8?@^<BDl^,pp8j@0%Yf.K5nkcN]>@H#q:DfR4j-?iIgCkc$N)]W+b9dPn"Ict;fq,&1NPuI8"EQE7%-@pJ;jMZ:=C<-Te>m3e+D9p9k3:IftA3ETD:kTH`fqLg!'NA6>#NBh]f^njN#%`pa;VW(!lTN[V!;-Ll=sup0bT-!C2//\@EM=Sm%7-sUJW=R*K#K#41OsW4SEJ5.?JDT@=GW,b[oY"BoMI&s?NXP;\;8'f:-F^m%Egg*6pg+(@*.m?.T,9F2-Am\uUc.As9gR';A0"?g%"c\eq(HEL.h2ZZF4un7=a[XN2OZDMc3MU>aCWo@n@T*j8V;qDsEou#'6^0/E9#qK*q5Edds2oco4#'hZok3W)XVM4("O"UQrmYDb%W=t9"R3bLsG$_[?Y5O"Xn^Pu2HRLYKVRFc*9dr1]-)+AIOHquV/-0T;;+H0[$]noH,S$G+p1Gg$:0g@0_].&]/o^)kk/!Gsc4%pE%7-t>TPmJn;(r\mrBO7EC8!K+;,`D"<kkFp//%0W"hU-C)"?*>_=js:rO,M7F<lskJC_=8LcU3$>P8qg?,)mn[$-9@P`Y,ns#XHh5%>)3P2br3H+K8Z8\!PlemB^7Kq6kRt*_D(a3?!*p#!U;L*lL'?![?a`W)b/lqV^V-:*YOR>,&7@hg<Se*4BVC>CdOjIHl"oQ68B2k%='18IU4XutYC92YLr>Y-@<,4LniTUo)2Q;h]OZ:lX7Y[1S*_CGC<kDC1%17lJ_Wa.T4P;G`6BVV1NdiPR_TlSht=P`/oEU!P$'GV%g$N_X?g]f*jK2[sZc-1SB[;<>FI0\XkQlYA-&3<g-of.R6,=][$OVpa=AX$saW`#9\1Cn>!B(<%*9"6.A4IIgXNV8O$eru-X+^qA%n64Js#FI*D*i4]K/$R:_JF<#5/DAQa[^tr(0]=U\MkC/W(G7_bG*+sM^j"b#,E*Gdo)RrBoR&@Y7J1X[mmThY0OJ>j5+MMeiYc.=%8B2\-^T]<q(bfcN,9.OQ3PpC,d;XaD,:*S^0\`N"CiNo8\f)nRGVKt>%3?JDR(Yjrp,OlD1iM.,a]Pc%AN&DumPrq\b8AI3B7i!M%?`S7@rASUNE1]@)5o]i?EG-1PS4/'N@ltZo*+73ffFXAR"io7P>]PKn,:*k5e8W7A3Ai@Y!EKYF@t[q$(,3V,iK=FeCUi"&]7u;m%J7#YJ8NlLpin+7eBA$D:G3aRRc0Ai%%DIhSrrD)69-2BhOcDK<\m\<mn8;>b,Kq+Sn_r7Be]-S7)_O.f^QDCfE!?dg4HP35l53sg%YR(a-E7j:WQoJ>iKSq)2Aq5lY,tI_i:VPD"Q^M@2Pu$7Ek:es6cU#YrL<bK7UE#g4GK*`G-o])niIW:JSI9X2\N9Z5!O`IS*9$4f%>XoVmXNM4$%\(cECPN:Xn92b$%qk=33g=X/)seT<qtqImY!W*s%aY!sjaAHdUEa"b/igf2OY1u?T8*da0R?.1".UF[o&6Yk<QF(2%*[s+bm,=*0g`Dd-#eNUHmDJ`_XNSL!5&>Be*$6p.!L=7WKd/]%.6539H1L'L]:9s47p%tlmYp^c0&.=Tr`lrhb5JkiB9<(5iQ`kO%LJ&]6!0VAXF+CdYi@H+;bm4i9oeF;d@M9U:!jU:8Y^tHT#P^Phn8Li.QQ+icXfiJpB*O2$%d!t8\Ij"HW,$o*`$R7V&/+"Ai!?SR%&$U_shuHPD]$TD0+W6UN\3_#"N3\.J'HQ*>Yo/KSL:H='S09fD&_7M[*8h8t_#`]FPO:Hbit,M+Zb[isE+b)!FQ(LLPN]lS%5&6Z%hdmH%h<,IA>B^rRWu<fi&Qa.B<Q+:YjV;(2Zc+KLOMTMQp3Rc($eeBmn;LC]@iB3sFlUC:S0J5.=@ZV:KQi*4A'?0^*9/*6j;@cM%99/M&:i_5?,ioO!+E>3u()")rKSRJa).=__j;8\im:V*3`&;s%+,S/]c:FtsL,_c*Y\8ZW,SCsP-?7->FqX+VKV-1/#8g'L>U(47%2Wta=&sjTr.7q>VVNQm4"'d,fci@9A#1<Od&hA$VZ,ELu_HGl],HN3Z\-'Ai.6,+Jg(',93(t@`NQ!0q%ZcIo&LJ/`%WRn5E1bCn%kQmf;.rmVEM9CltRTO5.ZC7T9%^-3&5-rA*-8=7c2sm'O(<_Q^&Y9Y.N\R)$EfB>&,nFNJU!OA.M8-LBGS5+Ko>DqF=ALL6!T'"g%l!WWeb)LD5\E!qmM+qu?s25(2(f4+NLBAjd%L[%%;\%eQYt,(d:oq>2/ehOD!#pgmaoEN@$]Zp8\E!W;M@5HKU1>)Yi'jn?%VA28%"cRDqf]krY;(LC=r$[J,hm(LiZCl+eW>0^j:WcE`[b+J5E#d/iP&]Mi`Y=aYiClhb!S3JD,)>ce\DRX68k,Gj\Pm>1#IC>(M]C$7%ia+X^T]2+Z*%EC_0T/O.fY_u6')W.lWE?B[EiI!@+3pb[[k!Hl[6J]2d8Sq0o]&m-?W?2qeVFdo`5p?Gff:u-=ZBFJKWs18)5E,a%/ERMQdY3CgX:%-]SX==tCoO*Wf"ZOaNp/Jt2sPT2<7&13+*Kqj0$Xmf-][pt,M3aqGQS=0)\Xq##E%kL=RA6U"&d#G/t$\%n-Y:^%+K6>.@S,BN2sQ<e9[o4o]Hjr<@`IK6p'ACN^0rCB\O`.LeY3W\YHU(Z%f2P,D%/4l0NdHWK3#9&o)@*t\rln08e^`0j(HkR\jri1%-UnTeX($isYeWZ='3eKa$F\(mP7%#X*Ki(GDUe)B8W,Z07Hn-6FY2br12ksJb='Cr_KM?)d64bCb;@FbR9$b?O8]THboCi[Z46,*%B"rfKAa5K[=2H9<ANFG78"eB.]T&?I&Sa6sPantp]IsHk;?tCaF;^!MQU//]P3k%%p!k\Tr/?orYj+!"-mL<koIbc`daP'\mkPo!%?)AG*%I'K=(iETN=1t_'XjcXg%e]7gkqiFM2og3oBpp;@Vs.=P1qd_k+QaUIdi+[\*GaJC^OAuH2MYV:LNQ,2df*&0SB(qt][?kp%brJiq4Y7+([8;8i<B`S?RGRFWo8-Q,c+#hs6F/:c+E1pH5B60Qj0%'+>;)#sFaPes5?<lXeaZ>E0rn*$EL(95W,HF,ILkNY(>';o%2n>=Xci,p*C8k73p.T7Z^1OQgGL-4uGh@%"TSq;!>MC%f7ZuM&p_W]im"NI[0"\`4+-XMF#[ec8jA$,FaX2ON2jdkraM1N7&g&2q%o!h=XYa:ce<@X7Z(>2^ak-`O3?5;0UP3XSR-e5.s?$dg@2l>B&D]@\kVu'f/SZP!Jp6-].dnAT1Ed<Q@:7"`8?L2n4jcmnFjNZ-$%hC[ecB&r6(7*uX3\DHnkeBXW[6VHU?#,U6u?*L@uTAl6NQ"XcRF*3<1:Ijup[H^@ga6RZmlQ<-$,W)f`g`57SQB5#sci*_qS&juE%D@"Zlf"1Z>fgJ.ORn2"'"g^/L;D<GrSd1`Udp<Al^R^?V,KLo-fgO7S*O5?n(pWh9%5s@*VZPLt^C+H,m]P21DWe-?Ae)K1P]O\,%9mIRl+ubFm!nWo^/o\KQgL(\/F8f.cH;bjm>//_pQGForZqCGc9mL9RhLtdB-??G;03J28]2BKH2rumK7%3gGTR'ZH<"F\!,0NiD%e@SV?H<1<?aEB]Jl:lLS5eVA_Y_dJ(i:MJF"fF<@1>#!`p/GFG;dKf)n&&:F,"$ZfWV;T-+fAKHi9MX:G;bSlEaAs>86^dP60C2a%1s+so.@7jtd^5nRcC=B&^j-<HqnXW-K;DuIVE>Q/*X^RgdSUMe;%N&`&>4<`hI%#]]dh+9pUhX?*h1\,d\KA;k'`a,0^kbsfL20O%.Cd#>Ns1mEp`4/p2rCRRYe33>$S:0Z]%TQ@G$e'k>>3?HQ1l+K2Nal,$7P@??U/m8[_X;r/QBaN>q).''XERkUH0[X=s?MoKSRAj%dQ:G?H1,uDjSe3FRn+WQ!m'+MD$?$q_&R889tM*%hNX@Ya8=p,2Nal-$68NXTYU(']m"9:3Kle)J.M-tWmO1AfA>@2dPBcS[>C[p%Ji')lrP[<9>AOu;M7(u(;Qk*&7-`sKmTQ(37++M+g'4$;W]U9kU[eECNln+!mSnB1Db&Ua]H&:%n9-9D3o"&%Bb-M9FT?<WZ3+c%%apt*3-p)sfBA!<i*G#JkG*F!IgSsN>erI$<\2qcmU25HV,g)-tg/2tmC8\'VOEM<Y5h`!s!7FV27f_qT3<6F]joEb'2$\)De/Z9W%;,%%'Vj[]A3uuk\#b^;[bYC#cT^5Nr"NlaI%[<M6%Y3oE2up7ZiW.%p'aHF9<#i^+;/p+PT]4$`6,c.<\NPek&ot!`OH-$EZ\bK(%"40*o%7'6X2ZTsY]`DXao`gM#e/KE2VeQ=L3iWVhl_l$.XAcM->eM--"0#?@^t#F<!3D2q"0ahd%D_7.D#dRsEW`7$apk$/<,M\8%8%AX#*T]af[_X:'jT\G/0/nE\;n2p"*T[JJFd*hqe?dp1U5jQ;&9X3U5h)d_!2,?M"+WFi#QX-hC&h$_8"l$TB0;_W%D_3V2$-NC%V#`QH.Li'8W&0%%UXB.2:6c%!FAs.Yc;A;OP*JMa:'F9\V6LQBGAJJ&dNC+tB-=XQ3<MXpbS_7DB$S3=3HoWP4]CMgI`"WY$j`D&%B-?D[<(G:kHNo)IfeWX#baoh?cf>rD3[N+fcSKiir&f%5i9-Ul"$Y&d),PV@:0+g>-8KXTT]__*"$Pi.);odPcN):R4Tdh0ll"H$%VU*''1OTINcKR-Xo1YbWSS)C?ka^+7+Qqi78'Wo=#'/#R1OsQ-cN)6HJHg)=#rHVm9V?s+B*&OtS.fSOk*\I:2U;M`8B:pkJB7q_%;AQV?PYX.dXEQD0Z\d`W)JFDncp12YKa.=r.5\j29VDKQB*o*PS<IX,atneW<h@u!Y]A$_!L;,2k8mE]63A_#'H0MfVU.TN1PH$2%c7(T#Ehq%^atn_U:sLLHE:Q\rJVe"HAL15&1o/K'!0KSM-Kc'].!_]:5fkg9#"hW>1q&'K$4W(Zo4W[8S4>Y1SnU#8nk>-rO`MEM%LqF`#Em>cnJB0a/#""na1_B4OUOeMJ)@_3ZdqAaBR779$k;4+PGc&m(_D@0<TespGWPIP^7X'FXN_Q=IK#&e^K<>47D)!h#mSP^k%7!a//\@?1UJr=uI)f-^&?6r]9'5#%;S5o_[VP@JWj]42P:buH2d-'api6g6J:/UW="_sT<&2\Qj;c)3c9sTWJ).6"jo4iipI<)A_%A4rt^M#5>'7!sp/+e)#0Q4/SY[7l+\8&/LGl.MiiiLY0!*o<&p[>A]kNoBJ$Q^Bd*W\M27:g3tR:ok>E>c]8o$7cT,a1A)$_s52X%@"lWT+Ui$8"6IOQ#OS('![T4SV/nr>YlJr%\$Lpu.m+4uOl!KtJo;.b-44X?57]Z7Ia80#pEs5I_>QY]fL30:M_X^KL?=`_P;`2F%3iY!We5BqEbOmpDS@o9p3I;fh1uDXoe2[`L=m%be*#jN%2Nal-$NBFV>4?Hj7ZpLMrn]b\#l_8(]cV&7IA.,Gm2<[3hu40)Ca-QG%0As<@(^9h\A[%$`b+rG&=hNgZ1eSf^0d"r36+6EUDb'4#Rn2gE/A(7o>FKYX=M>US/9-U^!eEfs)!r=6i4*i3=G_P:#nr8PYR#Dl%pPqrn]ql1RRpI3@>j[)+fL5:=*UU"Bp0WWa\ZXXSEmYn(GL>EM[NYpF83SYFmW*3#\a?s=K2(FfAT`d14V"Me,W?X7p0?p]^@#4[%gI-'Z'#86/gONH`+U@qfBfcmZbjBu/B)W=rQE,[hEjM&;E&[*B+9f;*#n32]lDQDEe</a2]ac)^Y>13,d.:2K];GJkHk_Q,VkIh#%3]5/n8YFVT8jQfsiaQK"2NaC/d8"4D>`;Q0\eOrU]gbW6]i!e/#U$fjPY_Eh/?)I]LngKUXJ"Xigeh@/):#!d'kBtB<qq!GU9[k*%lE]TX2Ym>]"m7;P.`XgI8Dq=sVf."mA`ojSadHZ'>`e;W!CPB(Ca-D@#nf,ED:#;NP(RN2`#\2[VYB"YZNLPoQ4&D>D6o`<+u`/T%SC9#_K(#P23Wi&-2,q(jY4KT]WQlJ^a#fbqDQa_t1^L#WL&"UHCbAD5REh<:>]o0\-kq^fSI0b8=V@'r>`)9"j.bSTb.'UWh&$:U%G751#J/D!1'JSSr-SR,#3V$UIKaFWDO(ui\>DgD:f8Cr?SVh!F*KS1][hh[s#9fCY%TEQ5%qfONC!\q39bTldb[*h#`R.L7K/*(s%2N_.05hK7T-_!Y?A/!Y9Ol:%Rc3:@/jf-s%[MRPS<dVP2BJhOffgP[i$oX6pJ5s3ZY\ML%eL&^WP+cW_a9#B=Hc3`IZ:uSheNT*!%WV1$GCa/hgR/jY@@R7$m%GG2(8L4q`l)BD8E1"t.;5AWZHl@qf9m\Dk[41hRTS>d&Ol`OU2%@oIa/<2\N$A3nC4W:r#6g\WjYRfC%RW`:bg2A=cC&@3h22^0amGFT?3,QO3JCCAX%7ZK,a=,KDF+L4%XTD4dni.ITH5?oDD9@8mVHp/jOmQ`tR!,;+e##5<7Zjhg>hTq0%V=AabMPO`C/F?&\V>^7C;5AEKT[K]"'NBB?p$EQ+'^:6Q5\X/g)3hRpIQnZ<[ai]k["$(DR'_@K(lTY%%hD-ld,$_pT%Zq@!7K_Q%!MmD&)iPuS?NlMaP)o-H#\auUNp1I`qEN+0381Po(e(l/2iL6'pT/s9HSn]\,/*VV0\X^g!_3(apq\B,$cR]dHbq46Zp2k@UWE.8%RA&j<?t:\>^IhJ#8:Tn?,h`o-6)**i^D]P0p/liY:IPGCp/Ejc7Ja?REG-Vh#abI7"rNehkqI5VH,_O[q\ECq,2:F"7\TeD=[A`E%V[c1YcsEdH;I(GYP.q@+7ZeI$0*Qn"TIg.#o#/g%dc4pnMY&P@$pLGb"o.F1m9gXm7;]l4]hTa;fdiK,.'bEhL7\?27tI91Q,I&E%kmOd>cb:M0nr/ngA/+8g^AuTo7N$Gg*uM%UAGa0`\2-<&!dCLPN.@JhKeZtJPcoV.WQ5OuR1AKm(N5%)k7TTlFS6ajd+R`Z!]me,%!Q?J8n%W8U5"5]sp5p>R,(7*3jQpqc+Qk=_Bp)>hcS$Ng^'#9mp2r,-7CKVBJ2==:%QKeTq&&o?CU`?K[(JKWN$(Zd8:TVSg`2s*%!B5d!7Zhsi8"6KC1#Do%7Zk%gVPr,R6Um3F(P[kmYoDg`Jq].-Yp&6VL4tR1O&7H='T"Cr2fUBZ'R>dN+f!,2/.3=a*i)r[-k`"Z%DW4g?..SM.6:R(BR2.Q84@llA;<0I7Ko@2dOtC2YH&QV!Lr*2\,2tO%=[Kitk(]:,pqC5P8K2<`..SMJ6:R(BGo&5n7!?2%GTihQ%3pmdGKo@2d;D2_uH&R(nUWA)K$Q2ASA7*D+neh=g7Zl=sEuY-G7Zl>!EuP-I7ZhfJ%1EX_7:K3?D%mBr7:KKGD&`s%733^_a=-U%%$hJpHABiL8/qto#hbhS7@m\5KB,!q%%#`WhKTomWXN[Kbd3pd-7Ztdc1SJEjg%Z#`Dt,nYOl`;NL.68Sd>4rF1nq#rNT_!J,J$Fp%Lp$;*U8p\AkTWqM\jk5+/oihDX(74R.U+./7+[6tnhm/"KFLEaeNG_27WcZ'Yf^CfB5OM8Oeq>GASsofW#O,amRD;`]FeF\DaYE+%S!]2qr/KniJKqbIi.s!^323GnNp%[D,J(tULp#/cU8pD:kUM_dJPfsWG@krWk`!h">pXS\(E"7@<D#c'NRJJF,]uLV=WPmi>"<[s%f+D:7G!oE"*RRl%7s'mJ&R?],6l4Ms%Ob)s'7NGn7e!Wc9)].91Gt&kaa'$2&RFLD6l1\$d7'p&FHu,'?0$<@3f]CeU8r*kkT\h-%]#sc'/eU@BCQ+><.chndb5$jrP!5V@XNq,@OgMr*FHu_8>pXtg(YKnX<Vf4-OoH#!-%JD8(a.3p$:o8u!tnlcJOERB+ONUr89C+%%&mZc77+[eKd7#NuC(s7/E(/CB+OO1Q89C+.&m](%6rtf\d7$f$FHI7M?"AXW=(ri*<F/4<Po(->AVNV)W$0PgDFel3*"lOgLH[DL%/8qQ_*0KHD,SHZP7%t?`89DibM9^o$d2>m$4\2SDFN,&PcH%3W)-\p8KD1?L4cW%-aEi[LBiJ'97[$m12i=\*d3<c[\k4$#Y-LQl%X7VP<.Xr_T8g&tn0hA$s'U%Z(LEsH',)NJ.8><.AP3=BV,e?GjM68R)U2*`Ve0qVg7>l8NkUN2M\k4B-/i$%nX-Ae2.]4Q'81KJ!%Z:^jl[$'VsY9^\O/;^Mb9;8K:P3=C),e?N!M6=-Wh_g;P_J%7MO\mBd9Onjj`qO)2.?,P+$iZW0-8LHp>B36/8>s!09kb;eN+jK2%aFdG*)+>V*R`HtaP[$#QM,c$"GC7lO<ft<\OTF<)dYY%L&$er@'mYma,-/f>GpfnT4@VGq<?s:pA/0BOH6TE2KA9C/733_Ha=?`l%qa=JI#O*VAMEJsEO]CHs!fF''%l-slSEG0HB,(aGX[^GV&rNb7O0MMq'mYmq,-/dp4;:peHC8h1&Of`_#FR!GMEF?sO]CI./rH_S%9g(a2O]A2AB5_=Ua=?a'*CX"kmH<NSHk`dO1C0sG7IJf,;Cj.B<RaC3eC5trj(i9Bl!K9b-Dnj6dL5DGR45G!4@i2/<THG`MQA"_%O],d*H'"R@X%7W_]nr=QX%5;<@t'<:,**=8A/0BOTd$PYK+o&'73:Hea=?a'8OZ[B[&S%QWR<9ET@Z$M<+H`38);$\*O1Lgp-Y>L%\)IX</T"Z_6%4pBaSXAlbMWW9fe/&r&(7h?_%3hbh><>[9eEO<2X0,E%s#;SXVKn%\X@s$i;GXccDTe>8q)kSk'iE=i;RE4<r=(7%GoZ`)dC6SVIs6@'S%V'.r#h\qpS2Hc_%4tsr_WP9ksjkLUbsO=4>W8ZrnF5e`=K9QhQD<hd)c+32ffFWOHuq"K-)@f%<.Y:lQ+2J%Zd8RWDj0%+lj#Pj%nm]u0$`:_OlPHV%3@M^TM\tPgl-fs#&E&QOjA`IEO"uicLd7Y+uP7/0R0+&'E_e?3,!4+QuN]RNu8b86sPDI%+iVF7^H9n7Nf.jojL>JJ7uiMW&/TV,hFLt)[-j2MVl#-gf_;P95&t1eE?dsX7Y2fd)FXkUbp^YKYSKBtF0jJSNICi@BDORoN9cOa%r^].oGKI%a))Pj"eSFqD^8Gi8U[D-/H:`SGhS99F:?hYe]C&o[=1mpIL3W2fgrt4o0TE_7</3<JT[DYc'[oT$A/^k+KcO^4"=:3@%VNIA8nggT"S(YQ_Bk.K[)O\Y(<hc#<brM)\*eE?^g@p!<K00pCSa7Y\D1[,?f37?9J(nFjVfhF$.kgVqCp-u2[s,<J$_?N5[!tW(%etGJRY&3R5=4V2?UO?-3l];#9?hPWWmT4)1E8loK9T2BH^)NP;POUssnmmH\D%Yci1sL4/g/bi1Sifg3p02aIXgh\tBCAMSeWC9B%Kg]E'E9=M*<j=32em5QMifP4gf=O0:A?T_7]dm8N"cJ_Rq:OOaPSrnXodfGYc]#K]f#P&k1`<LKWA]5aYm]jkWo.KLg-<ILbF#K.%[X$`a*B2ULr_\Ro&\aib\RrUC^9MUS?*5L#[X#0hfP=$)D_TYShj\m%YN,;l'+hUMgSJi'rQ:R[^$P!0I@bOo5"o"NOJck8'lL/,%;C_WkjQYqe:%<>5+M28^f+?$P'usjoURBr_IJ4'CE)#3Vh9Mk3V>]+*CZ2h;)1B$Ik?5Rdf!b(W^=`V,'`5uKl#*]X<*j?mB>:E*%o4_uI*3s]g]Th_f\@/fo?LR+%qt>b#><cJQ5l1kYI0bQ('q4eGmKdIbVPE\;aF'G8(95['f"WZ^34e7e,9PX+I%00i<m!AJ4B$`8%3,bY.TtU<@2p_UR550h*[XD-smJS='GGhhtl"=?!59jTr5ML8HqS1<VQ;AAk\QimY](UG?pOb8AcY._HR89$oqY3XKIsV(2Sc&I_%BDqA`^V,*qn!@t-qq[ga?U"M^jfdQ*s7>X$\%A8]rVZ+;5CEJ+k?i]8r7dQf?2r4]5CNG"lYjOcqsqY.s7k\?VHcoR_aT%Po,mH#%#>3MLIK~>%AI9_PrivateDataEnd